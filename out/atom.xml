<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title></title>
    <subtitle></subtitle>
    <link href="/atom.xml" rel="self" />
    <link href="" />
    <updated>2014-01-12T17:57:54.186Z</updated>
    <id></id>
    <author>
        <name></name>
        <email></email>
    </author>

    
        <entry>
            <title>Javascript Events</title>
            <link href="/posts/2006-07-jsevents.html"/>
            <updated>2006-07-01T00:00:00.000Z</updated>
            <id>/posts/2006-07-jsevents.html</id>
            <content type="html">&lt;p&gt;Пожалуй, события (а точнее, обработчики событий) в javascript играют чуть ли не самую важную роль - именно благодаря обработке событий возможно интерактивное общение веб-приложения с пользователем. Изначально обработчики событий начал поддерживать браузер Netscape 2, следом IE3, и затем уже все остальные браузеры.
В этом посте я начну рассказывать про события в js, в течение месяца постараюсь &amp;quot;добить&amp;quot; тему событий и приступить к более интересным вещам.&lt;/p&gt;
&lt;h3 id=&quot;-&quot;&gt;Способы установки обработчиков&lt;/h3&gt;
&lt;p&gt;Существуют четыре варианта &amp;quot;навешивания&amp;quot; обработчиков на определенное событие:&lt;/p&gt;
&lt;p&gt;&lt;ol&gt;&lt;/p&gt;
&lt;p&gt;&lt;li id=&quot;pseudoprotocol&quot;&gt;&lt;strong&gt;псевдопротокол &lt;var&gt;javascript:&lt;/var&gt;&lt;/strong&gt;. Псевдопротокол &lt;var&gt;javascript:&lt;/var&gt; по-настоящему бывает необходим очень редко, но, к сожалению, используется повсеместно. Делают это так:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;javascript:alert(&amp;#39;got click!&amp;#39;)&amp;quot;&amp;gt;link&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Изначально этот протокол был создан для тестов - и до сих пор удобно проверять что-то по-быстрому, вписав в адресную строку выражение (например, в IE я раньше проверял hasLayout таким образом - писал в адресную строку &lt;code&gt;javascript:alert(someElement.currentStyle.hasLayout)&lt;/code&gt;). Этот протокол никогда не был предназначен для навешивания обработчиков событий. Но люди поняли, что при нажатии на ссылку происходит выполнение содержимого её атрибута &lt;var&gt;href&lt;/var&gt; (вспомните, что происходит при нажатии на ссылку, имеющую &lt;var&gt;href=&amp;quot;mailto:somemail@serv.com&amp;quot;&lt;/var&gt;), и стали использовать псевдопротокол &lt;var&gt;javascript:&lt;/var&gt; для &lt;strong&gt;замены&lt;/strong&gt; основного предназначения ссылки (исполнения роли идентификатора связанного документа посредством универсального локатора ресурса (URL)).&lt;/p&gt;
&lt;p&gt;Стоит отметить, что &lt;a href=&quot;http://www.iana.org/assignments/uri-schemes.html&quot;&gt;ни&lt;/a&gt; &lt;a href=&quot;http://www.gbiv.com/protocols/uri/rfc/rfc3986.html&quot;&gt;в&lt;/a&gt; &lt;a href=&quot;http://www.ietf.org/rfc/rfc2718.txt&quot;&gt;одной&lt;/a&gt; &lt;a href=&quot;http://www.ietf.org/rfc/rfc2396.txt&quot;&gt;спецификации&lt;/a&gt; не сказано про наличие протокола &lt;var&gt;javascript:&lt;/var&gt;, потому я и называю его &amp;quot;псевдопротоколом&amp;quot; (в то же время &lt;var&gt;mailto:&lt;/var&gt; &lt;a href=&quot;ftp://ds.internic.net/rfc/rfc1738.txt&quot;&gt;как раз&lt;/a&gt; &lt;a href=&quot;http://www.w3.org/Addressing/URL/url-spec.html&quot;&gt;описан&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Более того, WCAG &lt;a href=&quot;http://www.w3.org/WAI/GL/WCAG20/tests/test181.html&quot;&gt;говорит&lt;/a&gt; о том, что псевдопротокол &lt;var&gt;javascript:&lt;/var&gt; использовать вообще нельзя, и в этом случае я с ними полностью согласен.&lt;/p&gt;
&lt;p&gt;Однако авторы браузеров из соображений обратной совместимости продолжают поддерживать эту пакость, а колхозные веб-девелоперы продолжают пользоваться этой дрянью. Основное неудобство и контрпродуктивность такого подхода в том, что теряется сам смысл ссылки. Ведь со ссылкой можно сделать множество различных вещей - добавить в закладки, открыть в новом окне, распечатать содержимое, сохранить содержимое. Весь этот функционал теряется при использовании этого псевдопротокола. Вообще же этот способ не является полноценным методом установки обработчика события, потому что этот метод может быть примёнен только для элементов, имеющих атрибуты src/href.&lt;/p&gt;
&lt;p&gt;При использовании ссылок с таким обработчиком необходимо помнить, что функция ни в коем случае ничего не должна возвращать, иначе произойдёт &amp;quot;переход&amp;quot; на страницу, содержимое которой будет состоять из возвращённого значения.&lt;/li&gt;&lt;/p&gt;
&lt;p&gt;&lt;li id=&quot;inlinemethod&quot;&gt;&lt;strong&gt;inline-метод&lt;/strong&gt;. Запись атрибута on&lt;strong&gt;event&lt;/strong&gt; html-элемента. Пример: &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;someurl.html&amp;quot; onclick=&amp;quot;alert(&amp;#39;got click!&amp;#39;)&amp;quot;&amp;gt;link&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Этот метод появился самым первым, и поддерживается &lt;strong&gt;абсолютно везде&lt;/strong&gt;. Недостаток его заключается в том, что логика смешивается с содержимым. (если вдруг придётся изменить обработчики, придётся лезть в код (х)html). Применять же его можно, как мне кажется, лишь в самых простых сайтах-визитках, где весь js-функционал заключается, например, в открытии/скрытии какой-нибудь карты проезда. Ссылка сохраняет свой основной функционал, её можно положить в закладки и т.д. Если же Вы не можете держать в памяти все установленные обработчики в проекте, то этот способ неприемлим.&lt;/li&gt;&lt;/p&gt;
&lt;p&gt;&lt;li id=&quot;elementattribute&quot;&gt;&lt;strong&gt;Установка element.onclick в js&lt;/strong&gt;. Данный метод сообразен предыдущему за тем исключением, что установка обработчика происходит не непосредственно в (x)html, а в скрипте, и это удобнее. Пример: &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;где-то в html: 
&amp;lt;a href=&amp;quot;someurl&amp;quot; id=&amp;quot;myhref&amp;quot;&amp;gt;link&amp;lt;/a&amp;gt;

где-то в javascript:
var handler = function(){ alert(&amp;#39;clicked&amp;#39;); };
document.getElementById(&amp;#39;myhref&amp;#39;).onclick = handler;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;li id=&quot;addeventlistener&quot;&gt;&lt;strong&gt;&lt;a href=&quot;http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget-addEventListener&quot;&gt;addEventListener&lt;/a&gt;/&lt;a href=&quot;http://msdn.microsoft.com/library/default.asp?url=/workshop/author/dhtml/reference/methods/attachevent.asp&quot;&gt;attachEvent&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;var&gt;addEventListener&lt;/var&gt; - специфицированный в DOM Level2 метод, &lt;var&gt;attachEvent&lt;/var&gt; же встречается только в IE.&lt;/p&gt;
&lt;p&gt;Оба этих метода предоставляют наиболее многофункциональную реализацию добавления обработчика события. Пример:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var handler = function(e){ alert(&amp;#39;clicked&amp;#39;); };
var elem = document.getElementById(&amp;#39;note&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;addEventListener:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;elem.addEventListener(&amp;#39;click&amp;#39;, handler, false);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;attachEvent:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;elem.attachEvent(&amp;#39;onclick&amp;#39;, handler);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/li&gt;&lt;/ol&gt;
Также существуют ещё два метода установки обработчиков событий:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;в IE4 и старше: &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  &lt;p id=&quot;myP&quot;&gt;text&lt;/p&gt;&lt;/p&gt;
  &lt;script for=&quot;myP&quot; event=&quot;onclick&quot;&gt;
      //code
  &lt;/script&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Opera9, Firefox1.5: &lt;/strong&gt;&lt;a href=&quot;http://www.w3.org/TR/xml-events/&quot;&gt;XML events&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Но мы эти методы рассматривать не будем, т.к. до поддержки XML events самому популярному браузеру (IE) гораздо дальше, чем до поддержки событийной модели w3c, а &lt;var&gt;script for&lt;/var&gt; нарушает принцип отделения логики от содержания (и работает только в IE).&lt;/p&gt;
&lt;p&gt;Как Вы успели заметить, первая пара методов отличается от второй коренным образом - обработчики, определяемые в (x)html-документе, представляют собой последовательность javascript-команд, обработчик же, установленный в самом скрипте, обязан быть объектом типа &amp;quot;функция&amp;quot;.&lt;/p&gt;
&lt;p&gt;Также при использовании второй пары способов возникает одна проблема - если скрипт расположен в документе &lt;strong&gt;до&lt;/strong&gt; элемента, событие которого будет обрабатывать какая-то функция из скрипта, велика вероятность того, что браузер попытается &amp;quot;навесить&amp;quot; обработчик на ещё несуществующий элемент. Такое может произойти, если браузер &lt;strong&gt;уже&lt;/strong&gt; получил содержимое скрипта и распарсил его, но ещё не получил сам элемент в (x)html-документе. Это далеко не такая редкая ситуация, как может показаться - скрипты, вынесенные во внешние файлы, часто кэшируются, и несколько документов используют одни и те же скрипты, потому браузер часто берёт файлы скриптов из кэша, соответственно, сразу же исполняя их. Впрочем, скрипты, описанные внутри элемента &lt;var&gt;head&lt;/var&gt; (x)html-документа, также будут исполнены сразу же, не дожидаясь полной загрузки (x)html-документа в память. Проблема эта решается просто - в структуре DOM, предоставляемой каждым браузером скриптам, есть объект window, имеющий кучу свойств, методов и событий, и одно из таких событий - &lt;var&gt;window.onload&lt;/var&gt;. Это событие вызывается браузером после получения и парсинга всего (х)html-документа. Соответственно, в js наиболее безопасно работать с документом и его элементами
&lt;strong&gt;после&lt;/strong&gt; появления этого события.&lt;/p&gt;
&lt;p&gt;Пример:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;test&amp;lt;/title&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
        **window.onload = function(e) {**
            //it&amp;#39;s safe inside
            var handler = function(e){ alert(&amp;#39;clicked on paragraph&amp;#39;); };
            document.all[&amp;#39;text&amp;#39;].onclick = handler;
        **};**
    &amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;h1&amp;gt;header&amp;lt;/h1&amp;gt;
    &amp;lt;p id=&amp;quot;text&amp;quot;&amp;gt;text&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Так как пример будет работать во всех браузерах в quirks mode, я имею полное право использовать document.all (к тому же, так ещё и IE4 будет поддержан). Цель примера исключительно иллюстрационная, потому кому нужен standarts compliancy mode, переделайте &lt;var&gt;document.all[&amp;#39;text&amp;#39;]&lt;/var&gt; на &lt;var&gt;document.getElementById(&amp;#39;text&amp;#39;)&lt;/var&gt;. &lt;/p&gt;
&lt;p&gt;Итак, мы выяснили, &lt;em&gt;когда&lt;/em&gt; добавлять обработчики, договорились не использовать первые два метода (inline-описание и псевдопротокол javascript:). Теперь я подробнее остановлюсь на последних двух методах.&lt;/p&gt;
&lt;p&gt;Метод установки element.onclick хорош тем, что прост. Основной же его минус заключается
в том, что он не позволяет &lt;em&gt;добавить обработчик&lt;/em&gt;, он даёт лишь возможность
&lt;em&gt;заменить существующий&lt;/em&gt; (если таковой был определён). Получается, что с помощью установки свойства onclick невозможно использовать несколько обработчиков на одном элементе, что иногда бывает нужно. &lt;small&gt;Вообще, конечно, добавить можно и через onclick, только геморрой.&lt;/small&gt; Методы же addEventListener и attachEvent позволяют именно добавлять обработчики (для них существуют и соответствующие методы удаления обработчиков - removeEventListener и detachEvent).&lt;/p&gt;
&lt;p&gt;При установке какому-то событию определенного элемента одного и того же обработчика, дупликат не будет установлен.&lt;/p&gt;
&lt;p&gt;В следующем примере обработчик divHandler будет вызван только один раз:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;test&amp;lt;/title&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
        window.onload = function(e) {
            var handler = function(e) { alert(&amp;#39;clicked on div&amp;#39;); };
            document.all[&amp;#39;text&amp;#39;].addEventListener(&amp;#39;click&amp;#39;, handler, false);
            document.all[&amp;#39;text&amp;#39;].addEventListener(&amp;#39;click&amp;#39;, handler, false);
        };
    &amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;h1&amp;gt;header&amp;lt;/h1&amp;gt;
    &amp;lt;div id=&amp;quot;text&amp;quot;&amp;gt;text&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Когда на одном элементе &amp;quot;висит&amp;quot; несколько обработчиков, они выполняются в том порядке,
в каком были установлены - стэк, хранящий обработчики событий, имеет тип FIFO.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var elem = document.getElementById(&amp;#39;note&amp;#39;);
var handler1 = function(e){ alert(&amp;#39;handler1&amp;#39;); };
var handler2 = function(e){ alert(&amp;#39;handler2&amp;#39;); };
var handler3 = function(e){ alert(&amp;#39;handler3&amp;#39;); };
note.addEventListener(&amp;#39;click&amp;#39;, handler1, false);
//note.attachEvent(&amp;#39;onclick&amp;#39;, handler1);
note.addEventListener(&amp;#39;click&amp;#39;, handler2, false);
//note.attachEvent(&amp;#39;onclick&amp;#39;, handler2);
note.addEventListener(&amp;#39;click&amp;#39;, handler3, false);
//note.attachEvent(&amp;#39;onclick&amp;#39;, handler3);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;В этом примере выполнится сначала &lt;var&gt;handler1&lt;/var&gt;, затем &lt;var&gt;handler2&lt;/var&gt;, потом &lt;var&gt;handler3&lt;/var&gt;.&lt;/p&gt;
&lt;p&gt;Несмотря на то, что в msdn сказано, что обработчики, буде таких несколько на событии объекта, выполняются в рандомном порядке, опыт говорит, что они выполняются именно в FIFO-порядке.&lt;/p&gt;
&lt;h4 id=&quot;-&quot;&gt;Резюмируем:&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Обработчики могут устанавливаться четырьмя основными способами: &lt;a href=&quot;#pseudoprotocol&quot;&gt;используя псевдопротокол &lt;var&gt;javascript:&lt;/var&gt;&lt;/a&gt;, &lt;a href=&quot;#inlinemethod&quot;&gt;c помощью установки атрибута элемента в (x)html&lt;/a&gt;, &lt;a href=&quot;#elementattribute&quot;&gt;устанавливая свойство объекта в javascript&lt;/a&gt;, &lt;a href=&quot;#pseudoprotocol&quot;&gt;используя специальные методы (&lt;var&gt;attachEvent&lt;/var&gt; для IE и &lt;var&gt;addEventListener&lt;/var&gt; для реализующих стандарт DOM2 Events браузеров)&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Методы использования псевдопротокола &lt;var&gt;javascript:&lt;/var&gt; и установки атрибута элемента малоприменимы в реальных условиях.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Использование специальных методов (&lt;var&gt;attachEvent&lt;/var&gt;/&lt;var&gt;detachEvent&lt;/var&gt; и &lt;var&gt;addEventListener&lt;/var&gt;/&lt;var&gt;removeEventListener&lt;/var&gt;) позволяют, в отличие от метода установки свойства объекта, &lt;em&gt;добавлять и удалять&lt;/em&gt; обработчики событий (а не устанавливать единственный и отменять вовсе). Метод же установки свойства объекта наиболее прост в использовании, и там, где точно хватит одного обработчика события, будет более удобен.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Если у элемента несколько обработчиков одного события, при возникновении события они будут запущены в том же порядке, в каком были добавлены.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Регистрация одного и того же обработчика события дважды невозможна, обработчики должны быть уникальны.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;-&quot;&gt;Порядок запуска обработчиков события&lt;/h3&gt;
&lt;p&gt;Так как (x)html-документ имеет иерархическую древовидную структуру, разработчики браузеров посчитали, что &amp;quot;пропускание события&amp;quot; по всей иерархии документа даст б`ольшую свободу веб-разработчикам в реализации интересных обработчиков.&lt;/p&gt;
&lt;p&gt;Итак, предположим, у нас есть следующий код:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;test&amp;lt;/title&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;

window.onload = function(e) {
    var pHandler = function(e){ alert(&amp;#39;clicked on paragraph&amp;#39;); };
    var bodyHandler = function(e){ alert(&amp;#39;clicked on body&amp;#39;);}
    var docHandler = function(e){ alert(&amp;#39;clicked on document&amp;#39;); };
    document.onclick = docHandler;
    document.body.onclick = bodyHandler;
    document.all[&amp;#39;text&amp;#39;].onclick = pHandler;
};

&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;header&amp;lt;/h1&amp;gt;
&amp;lt;p id=&amp;quot;text&amp;quot;&amp;gt;text&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Если нажать на &lt;var&gt;p&lt;/var&gt;, запустится сначала обработчик &lt;var&gt;pHandler&lt;/var&gt;, затем &lt;var&gt;bodyHandler&lt;/var&gt; и уже потом &lt;var&gt;docHandler&lt;/var&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://photos1.blogger.com/blogger/2964/3399/320/bubbling.gif&quot; alt=&quot;bubbling event model&quot;&gt; Событийная модель, в которой браузер выстраивает очередь обработчиков от целевого элемента, инициировавшего событие до корневого элемента &lt;var&gt;document&lt;/var&gt;, называется &lt;dfn&gt;bubbling-моделью&lt;/dfn&gt; (bubble, англ., - пузырь).&lt;/p&gt;
&lt;p&gt;Событие как бы &amp;quot;всплывает&amp;quot; по иерархии документа от элемента, вызвавшего его и до корня. При прохождении каждого родительского элемента браузер проверяет, не установлен ли у этого родителя обработчик события такого же типа, и если установлен, вызывает его. &lt;/p&gt;
&lt;p&gt;Эта модель реализована в IE.&lt;/p&gt;
&lt;p&gt;Если запустить этот пример в браузере Netscape4(с небольшими изменениями), обработчики будут выполнены в обратном порядке - &lt;var&gt;docHandler&lt;/var&gt;&amp;rarr;&lt;var&gt;bodyHandler&lt;/var&gt;&amp;rarr;&lt;var&gt;divHandler&lt;/var&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://photos1.blogger.com/blogger/2964/3399/320/capturing.gif&quot; alt=&quot;capturing event model&quot;&gt; Событийная модель, в которой браузер выстравивает очередь обработчиков от корневого элемента &lt;var&gt;document&lt;/var&gt; до целевого элемента (инициировавшего событие), называется &lt;dfn&gt;capturing-моделью&lt;/dfn&gt; (capturing, англ., - захват).
При прохождении каждого элемента вниз по иерархии браузер проверяет наличие обработчика события такого же типа, и если обработчик есть, вызывает его.&lt;/p&gt;
&lt;p&gt;Эта модель появилась в браузере Netscape3 и со времен Netscape4 в диком виде не наблюдается.&lt;/p&gt;
&lt;p&gt;Вообще же Netscape4 - сущий баг, да и процент его на рынке исчезающе мал, потому на нём внимание заострять не будем.&lt;/p&gt;
&lt;p&gt;Позже, когда проблемы с разными событийными моделями всем надоели, дядьки из W3C решили стандартизировать событийную модель. Назвали они ее нехитро - &lt;a href=&quot;http://www.w3.org/TR/DOM-Level-2-Events/events.html&quot;&gt;DOM Events&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Они попытались объединить обе модели. К сожалению, этой спецификации следуют только браузеры Firefox1.5 и Opera9, но в свете проснувшегося интереса IETeam к следованию стандартов, к 8-й версии IE также можно ожидать поддержки этой спецификации. И потому я попытаюсь рассказать о ней.&lt;/p&gt;
&lt;p&gt;Как я уже сказал, событийная модель w3c объединяет capturing и bubbling модели с небольшими изменениями. В стандарте w3c для установки обработчика события используется метод &lt;var&gt;addEventListener.&lt;/var&gt; Он описан в интерфейсе &lt;var&gt;EventTarget&lt;/var&gt;, который авторы браузеров обязаны реализовать для любого элемента.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;interface EventTarget {
    void addEventListener(in DOMString type, in EventListener listener, in boolean useCapture);
    void removeEventListener(in DOMString type, in EventListener listener, in boolean useCapture);
    boolean dispatchEvent(in Event evt) raises(EventException);
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Для нас сейчас существенно то, что третий параметр метода &lt;var&gt;addEventListener&lt;/var&gt; (&lt;var&gt;useCapture&lt;/var&gt;) - флаг, говорящий браузеру, на какой стадии прохождения события должен быть запущен добавляемый обработчик.&lt;/p&gt;
&lt;p&gt;Реализующий w3c-модель браузер при появлении события сначала проходит по иерархии документа сверху вниз, как в &lt;var&gt;capturing-модели&lt;/var&gt;, затем, когда добирается до целевого элемента, инициировавшего событие, исполняет его обработчик события и совершает путь снизу вверх по иерархии документа, как в &lt;var&gt;bubbling-модели&lt;/var&gt;. В w3c-модели при обработке события выделяют capturing- и bubbling-&lt;strong&gt;фазы&lt;/strong&gt; прохождения события.&lt;/p&gt;
&lt;p&gt;Таким образом можно выстраивать очень гибкие системы, особенно если учесть тот факт, что на любой фазе можно остановить дальнейшее &amp;quot;продвижение&amp;quot; прохождения события.&lt;/p&gt;
&lt;p&gt;Таким образом, любой элемент документа в w3c-модели (в отличие от IE bubbling model и NN4 capturing model) имеет два стэка для хранения обработчиков событий - для хранения обработчиков для capturing-стадии и для хранения обработчиков, назначенных на исполнение в bubbling-стадии.&lt;/p&gt;
&lt;p&gt;Возьмём для примера следующий код:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;test&amp;lt;/title&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
window.onload = function(e) {
    var doc1Capturing = function(e) { alert(&amp;#39;document: first capturing handler&amp;#39;); };
    var doc2Capturing = function(e) { alert(&amp;#39;document: second capturing handler&amp;#39;); };
    var doc3Capturing = function(e) { alert(&amp;#39;document: third capturing handler&amp;#39;); };

    var doc1Bubbling = function(e) { alert(&amp;#39;document: first bubbling handler&amp;#39;); };
    var doc2Bubbling = function(e) { alert(&amp;#39;document: second bubbling handler&amp;#39;); };
    var doc3Bubbling = function(e) { alert(&amp;#39;document: third bubbling handler&amp;#39;); };

    var body1Capturing = function(e) { alert(&amp;#39;body: first capturing handler &amp;#39;); };
    var body2Capturing = function(e) { alert(&amp;#39;body: second capturing handler&amp;#39;); };
    var body3Capturing = function(e) { alert(&amp;#39;body: third capturing handler &amp;#39;); };

    var body1Bubbling = function(e) { alert(&amp;#39;body: first bubbling handler &amp;#39;); };
    var body2Bubbling = function(e) { alert(&amp;#39;body: second bubbling handler&amp;#39;); };
    var body3Bubbling = function(e) { alert(&amp;#39;body: third bubbling handler &amp;#39;); };

    var div1Capturing = function(e) { alert(&amp;#39;div: first capturing handler &amp;#39;); };
    var div2Capturing = function(e) { alert(&amp;#39;div: second capturing handler&amp;#39;); };
    var div3Capturing = function(e) { alert(&amp;#39;div: third capturing handler &amp;#39;); };

    var div1Bubbling = function(e) { alert(&amp;#39;div: first bubbling handler &amp;#39;); };
    var div2Bubbling = function(e) { alert(&amp;#39;div: second bubbling handler&amp;#39;); };
    var div3Bubbling = function(e) { alert(&amp;#39;div: third bubbling handler &amp;#39;); };

    document.addEventListener(&amp;#39;click&amp;#39;, doc1Capturing, true);
    document.addEventListener(&amp;#39;click&amp;#39;, doc2Capturing, true);
    document.addEventListener(&amp;#39;click&amp;#39;, doc3Capturing, true);

    document.addEventListener(&amp;#39;click&amp;#39;, doc1Bubbling, false);
    document.addEventListener(&amp;#39;click&amp;#39;, doc2Bubbling, false);
    document.addEventListener(&amp;#39;click&amp;#39;, doc3Bubbling, false);

    document.body.addEventListener(&amp;#39;click&amp;#39;, body1Capturing, true);
    document.body.addEventListener(&amp;#39;click&amp;#39;, body2Capturing, true);
    document.body.addEventListener(&amp;#39;click&amp;#39;, body3Capturing, true);

    document.body.addEventListener(&amp;#39;click&amp;#39;, body1Bubbling, false);
    document.body.addEventListener(&amp;#39;click&amp;#39;, body2Bubbling, false);
    document.body.addEventListener(&amp;#39;click&amp;#39;, body3Bubbling, false);

    document.all[&amp;#39;text&amp;#39;].addEventListener(&amp;#39;click&amp;#39;, div1Capturing, true);
    document.all[&amp;#39;text&amp;#39;].addEventListener(&amp;#39;click&amp;#39;, div2Capturing, true);
    document.all[&amp;#39;text&amp;#39;].addEventListener(&amp;#39;click&amp;#39;, div3Capturing, true);

    document.all[&amp;#39;text&amp;#39;].addEventListener(&amp;#39;click&amp;#39;, div1Bubbling, false);
    document.all[&amp;#39;text&amp;#39;].addEventListener(&amp;#39;click&amp;#39;, div2Bubbling, false);
    document.all[&amp;#39;text&amp;#39;].addEventListener(&amp;#39;click&amp;#39;, div3Bubbling, false);
};
&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;header&amp;lt;/h1&amp;gt;
&amp;lt;div id=&amp;quot;text&amp;quot;&amp;gt;text&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Если нажать в приведённом примере на &lt;var&gt;div&lt;/var&gt;, порядок выполения обработчиков должен быть следующим:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://photos1.blogger.com/blogger/2964/3399/320/w3c.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Я не забыл указать в capturing-фазе обработчики события, установленные на элемент &lt;var&gt;div&lt;/var&gt; на исполнение в capturing-фазе (&lt;var&gt;div1Capturing&lt;/var&gt;, &lt;var&gt;div2Capturing&lt;/var&gt;, &lt;var&gt;div3Capturing&lt;/var&gt;), они не должны быть запущены. Спецификация указывает, что обработчики событий, назначенные на capturing-фазу, должны выполняться только для родителей целевого элемента. В данном случае только Opera следует стандарту.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=235441&quot;&gt;Этот баг в FF&lt;/a&gt; открыт уже 2 с половиной года, когда же будет решение, неизвестно.&lt;/p&gt;
&lt;p&gt;При появлении события в соответствии с w3c-моделью браузер должен:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;подготовить маршрут для обхода дерева от корневого элемента до целевого (приготовление к capturing-фазе). &lt;small&gt;Этот пункт важен, так как в процессе прохождения фазы &lt;em&gt;порядок&lt;/em&gt; исполнения обработчиков нельзя будет изменить даже посредством удаления элементов, на которые они установлены, можно будет лишь остановить процесс прохождения фазы вообще.&lt;/small&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;запустить обхода дерева в capturing-фазе: для каждого последующего элемента в иерархии проверить наличие обработчиков события данного типа, в случае наличия таковых, запустить. Как только событие приходит к целевому элементу, исполнение capturing-фазы прекратить.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;подготовить маршрут для обхода дерева от целевого элемента до корневого (приготовления для bubbling-фазы). &lt;small&gt;Этот пункт важен, так как в процессе прохождения фазы &lt;em&gt;порядок&lt;/em&gt; исполнения обработчиков нельзя будет изменить даже посредством удаления элементов, на которые они установлены, можно будет лишь остановить процесс прохождения фазы вообще.&lt;/small&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;запустить обхода дерева в bubbling-фазе: для каждого последующего элемента в иерархии проверить наличие обработчиков события данного типа, в случае наличия таковых, запустить. После исполнения обработчиков события данного типа, назначенных на корневой элемент (&lt;var&gt;document&lt;/var&gt;) на исполнение в bubbling-фазе закончить процесс прохождения фазы.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Фактически получается, что изменить порядок выполнения обработчиков можно только для обработчиков, назначенных на исполнение в bubbling-фазе и только из обработчиков, выполняющихся в capturing-фазе.&lt;/p&gt;
&lt;h4 id=&quot;-&quot;&gt;Резюмируем:&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;dfn&gt;bubbling-модель&lt;/dfn&gt; подразумевает прохождение дерева (x)html-документа снизу вверх, от целевого элемента, возбудившего события, до корневого элемента &lt;var&gt;document&lt;/var&gt;. При прохождении каждого элемента проверяется, не зарегистрировано ли у него обработчиков события такого же типа, если да, запуск этих обработчиков.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;dfn&gt;capturing-модель&lt;/dfn&gt; подразумевает прохождение дерева (x)html-документа сверху вниз, от корневого элемента &lt;var&gt;document&lt;/var&gt; до целевого элемента, возбудившего событие. При прохождении каждого элемента проверяется, не зарегистрировано ли у него обработчиков события такого же типа, если да, запуск этих обработчиков.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;dfn&gt;W3C DOM2 Events-модель&lt;/dfn&gt; сочетает в себе обе модели. При возбуждении события браузер обходит документ сначала сверху вниз по иерархии (&lt;dfn&gt;capturing-фаза&lt;/dfn&gt;), при наличии выполняя обработчики события данного типа у каждого из предков целевого элемента; затем переходит к &lt;dfn&gt;bubbling-фазе&lt;/dfn&gt;, при которой сначала запускаются обработчики целевого элемента, назначенные на &lt;dfn&gt;bubbling-фазу&lt;/dfn&gt;, затем браузер идёт вверх по иерархии документа, запуская обработчики события данного типа (в случае наличия) у каждого следующего элемента в иерархии, достигая корневого элемента &lt;var&gt;document&lt;/var&gt;, выполняя его обработчики события, назначенные на &lt;dfn&gt;bubbling-фазу&lt;/dfn&gt;. Ещё раз акцентирую внимание: обработчики, назначенные на &lt;dfn&gt;capturing-фазу&lt;/dfn&gt;, не должны быть запущены на целевом элементе. Я думаю, баг в FF всё-таки исправят и этот браузер тоже начнет следовать стандарту.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;test&lt;/strong&gt;&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>правильный горизонтальный список</title>
            <link href="/posts/2006-08-hor.html"/>
            <updated>2006-08-01T00:00:00.000Z</updated>
            <id>/posts/2006-08-hor.html</id>
            <content type="html">&lt;p&gt;С установкой IE7 совсем забыл о том, что у меня блок с архивами необлагорожен.
Точнее, облагорожен на скорую руку. Итак, попробую осветить процесс %) В общем, дизайнерская моя мысль была такова: если блок размером мал, то список там должен быть тоже малым, горизонтальным, да с запятой после каждого элемента. Просто перечисление
месяцев.&lt;/p&gt;
&lt;p&gt;html-код, в общем-то, совершенно стандартен:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div id=&amp;quot;archive&amp;quot;&amp;gt;
    &amp;lt;h2&amp;gt;Archives:&amp;lt;/h2&amp;gt;
    &amp;lt;ul&amp;gt;
        &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;http://bitari.blogspot.com/2006_08_01_bitari_archive.html&amp;quot;&amp;gt;Июль 2006&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;http://bitari.blogspot.com/2006_07_01_bitari_archive.html&amp;quot;&amp;gt;Август 2006&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Сделать же хотелось перечисление, да после каждой ссылки запятая чтобы стояла. Так как html-код генерируется автоматически блоггером, его изменить я не могу. Остаётся css. Для того, чтобы добавлять содержимое, в css2.1 есть свойство &lt;var&gt;content&lt;/var&gt;, применяется он только в сочетании с псевдоклассами &lt;var&gt;:before&lt;/var&gt; и &lt;var&gt;:after&lt;/var&gt;, таким образом можно добавлять содержимое до и после какого-либо элемента. К сожалению, ни в IE6, ни даже в IE7 это свойство не поддерживается.&lt;/p&gt;
&lt;p&gt;Для семейства IE эту проблему решит сооветствующий javascript, помещённый в условные комментарии.&lt;/p&gt;
&lt;p&gt;Изначальный CSS:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/* отключаю маркеры, выставляю высоту и требую все содержимое, что выходит за пределы высоты, прокручивать скроллбаром */
#archive ul { height: 65px; width: 200px; list-style: none; overflow: auto }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;И начинаю думать, как же быть с этими запятыми. Для начала, надо их поставить. Есть два
варианта - ставить запятую &lt;em&gt;после&lt;/em&gt; каждого list-item&amp;#39;а или &lt;em&gt;до&lt;/em&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/* до */
#arhive li:before { content: &amp;quot;, &amp;quot; }
/* или после */
#archive li:after { content: &amp;quot;, &amp;quot; }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;В любом случае придётся избавиться от одной запятой - если ставить &lt;em&gt;до&lt;/em&gt;,
то окажется лишняя запятая перед первым элементом, если ставить &lt;em&gt;после&lt;/em&gt;, будет лишней запятая после самого последнего элемента. Избавляемся:&lt;/p&gt;
&lt;p&gt;вариант &amp;quot;до&amp;quot;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#archive li:before { content: &amp;quot;, &amp;quot; }
/* убираем запятую перед первым элементом */
#archive li:first-child:before { display: none }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;вариант &amp;quot;после&amp;quot;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#archive li:after { content: &amp;quot;, &amp;quot; }
/* убираем запятую после последнего элемента */
#archive li:last-child:after { display: none }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Но! Как бы это не казалось странным, но псевдокласс &lt;var&gt;:first-child&lt;/var&gt; &lt;a href=&quot;http://www.w3.org/TR/CSS21/selector.html#first-child&quot;&gt;описан&lt;/a&gt; в спецификации css2.1, а &lt;var&gt;:last-child&lt;/var&gt; &lt;a href=&quot;http://www.w3.org/TR/css3-selectors/#last-child-pseudo&quot;&gt;описан&lt;/a&gt; в CSS3 Selectors... В общем, &lt;var&gt;:last-child&lt;/var&gt; поддерживает только Firefox, его авторы посчитали логичным реализовывать &lt;var&gt;:first-child&lt;/var&gt; и &lt;var&gt;:last-child&lt;/var&gt; oдновременно, пусть они и прописаны в разных спецификациях. Авторы же Operа так не посчитали. Потому вариант с установкой запятой &lt;em&gt;после&lt;/em&gt; элемента отпадает -
за неимением &lt;var&gt;:last-child&lt;/var&gt; мы не сумеем убрать запятую после последнего элемента. &lt;/p&gt;
&lt;p&gt;Выбрали.&lt;/p&gt;
&lt;p&gt;Теперь возникает вопрос - а как же, собственно, укладывать наши list-item&amp;#39;ы в один ряд :) Для этого есть всего два варианта: сделать элементы списка поплавками или инлайн-элементами.&lt;/p&gt;
&lt;p&gt;&amp;quot;поплавочное&amp;quot; решение:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#archive ul { height: 65px; width: 200px; list-style: none; overflow: auto }
#archive li { float: left; }
#archive li:before { content: &amp;quot;, &amp;quot; }
/* убираем запятую перед первым элементом */
#archive li:first-child:before { display: none }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Этот вариант не подходит по той простой причине, что &amp;quot;всплывающие&amp;quot; элементы остаются
блоковыми, соответственно, если такой блок &lt;em&gt;не помещается&lt;/em&gt; в предоставленную родителем ширину, он &amp;quot;съезжает&amp;quot; вниз. А согласно спецификации (&amp;quot;&lt;em&gt;The formatting objects (e.g., boxes) generated by an element include generated content.&lt;/em&gt;&amp;quot;), наши сгенерированные запятые находятся &lt;var&gt;внутри&lt;/var&gt; бокса элемента, соответственно если элемент этот &amp;quot;съедет&amp;quot;, запятая уедет вместе с ним. Но это совершеннейшим образом некрасиво. В общем, при поддержке обоими браузерами &lt;var&gt;:last-child&lt;/var&gt;, можно было бы использовать и поплавочный вариант.&lt;/p&gt;
&lt;p&gt;Странно и непоследовательно то, что Opera9, не поддерживая css3-псевдокласс &lt;var&gt;:last-child&lt;/var&gt;, использует модель генерируемого содержимого из css3.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.w3.org/TR/REC-CSS2/generate.html#before-after-content&quot;&gt;Cпецификация CSS2.1 говорит нам&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;User agents must ignore the following properties with :before and :after pseudo-elements: &amp;#39;position&amp;#39;, &amp;#39;float&amp;#39;, list properties, and table properties.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.w3.org/TR/2003/WD-css3-content-20030514/#pseudo-elements&quot;&gt;Спецификация же CSS3 нам говорит&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;display property ... Applies To: all elements, ::before, ::after, ::alternate, and ::outside&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;и&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For compatability with previous levels of CSS, the &amp;#39;::before&amp;#39;, &amp;#39;::after&amp;#39;, &amp;#39;::first-line&amp;#39; and &amp;#39;::first-letter&amp;#39; pseudo-elements do not require two colons. This does not apply to any other pseudo-element. Authors are encouraged to use the new two-colon forms.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;В общем, Opera9 позволяет нам позиционировать генерированное содержимое как угодно.&lt;/p&gt;
&lt;p&gt;Но раз мы решили не пользоваться поплавочным вариантом, пойдём и другим путём - сделаем все
list-item&amp;#39;ы инлайн-элементами:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#archive ul { height: 65px; width: 200px; list-style: none; overflow: auto }
#archive li { display: inline }
#archive li:before { content: &amp;quot;, &amp;quot; }
/* убираем запятую перед первым элементом */
archive li:first-child:before { display: none }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Таким образом, получилась куча инлайн-элементов, фактически - длинная строка, содержимое которой браузер вполне может переносить. Значение &lt;var&gt;display&lt;/var&gt; у сгенерированного содержимого также inline...&lt;/p&gt;
&lt;p&gt;Но браузер переносит и по пробелам между месяцем и годом, но это уже совсем просто поправить - просто добавим &lt;var&gt;white-space: nowrap&lt;/var&gt; для ссылок:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#archive ul { height: 65px; width: 200px; list-style: none; overflow: auto }
#archive li { display: inline }
#archive li:before { content: &amp;quot;, &amp;quot; }
/* убираем запятую перед первым элементом */
#archive li:first-child:before { display: none }
#archive a { white-space: nowrap }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Всё уже работает, только вот запятые отстоят от элементов, к которым должны &amp;quot;прилипать&amp;quot;.
Объясняется этот отступ просто - перенос строки является пробельным символом :)&lt;/p&gt;
&lt;p&gt;Чтобы его устранить, добавим отрицательный левый отступ для сгенерированного содержимого.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#archive ul { height: 65px; width: 200px; list-style: none; overflow: auto }
#archive li { display: inline }
#archive li:before { content: &amp;quot;, &amp;quot;; margin-left: -.5ex }
/* убираем запятую перед первым элементом */
#archive li:first-child:before { display: none }
#archive a { white-space: nowrap } 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Во многих шрифтах запятая по ширине примерно где-то в половину ширины малой буквы &amp;quot;x&amp;quot;,
потому отступ я записал в &lt;var&gt;ex&lt;/var&gt;. &lt;/p&gt;
&lt;p&gt;Всё, красота полнейшая. Напоследок покажу, как это будет выглядеть в блоге:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#archive ul { height: 65px; width: 200px; list-style: none; overflow: auto }
#archive li { display: inline }
#archive li + li:before { content: &amp;quot;,\A0\A0&amp;quot;; margin-left: -.5ex; }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;quot;&lt;var&gt;+&lt;/var&gt;&amp;quot; - так называемый &lt;em&gt;direct adjacent combinator&lt;/em&gt;, он специфицирует
заданные элементы, &lt;em&gt;следующие сразу за&lt;/em&gt; указанным элементом. Считайте, что про
&lt;var&gt;:first-child&lt;/var&gt;/&lt;var&gt;:last-child&lt;/var&gt; прочитали в общеобразовательных целях ;)&lt;/p&gt;
&lt;p&gt;ну и js для IE. Его надо будет поместить в conditional comments, дабы чего не случилось.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!--[if lte IE 7]&amp;gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
    var addCommas = function(){
        var lis = document.all[&amp;#39;archive&amp;#39;].lastChild.childNodes;
        var comma = document.createTextNode(&amp;#39;, &amp;#39;);
        for(var i=0; i&amp;lt;lis.length-1; ++i)
            lis[i].insertBefore(comma.cloneNode(true), lis[i].lastChild);
    }
&amp;lt;/script&amp;gt;&amp;lt;![endif]--&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</content>
        </entry>
    
        <entry>
            <title>Кэширование и сжатие: теория</title>
            <link href="/posts/2006-08-http-caching.html"/>
            <updated>2006-08-01T00:00:00.000Z</updated>
            <id>/posts/2006-08-http-caching.html</id>
            <content type="html">&lt;p&gt;Я не претендую на полноту рассказа о кэшировании - для этого есть спецификация, но расскажу лишь то, что необходимо для реализации кэширования динамически создаваемых или изменяемых документов.&lt;/p&gt;
&lt;p&gt;Когда клиент скачивает по протоколу HTTP какую-либо полезную информацию, он сохраняет её в памяти и затем отображает пользователю. При разработке стандарта HTTP Тим Бернерс Ли предложил способ сократить количество передаваемых данных за счёт системы кэширования, целью которой было предотвращение повторной загрузки ресурса, который уже был загружен клиентом и не изменился.&lt;/p&gt;
&lt;h3 id=&quot;-&quot;&gt;Основа кэширования&lt;/h3&gt;
&lt;p&gt;Кэширование всегда инициируется сервером, и поддерживается клиентом. Самый простой способ кэширования выглядит так: 
Клиент запрашивает какой-то ресурс, сервер включает в заголовки ответа заголовок &lt;var&gt;Expires&lt;/var&gt; со значением какой-либо даты. Этот заголовок &amp;quot;говорит&amp;quot; клиенту о том, что данный ресурс будет актуальным до даты, указанной в нём. Если указать некоторую дату в будущем, клиент будет вправе до этой даты при запросе пользователя выдавать ресурс из своего кэша. Если указать &lt;var&gt;0&lt;/var&gt;, текущую дату или дату в прошлом, клиент будет при каждом запросе заново скачивать весь ресурс, так как будет полагать, что &amp;quot;срок годности&amp;quot; ресурса истёк и следует получить его свежую версию.&lt;/p&gt;
&lt;h4 id=&quot;-&quot;&gt;Механизм метода устаревания документа&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;клиент запрашивает какой-либо ресурс.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  GET http://somehost.ru/index.html HTTP/1.0
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Сервер, &amp;quot;знающий&amp;quot;, что данный ресурс не устареет до определённой даты, включает её в заголовок &lt;var&gt;Expires&lt;/var&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  HTTP/1.0 200 OK
  Date: Tue, 08 Aug 2006 08:15:21 GMT
  **Expires: Wed, 09 Aug 2006 08:15:21 GMT**
  Content-Length: 4
  Content-Type: text/html

  test
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;В данном примере ресурс &lt;var&gt;index.html&lt;/var&gt; устареет ровно через день.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Клиент высчитывает &amp;quot;срок годности&amp;quot; ресурса (просто вычитая Date из Expires) и сохраняет в кэше ресурс вместе со сроком годности.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;В течение этого &amp;quot;срока годности&amp;quot; клиент не будет запрашивать ресурс с сервера вовсе, а будет отдавать его пользователю из кэша.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;В стандарте HTTP/1.1 был добавлен заголовок &lt;var&gt;Cache-control&lt;/var&gt;, контролирующий механизм кэширования (о нём я расскажу ниже). Одним из его возможных атрибутов является атрибут &lt;var&gt;max-age&lt;/var&gt;, явно указывающий срок годности ресурса. В случае, если клиент поддерживает HTTP/1.1 и видит в заголовке &lt;var&gt;Cache-control&lt;/var&gt;, принятом от сервера, атрибут &lt;var&gt;max-age&lt;/var&gt; с каким-либо значением, клиент принимает срок годности, указанный в &lt;var&gt;max-age&lt;/var&gt;, даже если есть заголок &lt;var&gt;Expires&lt;/var&gt; с другим значением. Другими словами, &lt;var&gt;max-age&lt;/var&gt; имеет б&amp;oacute;льший приоритет, чем
&lt;var&gt;Expires&lt;/var&gt;, что позволяет, например, предоставлять разные возможности кэширования HTTP/1.0 и HTTP/1.1-клиентам.&lt;/p&gt;
&lt;p&gt;Механизм устаревания ресурса удобен в некоторых случаях. Например, очень удобно отдавать различные &lt;em&gt;служебные&lt;/em&gt; изображения на сайте с заведомо большим сроком устаревания, например, размером в год.&lt;/p&gt;
&lt;p&gt;Таким образом можно предотвратить большинство самых частых запросов - клиенты будут скачивать такие изображения очень редко. Недостаток один - если картинка изменилась, нужно как-то заставить клиента заново её скачать. Обычно изображение просто переименовывают, клиент, соответственно, думает, что это новое изображение и скачивает его. Также, если сайт устоялся и на нём не планируется в ближайшее время изменений, можно выдать таблицы стилей и скрипты с таким заголовком.&lt;/p&gt;
&lt;p&gt;Необходимо заметить, что большинство серверов для статических файлов автоматически реализуют кэширование, основанное на методе &amp;quot;GET-запроса с условием&amp;quot; (см. ниже), что даёт экономию в трафике, но всё равно заставляет клиента каждый раз выполнять множество запросов, что, в свою очередь, вынуждает сервер проверять все условия и отвечать клиенту либо &lt;var&gt;304 Not Modified&lt;/var&gt;, либо отдавать сам ресурс. Наиболее оптимально совмещать
эти два способа, потому я и предлагаю заняться кэшированием вручную.&lt;/p&gt;
&lt;h4 id=&quot;-&quot;&gt;Резюмируем метод кэширования, основанного на устаревании ресурса:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;В течение срока, установленного сервером в заголовке &lt;var&gt;Expires&lt;/var&gt; (или в значении атрибута &lt;var&gt;max-age&lt;/var&gt; заголовка &lt;var&gt;Cache-control&lt;/var&gt;), клиент отображает пользователю ресурс из кэша, вообще не запрашивая сервер.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Метод хорош для служебных данных - изображений, таблиц стилей, скриптов, - для действительно редко изменяемых данных.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Наиболее оптимально сочетать этот метод с методом &amp;quot;GET-запроса с условием&amp;quot;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Так как в большинстве браузеров по нажатию кнопки &amp;quot;Обновить&amp;quot; такие ресурсы запрашиваются заново, поэтому я и предлагаю сочетать этот метод с &amp;quot;GET-запросом с условием&amp;quot;.&lt;/p&gt;
&lt;h3 id=&quot;-get-conditional-get-&quot;&gt;&amp;quot;GET-запрос с условием&amp;quot; (conditional GET)&lt;/h3&gt;
&lt;p&gt;Не всегда авторам известна дата устаревания ресурса, потому был создан механизм &amp;quot;GET-запроса с условием&amp;quot;.&lt;/p&gt;
&lt;p&gt;Общий механизм прост - сервер каким-либо образом идентифицирует ресурс, и клиент в последующем запросе добавляет в заголовки присланный сервером идентификатор; сервер сверяет собственный и присланный идентификатор, если они равны, значит, ресурс не изменился, в таком случае сервер говорит клиенту, чтобы тот показывал ресурс из кэша. Если же идентификаторы различаются, сервер заново отдаёт ресурс с новым идентификатором. Образно говоря, клиент просит сервер отдать документ, если он изменился.&lt;/p&gt;
&lt;h4 id=&quot;-get-http-1-0&quot;&gt;&amp;quot;GET-запрос с условием&amp;quot; в HTTP/1.0&lt;/h4&gt;
&lt;p&gt;При запросе клиентом ресурса, определенного &lt;abbr title=&quot;Uniform Resource Identifier&quot;&gt;URI&lt;/abbr&gt;, сервер может добавить к стандартным заголовкам ответа заголовок &lt;var&gt;Last-Modified&lt;/var&gt; со значением даты последней модификации ресурса. В случае запроса статического файла в качестве времени модификации удобно использовать время его последней модификации в файловой системе.&lt;/p&gt;
&lt;p&gt;Клиент получает ответ, и если он умеет работать с кэшем, сохраняет скачанный документ вместе с полученной датой. При следующем запросе ресурса с тем же URI клиент смотрит в свой кэш, и если находит ресурс с сохранённой датой (полученной из заголовка &lt;var&gt;Last-Modified&lt;/var&gt;), добавляет к заголовкам запроса заголовок &lt;var&gt;If-Modified-Since&lt;/var&gt;,
куда подставляет сохранённую дату.&lt;/p&gt;
&lt;p&gt;Сервер, получая такой заголовок, сравнивает дату модификации ресурса у себя с датой, полученной в заголовке &lt;var&gt;If-Modified-Since&lt;/var&gt;. Если даты совпали (или дата, присланная клиентом, &amp;quot;больше&amp;quot;), сервер отдаёт клиенту заголовок &lt;var&gt;304 Not Modified&lt;/var&gt;, таким образом оповещая клиента о том, что ресурс не изменился и клиент может отобразить его из своего кэша. Если у клиента дата старее, чем дата модификации ресурса, сервер отдаёт клиенту ресурс заново вместе с новой датой модификации.&lt;/p&gt;
&lt;h4 id=&quot;-get-http-1-0-&quot;&gt;Механизм работы &amp;quot;GET-запроса с условием&amp;quot; HTTP/1.0:&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;клиент запрашивает какой-либо ресурс:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; GET http://somehost.ru/index.html HTTP/1.0
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Сервер, поддерживающий кэширование для данного ресурса, добавляет в ответ заголовок &lt;var&gt;Last-Modified&lt;/var&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; HTTP/1.0 200 OK
 Date: Fri, 30 Dec 2003 13:20:12 GMT
 **Last-Modified: Fri, 29 Dec 2003 13:20:12 GMT**
 Content-Length: 4
 Content-Type: text/html

 test
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Клиент сохраняет в кэше документ вместе с датой, полученной от сервера в заголовке &lt;var&gt;Last-Modified&lt;/var&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;В следующий раз клиент при запросе того же ресурса в заголовок запроса добавит сохранённую дату&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  GET http://somehost.ru/index.html HTTP/1.0
  If-Modified-Since: Fri, 29 Dec 2003 13:20:12 GMT
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Сервер сравнит полученную дату с датой последнего изменения ресурса. Если на сервере находится более &amp;quot;свежая&amp;quot; версия ресурса, он отдаст её вместе с новой датой модификации.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  HTTP/1.0 200 OK
  Date: Sat, 31 Dec 2003 11:20:22 GMT
  **Last-Modified: Sat, 31 Dec 2003 10:00:00 GMT**
  Content-Length: 7
  Content-Type: text/html

  newtest
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Если же на сервере документ актуален (т.е. даты равны), то сервер отдаст заголовок &lt;var&gt;HTTP/1.0 304 Not Modified&lt;/var&gt;, но уже не отдаст тело ответа&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;HTTP/1.0 304 Not Modified
Date: Sat, 31 Dec 2003 11:20:22 GMT
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Клиент же, получив такой ответ, покажет пользователю документ из своего кэша.&lt;/p&gt;
&lt;p&gt;Дата, указанная в Last-Modified, должна быть именно в таком виде и в формате GMT. Строго говоря, и HTTP/1.0 и HTTP/1.1 обязывают серверы &lt;em&gt;понимать&lt;/em&gt; три формата времени:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Sun, 06 Nov 1994 08:49:37 GMT
Sunday, 06-Nov-94 08:49:37 GMT
Sun Nov  6 08:49:37 1994
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Но HTTP/1.0 добавляет, что сами серверы не имеют права использовать последний формат, а HTTP/1.1 требует от серверов использовать только первый формат времени.&lt;/p&gt;
&lt;p&gt;Таким образом реализуется замечательная возможность - передавать только те документы, которые действительно изменились. Но этот метод далёк от совершенства - бывает сложно однозначно идентифицировать изменённость документа
только по дате модификации файла, а в случае динамически генерируемого содержимого и вовсе не всегда возможно. Потому в спецификации HTTP/1.1 механизм &amp;quot;GET-запроса с условием&amp;quot; был расширен и дополнен.&lt;/p&gt;
&lt;h4 id=&quot;-&quot;&gt;Резюмируем:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;метод применим для любых типов ресурсов, если для них возможно определить время модификации&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;метод поддерживается всеми клиентами и всеми прокси-серверами (уж HTTP/1.0 сейчас реализуют все)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;в сочетании с методом кэширования, основанном на устаревании ресурса (&lt;var&gt;Expires&lt;/var&gt;) идеален для кэширования служебных изображений, таблиц стилей, скриптов. Клиент не будет запрашивать сервер до даты, определённой в &lt;var&gt;Expires&lt;/var&gt;, а затем, когда запросит, если ресурс не изменился, получит &lt;var&gt;304 Not Modified&lt;/var&gt; с новым значением &lt;var&gt;Expires&lt;/var&gt; и снова перестанет запрашивать сервер до даты из нового &lt;var&gt;Expires&lt;/var&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;-get-http-1-1&quot;&gt;&amp;quot;GET-запрос с условием&amp;quot; в HTTP/1.1&lt;/h4&gt;
&lt;p&gt;В HTTP/1.1 в механизм &amp;quot;GET-запроса с условием&amp;quot; было добавлено ещё одно &amp;quot;условие&amp;quot; т.н. &lt;var&gt;ETag&lt;/var&gt; - сущность, однозначно определяющая содержимое ресурса.&lt;/p&gt;
&lt;p&gt;Это может быть хэш всего ресурса, его контрольная сумма или другая функция, однозначно идентифицирующая содержимое. В ситуации, когда документ генерируется шаблонной системой и CMS, бывает сложно определить время модификации ресурса, особенно если он &amp;quot;собирается&amp;quot; из нескольких частей. Вот в таких случаях удобнее определить &lt;var&gt;ETag&lt;/var&gt; и сравнить его с присланным клиентом. Механизм сравнения похож на реализованный в HTTP/1.0 механизм сравнения даты модификации.&lt;/p&gt;
&lt;p&gt;Только если в HTTP/1.0 использовалась пара заголовков &lt;var&gt;Last-Modified&lt;/var&gt;(сервер)/&lt;var&gt;If-Modified-Since&lt;/var&gt;(клиент), то в в HTTP/1.1 используется пара &lt;var&gt;ETag&lt;/var&gt;(сервер)/&lt;var&gt;If-None-Match&lt;/var&gt;(клиент), использующаяся таким же образом - сервер идентифицирует ресурс и шлёт клиенту в заголовке &lt;var&gt;ETag&lt;/var&gt; этот идентификатор. Клиент в следующий раз в запрос того же ресурса добавляет заголовок &lt;var&gt;If-None-Match&lt;/var&gt; с сохраненным значением присланного сервером заголовка ETag. Сервер сверяет идентификаторы и либо возвращает &lt;var&gt;304 Not Modified&lt;/var&gt; в случае, если ресурс не изменился, или же возвращает заново весь ресурс с новым значением &lt;var&gt;ETag&lt;/var&gt;.&lt;/p&gt;
&lt;h4 id=&quot;-get-http-1-1-&quot;&gt;Механизм работы &amp;quot;GET-запроса с условием&amp;quot; HTTP/1.1:&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;клиент запрашивает какой-либо ресурс.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; GET /index.html HTTP/1.1
 Host: somehost.ru
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Сервер, поддерживающий кэширование для данного ресурса, добавляет в ответ заголовок &lt;var&gt;ETag&lt;/var&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; HTTP/1.1 200 OK
 Date: Fri, 30 Dec 2003 13:20:12 GMT
 **ETag: &amp;quot;328e-1d-1b63fda6&amp;quot;**
 Content-Length: 4
 Content-Type: text/html

 test
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Клиент сохраняет в кэше документ вместе со значением заголовка &lt;var&gt;ETag&lt;/var&gt;, полученным с сервера.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;В следующий раз клиент при запросе того же ресурса в заголовок запроса добавит сохранённое значение &lt;var&gt;ETag&lt;/var&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; GET /index.html HTTP/1.1
 Host: somehost.ru
 If-None-Match: &amp;quot;328e-1d-1b63fda6&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Сервер сравнит полученное значение идентификатора ETag с собственным. Если идентификаторы различаются, сервер отдаст документ вместе с новым значением идентификатора &lt;var&gt;ETag&lt;/var&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; HTTP/1.1 200 OK
 Date: Sat, 31 Dec 2003 11:20:22 GMT
 **ETag: &amp;quot;435b-4t-jla890l9&amp;quot;**
 Content-Length: 7
 Content-Type: text/html

 newtest
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; Если же значение идентификатора &lt;var&gt;ETag&lt;/var&gt;, присланное клиентом совпадает со значением серверным, то сервер отдаст заголовок &lt;var&gt;HTTP/1.1 304 Not Modified&lt;/var&gt;, но уже не отдаст тело ответа.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; HTTP/1.1 304 Not Modified
 Date: Sat, 31 Dec 2003 11:20:22 GMT
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; Клиент же, получив такой ответ, покажет пользователю документ из своего кэша.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;-&quot;&gt;Резюмируем:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;метод применим для любых типов ресурсов&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;метод может не поддерживаться некоторыми прокси-серверами&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;этот метод необходимо сочетать с методом, основанным на устаревании ресурса, и, если возможно, с методом, основанным на дате последней модификации файла.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;-&quot;&gt;Сжатие&lt;/h3&gt;
&lt;p&gt;Сжатие ответа было представлено в HTTP/1.0. Оно выполняется просто. Если клиент поддерживает какой-то механизм кодирования, он к каждому запросу может приложить заголовок &lt;var&gt;Accept-Encoding&lt;/var&gt; с перечислением поддерживающихся механизмов кодирования. Сервер
может закодировать ресурс одним из методов, поддерживающихся клиентом. &lt;/p&gt;
&lt;p&gt;В HTTP/1.0 были введены два типа кодирования - &lt;var&gt;x-gzip&lt;/var&gt; и &lt;var&gt;x-compress&lt;/var&gt; (но было сказано, что &lt;var&gt;gzip&lt;/var&gt; и &lt;var&gt;compress&lt;/var&gt; им эквивалентны для совместимости с будущими реализациями протокола). В HTTP/1.1 уже просто используются &lt;var&gt;gzip&lt;/var&gt; и &lt;var&gt;compress&lt;/var&gt; (и говорится, что программы должны понимать &lt;var&gt;x-gzip&lt;/var&gt; и &lt;var&gt;x-compress&lt;/var&gt; для совместимости с предыдущими реализациями протокола:)). Также в HTTP/1.1 был введён метод &lt;var&gt;deflate&lt;/var&gt;, но из-за кучи проблем с реализацией в разных браузерах этот метод используется гораздо реже. Чаще всего используется &lt;var&gt;gzip&lt;/var&gt;. Его поддерживают все браузеры, начиная c IE4, Opera5.12, NN4.06 и ранних версий Firefox. Сжимать можно любой тип данных, но большинство браузеров понимает только text/plain, text/html, text/css, text/javascript. Необходимо заметить, что при сжатии в заголовке &lt;var&gt;Content-Length&lt;/var&gt; указывается длина сжатого тела сообщения.&lt;/p&gt;
&lt;h3 id=&quot;-&quot;&gt;Последовательность работы механизма сжатия:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Клиент запрашивает какой-то ресурс, сообщая серверу о поддерживаемых типах кодирования:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  GET /index.html HTTP/1.1
  Host: somehost.ru
  Accept-Encoding: gzip,deflate&amp;lt;/pre&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Сервер выбирает тип кодирования, кодирует ресурс и шлёт пользователю&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  HTTP/1.1 200 OK
  Date: Thu, 10 Aug 2006 17:08:26 GMT
  Content-Encoding: gzip
  Content-Length: 59

  всякая_пожатая_непроизносимая_ерунда
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Клиент, зная тип кодирования, декодирует ресурс.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Необходимо осветить также заголовок вариантности кэширования.&lt;/p&gt;
&lt;h4 id=&quot;-var-vary-var-&quot;&gt;Заголовок вариантности &lt;var&gt;Vary&lt;/var&gt;&lt;/h4&gt;
&lt;p&gt;&lt;var&gt;Vary: Accept-Encoding&lt;/var&gt; нужен для того, чтобы дать понять кэширующему механизму, что ответ сервера зависит oт принимаемого клиентом метода кодирования. Предположим ситуацию: есть два клиента, один поддерживает gzip, другой нет.&lt;/p&gt;
&lt;p&gt;Поддерживающий gzip клиент шлёт в запросе &lt;var&gt;Accept-Encoding: gzip&lt;/var&gt;, не поддерживающий не шлёт, соответственно :)&lt;/p&gt;
&lt;p&gt;Всё замечательно работает - сервер шлёт одному клиенту пожатый контент, другому несжатый. Но если на пути к серверу попадётся прокси-сервер, поддерживающий кэширование, возникает проблема. Если первый клиент, поддерживающий gzip, получает от сервера пожатый контент, прокси эти данные кэширует. При обращении к тому же ресурсу второго клиента(не поддерживающего сжатие), прокси-сервер отдаёт этому клиенту пожатый контент! Клиент ничего не понимает :)&lt;/p&gt;
&lt;p&gt;Эта проблема решается с помощью посылаемого сервером заголовка &lt;var&gt;Vary&lt;/var&gt;. Его значением может быть любое HTTP-поле. Фактически этот заголовок говорит, что ответ на запрос будет разным &lt;em&gt;в зависимости от некоторых заголовков&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;В результате в кэше будут храниться все варианты ответов. Если скрипт отдаёт разные данные в зависимости от &lt;var&gt;Cookie&lt;/var&gt;, нужно отдавать &lt;var&gt;Vary: Cookie&lt;/var&gt;, таким образом кэш отдаст закэшированный вариант ответа только для конкретной куки.&lt;/p&gt;
&lt;p&gt;Например, если два клиента обращались к ресурсу с &lt;var&gt;Cookie: name=Vasya&lt;/var&gt; и &lt;var&gt;Cookie: name=Petya&lt;/var&gt;, будут закэшированы отдельно ответы для обоих клиентов, соответственно Васе будет отдан его ответ, Пете - его. &lt;/p&gt;
&lt;p&gt;Ещё раз акцентирую внимание на том, что &lt;em&gt;все&lt;/em&gt; условия, относительно которых может быть получен &lt;em&gt;разный&lt;/em&gt; ответ сервера, нужно прописывать в &lt;var&gt;Vary&lt;/var&gt;, чтобы не допустить попадания кэша одного пользователя другому.&lt;/p&gt;
&lt;p&gt;Нужно сказать, что существуют серьёзные проблемы при использовании сжатия. Во-первых, это нагрузка на процессор сервера.&lt;/p&gt;
&lt;p&gt;Ни в коем случае не нужно на лету сжимать часто скачиваемые ресурсы. В таком случае правильнее будет сжимать их сразу при изменении, и потом отдавать &lt;em&gt;уже&lt;/em&gt; сжатые данные. Сжатие оптимально использовать совместно со стратегиями кэширования (см. ниже). Также существует несколько проблем в реализации сжатия некоторыми браузерами.&lt;/p&gt;
&lt;h4 id=&quot;-&quot;&gt;Проблемы со сжатием в различных браузерах:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;IE5.5 и IE6 забывает об &lt;var&gt;ETag&lt;/var&gt; при использовании заголовка вариантности кэширования &lt;var&gt;Vary&lt;/var&gt; и просто при использовании кодирования &lt;var&gt;gzip&lt;/var&gt;. В IE7 этой проблемы нет.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;IE4.0 и IE5.0 вообще не умеют кэшировать сжатое содержимое.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Opera не умеет кэшировать сжатый &lt;var&gt;text/css&lt;/var&gt;, &lt;var&gt;text/javascript&lt;/var&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;IE5.5 и IE6 без сервис-пака из-за &lt;a href=&quot;http://support.microsoft.com/default.aspx?scid=kb;en-us;Q312496&quot;&gt;бага&lt;/a&gt; &lt;a href=&quot;http://support.microsoft.com/default.aspx?scid=kb;en-us;Q313712&quot;&gt;могут&lt;/a&gt; терять первые 2 килобайта сжатых данных (редкий случай, я не встречал).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Лучше всего себя в работе с кэшированием и сжатием показали Firefox и IE7b3.&lt;/p&gt;
&lt;h3 id=&quot;-&quot;&gt;Стратегии кэширования&lt;/h3&gt;
&lt;h4 id=&quot;-&quot;&gt;Кэширование служебных изображений&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Служебные изображения не нужно сжимать, это лишняя и бесполезная нагрузка на процессор, т.к. чаще всего такие изображения уже максимально сжаты в графическом редакторе.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Кэширование изображений нужно реализовывать на основе &lt;var&gt;Expires&lt;/var&gt;, &lt;var&gt;ETag&lt;/var&gt;, &lt;var&gt;Last-Modified&lt;/var&gt;. &lt;var&gt;Expires&lt;/var&gt; предлагает клиенту брать ответ на запрос из кэша в течение всего срока, &lt;var&gt;Last-Modified&lt;/var&gt; и &lt;var&gt;ETag&lt;/var&gt; обеспечивают &amp;quot;GET-запрос с условием&amp;quot;, &lt;var&gt;Last-Modified&lt;/var&gt; обеспечивает поддержку HTTP/1.0-клиентов, &lt;var&gt;ETag&lt;/var&gt; - HTTP/1.1. &lt;/p&gt;
&lt;p&gt;  Таким образом, если клиент и приходит за изображением, то происходит &amp;quot;GET-запрос с условием&amp;quot; и клиент получает изображение только если оно изменилось.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Принудительно заставить всех клиентов получить изображение заново, несмотря на срок &amp;quot;годности&amp;quot; &lt;var&gt;Expires&lt;/var&gt; можно только изменив путь к изображению или переименовав его.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;-&quot;&gt;Кэширование таблиц стилей и скриптов&lt;/h4&gt;
&lt;p&gt;Если сайт &amp;quot;устоялся&amp;quot; и не планируются частые изменения, то стратегия кэширования идентична кэшированию изображений, за исключением того, что к таблицам стилей и скриптам можно также применить сжатие. Правда, нужно решить, что для Вас важнее - неудобство пользователей Opera, теряющих из-за сжатия возможность кэширования или же удобство пользователей остальных браузеров, умеющих кэшировать сжатые таблицы стилей и скрипты. В принципе, можно совместить требования.&lt;/p&gt;
&lt;p&gt;Получается следующее:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Добавляем в заголовок вариантности &lt;var&gt;Vary&lt;/var&gt; вариант &lt;var&gt;User-Agent&lt;/var&gt; для того, чтобы показать кэшу, что разным браузерам будет отдано разное содержимое.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Opera до 9-й версии включительно и ie4/5.0 нужно отдавать несжатое содержимое. Только так эти браузеры смогут кэшировать содержимое.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Для IE6 необходимо проверять только &lt;var&gt;If-Modified-Since&lt;/var&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Иногда (x)html-код генерируется автоматически, потому использование времени последней модификации невозможно. Остаётся &lt;var&gt;ETag&lt;/var&gt;. Cледовательно, учитывая неумение IE6 кэшировать сжатый контент на основе &lt;var&gt;ETag&lt;/var&gt;, от сжатия, скорее всего,
придётся отказаться; или же слать сжатое содержимое только тем браузерам, которые не забывают про &lt;var&gt;Etag&lt;/var&gt;. Если же (x)html-код находится в статических файлах, можно и для IE6 использовать сжатие совместно с кэшированием на основе &lt;var&gt;Last-Modified&lt;/var&gt;.&lt;/p&gt;
&lt;p&gt;Также, как и в случае с кэшированием таблиц стилей и скриптов, статические файлы можно заранее сжать, чтобы потом не тратить ресурсы на сжатие на лету.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>IE7, standalone, впечатления.</title>
            <link href="/posts/2006-08-ie7-first-impressions.html"/>
            <updated>2006-08-01T00:00:00.000Z</updated>
            <id>/posts/2006-08-ie7-first-impressions.html</id>
            <content type="html">&lt;p&gt;Выкачал. Сначала поставил целиком и по-нормальному, посмотреть на него :) Отличный браузер. С юзабилити поработали, сразу видно. Не понравилось только то, что поисковый движок дополнительный можно добавить только с сайта microsoft :) Ну да это всё мелочи. Читает
фиды. Всяких секьюрных функций - не пересчесть. Но самое приятное в том, что он удобен, Maxthon становится просто не нужен. Но при установке он прописывает себя везде, где можно, и IE6 из компьютера пропадает... Мне это не подходит.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://tredosoft.com/IE7_standalone&quot;&gt;Выкачал&lt;/a&gt; &lt;i&gt;запускалку&lt;/i&gt;, очень удобная штука. Деинсталлировал IE7, сделал как в инструкции - распаковал содержимое установщика, положил в папку с распакованным файл ie7s.exe, запустил. Конечно, функционал не полный (фиды не работают и еще всякие вкусности), но для тестов вполне хватает. На conditional comments откликается верно, с IE6 сосуществует в таком виде ровно. Итого у меня на компьютере 5 разных версий IE %) Можно выпендриться и поставить еще и IE3.0, да только смысла нет - пользователи его либо в фидо, либо умерли.&lt;/p&gt;
&lt;p&gt;Первым делом посмотрел, как выглядит блог в IE7... Выглядит, надо сказать, неплохо, только съехал чуть-чуть вверх блок с большой картинкой и текст понизу. Самое обидное, что в IE7 у меня не вылазят алёрты. Это существенно принижает ценность IE7 как standalone-версии. Я уже думаю о vmware с winXP+ie7. Пока только думаю. Так вот, про съехавший блок. Посмотрел в свой css, ничего не увидел такого, оказалось, что собака порылась в подгружаемой блоггером автоматически своей таблице стилей:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@import url(http://www.blogger.com/css/navbar/main.css);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Я видел, что &amp;quot;оперная&amp;quot; и FF&amp;#39;ная консоли ругаются на кучу underscore-хаков, но было как-то пофик. А щас вот посмотрел, таки да, начинаются у людей проблемы с IE7.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#space-for-ie {
    display:none;
    _border:0 !important;
    _display:block;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Ну вот IE7, как и FF/Opera, прочитал первое правило (underscore-bug у него решён), а на остальные внимания не обратил... В результате поехало %) Но что происходит? Не зря там стоял этот space-for-ie - он лечил известный IE-шный баг, который и в IE7 остался, к
сожалению...&lt;/p&gt;
&lt;p&gt;Если кому интересно, баг в том, что если один элемент спозиционирован абсолютно, то следующий за ним элемент потеряет верхний отступ, это даже &lt;a href=&quot;http://www.brunildo.it/test/IEWapie2.html&quot;&gt;описано&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;К сожалению, этот пакостный блок &lt;i&gt;совсем&lt;/i&gt; убрать никак нельзя - и html и css-код его блоггером подставляется автоматически... Потому я просто поправлю css :)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/* скрою совсем этот несчастный блок */
#space-for-ie { display: none; }
/* заменим пропадающий в IE6/7 margin-top у ребёнка на такой же padding-bottom, но у родителя:*/
body { padding-top: 50px !important;}
body #header{ margin-top: 0;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Так правильнее, как мне кажется. И не нужны фильтры и хаки... Ещё бы blogger.com сам взял да поправил свои стили, а то уж больно много мусора в консолях FF/Opera после посещения какого-нибудь блога на блоггере. В общем, не знаю, приживётся ли IE7b3 на моей машине, надеюсь всё-таки, что скоро дождемся релиза, и что наконец-то поправят кучищу глюков.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>разные стили при js on/off</title>
            <link href="/posts/2006-08-jsonoff.html"/>
            <updated>2006-08-01T00:00:00.000Z</updated>
            <id>/posts/2006-08-jsonoff.html</id>
            <content type="html">&lt;p&gt;Часто на сайтах некий функционал реализован целиком на js. Всё бы хорошо, но некоторые несознательные граждане отключают выполнение javascript в браузере, тем самым выключая весь этот замечательный функционал :). И остаются потом пустые контролы, нефункционирующие кнопки и прочая прочая. Поэтому всё сознательное человечество пользователям с выключенным js не показывает элементы, которые без js бессмысленны. Раньше это делалось двумя вариантами
(с небольшими вариациями):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;генерируя зависящее от js содержимое в самом js, соответственно человек без js и не получит этого содержимого&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;скрывая в css содержимое, которое зависит от js, а потом по window.onload делать это содержимое видимым.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;На самом деле, второй вариант в самом оптимальном виде выглядел так: в css прописывалось по умолчанию &amp;quot;сокрытие&amp;quot; содержимого &lt;var&gt;display:none&lt;/var&gt; или ещё как и писался селектор навроде #js_enabled, в правилах которого это самое содержимое делалось &lt;var&gt;display: block&lt;/var&gt;, и по &lt;var&gt;window.onload&lt;/var&gt; к body применялся этот самый id &lt;var&gt;js_enabled&lt;/var&gt;. &lt;/p&gt;
&lt;p&gt;Выходило дёшево и сердито - по умолчанию всё скрыто, после загрузки документа js (буде таковой включен), делал всё видимым.&lt;/p&gt;
&lt;p&gt;Оба метода далеки от идеальности по многим причинам. И одна из главных проблем - необходимость дожидаться полной загрузки документа - там может быть множество замещаемых элементов (например, &lt;var&gt;img&lt;/var&gt;), полной загрузки которых будет ждать &lt;var&gt;window.onload&lt;/var&gt;.&lt;/p&gt;
&lt;p&gt;Да, проблему ожидания загрузки замещаемых элементов событием &lt;var&gt;window.onload&lt;/var&gt;
можно решить, но остаётся ещё много проблем, например, занятость id/className-атрибутов у body, но это не решает самой главной проблемы существующих методов - увеличения связности компонентов документа. Порой сидишь и рисуешь связи между css/js/особенностями браузеров/серверным кодом, чтобы понять, откуда то или иное вылазит.&lt;/p&gt;
&lt;p&gt;Я же предлагаю совершенно новый метод (во всяком случае, я долго искал и не нашёл ни одного похожего применения).&lt;/p&gt;
&lt;p&gt;Как я уже говорил, несмотря на то, что псевдопротокол &lt;var&gt;javascript:&lt;/var&gt; не описан в стандартах, он функционирует во всех браузерах. Возвращённое после выполнения js-кода значение и будет являться содержимым &amp;quot;документа&amp;quot;. Для иллюстрации предлагаю описать в html ссылку вида&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;javascript:&amp;#39;new content&amp;#39;&amp;quot;&amp;gt;link&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;и нажать на неё. Как я уже упоминал в статье про события, браузер выполнит &amp;quot;переход&amp;quot; на &amp;quot;страницу&amp;quot;, содержимое которой будет определено возвращённым значением.&lt;/p&gt;
&lt;p&gt;На этом и основан мой метод. Предположим, что у нас есть блок &lt;var&gt;#js_control&lt;/var&gt;, который целиком и полностью зависит от js, и без js не нужный.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html PUBLIC &amp;quot;-//W3C//DTD XHTML 1.0 Strict//EN&amp;quot; &amp;quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&amp;quot;&amp;gt;
&amp;lt;html xmlns=&amp;quot;http://www.w3.org/1999/xhtml&amp;quot; xml:lang=&amp;quot;en&amp;quot; lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;test.&amp;lt;/title&amp;gt;
&amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt;
    /*в этой таблице стилей описывается вид страницы без js */
    #js_control { display: none; }
&amp;lt;/style&amp;gt;
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; href=&amp;quot;javascript:&amp;#39;
    /*вид страницы с js*/
    #js_control { display: block; }
&amp;#39;&amp;quot;/&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div id=&amp;quot;js_control&amp;quot;&amp;gt;
    &amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;apply rule&amp;quot; /&amp;gt;
    &amp;lt;input type=&amp;quot;submit&amp;quot; onclick=&amp;quot;someFunction()&amp;quot; /&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;p&amp;gt;text&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;В общем, получается, что в обычной таблице стилей мы описываем &amp;quot;умолчальное&amp;quot; состояние страницы, во второй, &lt;em&gt;необычной&lt;/em&gt; таблице стилей описываем css, который будет применён при включенном js. Необычна она тем, что css-код, который я в ней написал, является строкой. Когда браузер запросит таблицу стилей по её href&amp;#39;у, он выполнит javascript-код, который, в свою очередь вернёт строку, в которой я описал css-код. Браузер применит этот css-код к документу.&lt;/p&gt;
&lt;p&gt;Таким образом, очень удобно происходит &amp;quot;разделение&amp;quot; - если js выключен, вторая таблица стилей не применится.&lt;/p&gt;
&lt;p&gt;Браузеры, в которых я это проверял: IE4/5/5.5/6/7b3, Opera5/8/9, FF1/1.5.&lt;/p&gt;
&lt;p&gt;Кстати, только что проверил, opera8/8.5/9, FF1.5, IE4/5/5.5/6 - можно подключать и внешние таблицы стилей:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; href=&amp;quot;javascript:&amp;#39;@import url(http://host.com/js-enabled.css);&amp;#39;&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;К сожалению, IE4 и FF не понимают иной нотации, кроме &lt;var&gt;@import url(someurl)&lt;/var&gt;, причём если написать в кавычках, FF начинает кидаться эксепшнами странными, даже если всё нормально сэкранировать. Если же писать относительный урл, то опять же FF не подгружает почему-то, но как мне кажется, это всё настолько недокументировано, что можно простить странное поведение :)&lt;/p&gt;
&lt;p&gt;В общем, получается такая ситуация: если правил немного и в них мало что нужно экранировать (да-да, весь css-код в этом случае суть строка), например, если мало правил с &lt;var&gt;content&lt;/var&gt;, то удобнее прописать правила прямо в такой таблице стилей. Если же правил много или не хочется ничего экранировать, то проще написать последним методом, правда, придётся писать абсолютный адрес внешней таблицы стилей.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Javascript on XHTML pages</title>
            <link href="/posts/2006-09-jsonxhtml.html"/>
            <updated>2006-09-01T00:00:00.000Z</updated>
            <id>/posts/2006-09-jsonxhtml.html</id>
            <content type="html">&lt;p&gt;There are lots of rumours about Javascript in XHTML served as different MIME types. I&amp;#39;ll try to explain what&amp;#39;s really going on. Shortly, &lt;var&gt;innerHTML&lt;/var&gt; works everywhere (even for XHTML served as &lt;var&gt;text/xml&lt;/var&gt;); &lt;var&gt;document.*&lt;/var&gt; collections work identically for &lt;var&gt;application/xhtml+xml&lt;/var&gt; and &lt;var&gt;text/html&lt;/var&gt;.&lt;/p&gt;
&lt;h3 id=&quot;xhtml-served-as-var-text-html-var-&quot;&gt;XHTML served as &lt;var&gt;text/html&lt;/var&gt;&lt;/h3&gt;
&lt;p&gt;There are two main differences in DOM between &lt;strong&gt;valid&lt;/strong&gt; HTML and XHTML served as &lt;var&gt;text/html&lt;/var&gt; - in XHTML all elements are in lowercase and UAs don&amp;#39;t create implicit elements such as &lt;var&gt;tbody&lt;/var&gt; in XHTML. That&amp;#39;s all! You don&amp;#39;t need to put inline styles and scripts in &lt;var&gt;CDATA&lt;/var&gt; sections. UAs handle these XHTML pages practically the same as they handle HTML ones, xml well-formedness is not checked. And of course, all &lt;var&gt;document.*&lt;/var&gt; collections work, innerHTML works either. And yes, &lt;var&gt;document.all&lt;/var&gt; works even in Firefox (since version 1.5).&lt;/p&gt;
&lt;p&gt;Yes, there&amp;#39;s also a problem of marking inline scripts and style as CDATA sections, but with well-coded unobtrusive javascript there&amp;#39;s no need for inline scripts, and there&amp;#39;s definately no need for inline styles except rare cases (even LJ allows using external CSS
files).&lt;/p&gt;
&lt;h3 id=&quot;xhtml-served-as-var-application-xhtml-xml-var-&quot;&gt;XHTML served as &lt;var&gt;application/xhtml+xml&lt;/var&gt;&lt;/h3&gt;
&lt;p&gt;That is the preferred MIME-type for XHTML pages. Commonly it is used with content-negotiation mechanism to serve pages as &lt;var&gt;application/xhtml+xml&lt;/var&gt; for browsers that support it and to serve pages as &lt;var&gt;text/html&lt;/var&gt; for &lt;a href=&quot;http://microsoft.com/windows/ie&quot;&gt;browser&lt;/a&gt; that doesn&amp;#39;t support &lt;var&gt;application/xhtml+xml&lt;/var&gt;. Some people say that most of neat DOM methods and properties do not work in XHTML document served as &lt;var&gt;application/xhtml+xml&lt;/var&gt;. They say:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;document.write doesn&amp;#39;t work&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;innerHTML doesn&amp;#39;t work&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;document.applets, document.forms, document.anchors, document.images, document.links, other document.* collections don&amp;#39;t work&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;document.all doesn&amp;#39;t work&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;document.body and all other properties of &lt;var&gt;document&lt;/var&gt; don&amp;#39;t work&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;they-are-completely-wrong-&quot;&gt;They are completely wrong.&lt;/h3&gt;
&lt;p&gt;XHTML document served as &lt;var&gt;application/xhtml+xml&lt;/var&gt; has &lt;strong&gt;the same DOM&lt;/strong&gt; as XHMTL served as &lt;var&gt;text/html&lt;/var&gt;.&lt;/p&gt;
&lt;p&gt;At first Mozilla has been creating XMLDocument object for pages served as &lt;var&gt;application/xhtml+xml&lt;/var&gt;, but then there was opened a &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=111514&quot;&gt;Bug&lt;/a&gt; in December 2001, and the first fix was proposed in March 2003 and in two monthes final fix was accepted. Since that time Mozilla started creating HTMLDocument object for XHTML pages served as &lt;var&gt;application/xhtml+xml&lt;/var&gt; and therefore they had to support all that HTML stuff: 
    document.write, document.applets, HTMLElement.innerHTML, document.forms, document.anchors, document.images, document.links, document.cookie&lt;/p&gt;
&lt;p&gt;The only thing they didn&amp;#39;t support is &lt;var&gt;document.all&lt;/var&gt;, it&amp;#39;s only supported in quirks mode of document served as &lt;var&gt;text/html&lt;/var&gt;. &lt;/p&gt;
&lt;p&gt;As for Opera: it checks &lt;var&gt;namespace&lt;/var&gt; of &lt;var&gt;&lt;html&gt;&lt;/var&gt; element to understand if it is xhtml and therefore there should be a HTML DOM or if it is a xml document and there should be XML DOM. And yes, Opera provides HTML DOM for ALL MIME types that XHTML can be served as.&lt;/p&gt;
&lt;h3 id=&quot;xhtml-served-as-var-application-xml-var-or-var-text-xml-var-&quot;&gt;XHTML served as &lt;var&gt;application/xml&lt;/var&gt; or &lt;var&gt;text/xml&lt;/var&gt;&lt;/h3&gt;
&lt;p&gt;Mozilla creates XMLDocument for XHTML served as &lt;var&gt;application/xml&lt;/var&gt; or &lt;var&gt;text/xml&lt;/var&gt;, so it doesn&amp;#39;t provide HTML DOM for such documents. But Opera does.&lt;/p&gt;
&lt;h3 id=&quot;-var-innerhtml-var-&quot;&gt;&lt;var&gt;innerHTML&lt;/var&gt;&lt;/h3&gt;
&lt;p&gt;Yes, that may sound strange, but it&amp;#39;s a fact - &lt;var&gt;innerHTML&lt;/var&gt; is supported everywhere, FOR EVERY XHTML MIME-TYPE.&lt;/p&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;There&amp;#39;s quite little amount of problems concerned XHTML served as &lt;var&gt;application/xhtml+xml&lt;/var&gt;, javascript works fine since there&amp;#39;s the same HTML DOM as it would have being served as &lt;var&gt;text/html&lt;/var&gt;. When you serve XHTML as &lt;var&gt;text/html&lt;/var&gt; or &lt;var&gt;application/xhtml+xml&lt;/var&gt;, in both case you will have eqaul HTML DOMs. So don&amp;#39;t be afraid
of all those scary stories of not working &lt;var&gt;innerHTML&lt;/var&gt; or &lt;var&gt;document.forms&lt;/var&gt; - it&amp;#39;s all a lie.&lt;/p&gt;
&lt;h3 id=&quot;-a-href-http-nix-vlz-ru-test-for-those-who-don-t-believe-me-a-&quot;&gt;&lt;a href=&quot;http://nix.vlz.ru/test/&quot;&gt;For those who don&amp;#39;t believe me.&lt;/a&gt;&lt;/h3&gt;
</content>
        </entry>
    
        <entry>
            <title>Some IE8b1 test results:</title>
            <link href="/posts/2008-03-IE8beta1-tests.html"/>
            <updated>2008-03-01T00:00:00.000Z</updated>
            <id>/posts/2008-03-IE8beta1-tests.html</id>
            <content type="html">&lt;h1 id=&quot;ie8b1-intitial-tests&quot;&gt;IE8b1 intitial tests&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;As earlier,&lt;code&gt;alert([1,2,3,].length)&lt;/code&gt; shows &lt;strong&gt;4&lt;/strong&gt; and 4&lt;sup&gt;th&lt;/sup&gt; element has &lt;code&gt;undefined&lt;/code&gt; value.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Unfortunately no support for so wanted &lt;code&gt;:last-child&lt;/code&gt; CSS3 Selector and buggy support for dynamically added elements that match &lt;code&gt;:first-child&lt;/code&gt; and should therefore enforce layout to be recalculated. See &lt;a href=&quot;http://www.quirksmode.org/css/firstchild.html&quot;&gt;PPK&amp;#39;s testcase on quirksmode.org&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We can&amp;#39;t set padding on html element for some reason - see &lt;a href=&quot;http://sharovatov.ru/testcases/htmlPadding.html&quot;&gt;testcase&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But I really enjoy Selectors API implemented in IE8b1.    It was the second browser to support this right after Webkit. I will describe the support and prepare some testcases in the next post.&lt;/p&gt;
&lt;p&gt;I&amp;#39;ve tested generated content model in IE8b1 quite thoroughly, have found quite weird bugs and here&amp;#39;s what I&amp;#39;ve come up with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;First bug I&amp;#39;ve noticed was happening when you set &lt;code&gt;position: relative&lt;/code&gt; for the generated content rule. The tab where you have this page opened dies. And then due to newly introduced &lt;a href=&quot;http://www.microsoft.com/windows/products/winfamily/ie/ie8/readiness/NewFeatures.htm#crash&quot;&gt;crash recovery system&lt;/a&gt;, it tries to recover the tab, loads the page and dies again and so on - an infinite loop that you can&amp;#39;t break. But the weird thing is that it doesn&amp;#39;t actually &lt;em&gt;die&lt;/em&gt; - it shows a window promting to select a debugger. The kind of window that appears when you have errors in your javascript code.&lt;/p&gt;
&lt;p&gt;  here&amp;#39;s the code sample:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  p:before {content: &amp;quot;test&amp;quot;; position: relative;}` 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  and &lt;a href=&quot;http://sharovatov.ru/testcases/genPosition.html&quot;&gt;the testcase&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I noted the bug and continued testing. 
  Next thing I came up with was the fact that if the page doesn&amp;#39;t have IMG/OBJECT/IFRAME elements or an image set as a background for an element, generated content is created &lt;strong&gt;after&lt;/strong&gt; &lt;code&gt;window.onload&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;  Please have a look on the following testcases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Document contains &lt;a href=&quot;http://sharovatov.ru/testcases/textOnly.html&quot;&gt;None of the elements listed above&lt;/a&gt;, and generated content &lt;strong&gt;is not being generated&lt;/strong&gt; till you press OK. It means that generated content is created &lt;strong&gt;after&lt;/strong&gt; &lt;code&gt;window.onload&lt;/code&gt; occurred!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Generated content is created before &lt;code&gt;window.onload&lt;/code&gt; as it should be in the following cases:
  &lt;a href=&quot;http://sharovatov.ru/testcases/withCssBg.html&quot;&gt;an element has CSS &lt;code&gt;background-image&lt;/code&gt; rule set&lt;/a&gt;,
  or page includes one of the elements: &lt;a href=&quot;http://sharovatov.ru/testcases/withImage.html&quot;&gt;IMG&lt;/a&gt;,
  &lt;a href=&quot;http://sharovatov.ru/testcases/withObject.html&quot;&gt;OBJECT&lt;/a&gt;
  or an &lt;a href=&quot;http://sharovatov.ru/testcases/withIframe.html&quot;&gt;IFRAME&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;At this point I thought - wait - it&amp;#39;s strange - all CSS rules were always
  applied &lt;em&gt;before&lt;/em&gt; &lt;code&gt;window.onload&lt;/code&gt;! Anyway, I just went on testing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;And then there was another strange thing - when you use &lt;code&gt;content: attr(class)&lt;/code&gt;, IE8b1 doesn&amp;#39;t show the attribute value but shows &lt;code&gt;null&lt;/code&gt; instead. But if you set the rule as &lt;code&gt;content: attr(className)&lt;/code&gt;, it actually shows the attribute value!&lt;/p&gt;
&lt;p&gt;  Here&amp;#39;s &lt;a href=&quot;http://sharovatov.ru/testcases/classNameBug.html&quot;&gt;the testcase&lt;/a&gt; for this bug.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;And another interesting thing is that &lt;code&gt;expression&lt;/code&gt; doesn&amp;#39;t work in generated content rules.
  Please see &lt;a href=&quot;http://sharovatov.ru/testcases/genContExpression.html&quot;&gt;the testcase&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Of course I can only guess but my feeling is that IE8b1 doesn&amp;#39;t have proper support for the generated content, it&amp;#39;s rather done by a hook somewhere firing off the function that generates the content. All these four bugs have something in common - debug window (that&amp;#39;s usually shown for javascript errors); generating content after &lt;code&gt;window.onload&lt;/code&gt; in some cases; reading &lt;code&gt;class&lt;/code&gt; attribute value by its DOM name (&lt;code&gt;className&lt;/code&gt;). Basically it&amp;#39;s all about javascript.&lt;/p&gt;
&lt;p&gt;And I can&amp;#39;t help thinking that IE8b1 uses some hidden javascript code to support generated content. And this functionality is triggered by some hidden event like DomContentLoaded.&lt;/p&gt;
&lt;p&gt;And if so I would be really happy if they could give us access to this handler :)&lt;/p&gt;
&lt;h1 id=&quot;selectors-api-and-ie8b1&quot;&gt;Selectors API and IE8b1&lt;/h1&gt;
&lt;p&gt;As mentioned above, IE8b1 introduced support for very powerful DOM accessing concept - &lt;a href=&quot;http://www.w3.org/TR/selectors-api/&quot;&gt;Selectors API&lt;/a&gt;. It is still a W3C working draft, but I bet that as IE and Webkit already support it, Presto and Gecko will soon have it as well.&lt;/p&gt;
&lt;p&gt;So what do we have? As per the &lt;a href=&quot;http://www.w3.org/TR/selectors-api/&quot;&gt;spec&lt;/a&gt;, we have 2 methods: &lt;code&gt;.querySelector()&lt;/code&gt; and &lt;code&gt;.querySelectorAll()&lt;/code&gt; which can be applied to any &lt;var&gt;HTMLElement&lt;/var&gt; and based on he parameter (CSS selectors string) provided return an &lt;var&gt;Element&lt;/var&gt; or &lt;var&gt;StaticNodeList&lt;/var&gt; populated with elements matching the provided CSS selectors. Bottom line, you give it CSS selector, they return you matching element(s).&lt;/p&gt;
&lt;p&gt;It provides you with a new flexible way to select elements in DOM. We can do any weird and wonderful stuff we want with the power of JS combined with the flexibility of CSS selectors:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Get all paragraphs with the &lt;code&gt;.note&lt;/code&gt; classname from one div? Not a problem – &lt;code&gt;document.querySelectorAll(&amp;#39;#myDiv .note&amp;#39;);&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Get all elements with some classname? Forget about &lt;code&gt;document.getElementsByClassName&lt;/code&gt; slow kludges - use &lt;code&gt;document.querySelectorAll(&amp;#39;.myClass&amp;#39;);&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Get a link with &lt;code&gt;.current&lt;/code&gt; classname from your UL-based menu? &lt;code&gt;document.querySelector(&amp;#39;#menu .current&amp;#39;);&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So generally we don&amp;#39;t have to iterate over huge &lt;var&gt;StaticNodeLists&lt;/var&gt; anymore - it&amp;#39;s done natively and very fast (much faster then by JS libraries). Please see &lt;a href=&quot;http://webkit.org/perf/slickspeed/&quot;&gt;the testcase prepared by Webkit authors&lt;/a&gt; to measure
their Selectors API support - it works in IE8b1 except for CSS3 Selectors block (IE8b1 doesn&amp;#39;t support CSS3 &lt;code&gt;:nth-&lt;/code&gt; and &lt;code&gt;:last-child&lt;/code&gt; selectors).&lt;/p&gt;
&lt;p&gt;Bottom line, &lt;strong&gt;Selectors&lt;/strong&gt; is a way to find elements in DOM. All browsers know how do it already when they parse CSS rules and find elements to which these rules have to be applied. So it&amp;#39;s just an existing browser functionality exposed to the developer. And we have to keep in mind that if browser supports a CSS selector, it will allow you to query for this element using &lt;strong&gt;Selectors API&lt;/strong&gt;. And obviously if there&amp;#39;s no support for some CSS selector, you won&amp;#39;t be able to get this element using &lt;strong&gt;Selectors&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;For example, as IE8b1 doesn&amp;#39;t support &lt;code&gt;:last-child&lt;/code&gt; CSS3 selector, you can&amp;#39;t style such
elements in CSS and you can&amp;#39;t query them using &lt;strong&gt;Selectors&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&quot;notes-&quot;&gt;Notes:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Unfortunately, IE8b1 doesn&amp;#39;t fully implement the &lt;a href=&quot;http://www.w3.org/TR/selectors-api/&quot;&gt;Selectors API spec&lt;/a&gt;. Here&amp;#39;s the &lt;a href=&quot;http://msdn2.microsoft.com/en-us/library/cc288326(VS.85).aspx&quot;&gt;MSDN article&lt;/a&gt; quotation:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Because Internet Explorer 8 does not formally support XHTML documents, it does not support the namespace features of the W3C Selectors API specification, such as the &lt;var&gt;NSResolver&lt;/var&gt; parameter.
  But for websites where namespaces are not used it&amp;#39;s not gonna be of any problem.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Another interesting issue that Selectors API spec raises is a potential history theft.&lt;/p&gt;
&lt;p&gt;  Basically you can get all visited links &lt;code&gt;href&lt;/code&gt;s and send them by AJAX somewhere (just a matter of getting a &lt;var&gt;StaticNodeList&lt;/var&gt; of elements by doing &lt;code&gt;document.querySelectorAll(&amp;quot;a:visited&amp;quot;)&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;  &lt;a href=&quot;http://www.w3.org/TR/selectors-api/&quot;&gt;Spec leaves it for the vendor to fix&lt;/a&gt;. So IE8b1 ignores the &lt;code&gt;:visited&lt;/code&gt; and &lt;code&gt;:link&lt;/code&gt; selectors when they appear in the selector query criteria.&lt;/p&gt;
&lt;p&gt;  Please see the &lt;a href=&quot;http://sharovatov.ru/testcases/example.html&quot;&gt;Testcase&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;attribute-selectors&quot;&gt;Attribute selectors&lt;/h2&gt;
&lt;p&gt;Both &lt;code&gt;[class=myclass]&lt;/code&gt; and &lt;code&gt;[className=myclass]&lt;/code&gt; work in IE7/IE8. The last one can be used as a CSS hack to target those browsers, but I would still recommend using conditional comments to target different IE versions.&lt;/p&gt;
&lt;p&gt;If you look at &lt;a href=&quot;http://sharovatov.ru/testcases/attrClassName.html&quot;&gt;the testcase&lt;/a&gt;, you will see that both &lt;code&gt;[class=test1]&lt;/code&gt; and &lt;code&gt;[classname=test2]&lt;/code&gt; selectors work. When I saw className working, I immediately tested other DOM properties like nodeName. Unfortunately, it didn&amp;#39;t work there - &lt;a href=&quot;http://sharovatov.ru/testcases/attrClassName2.html&quot;&gt;here&amp;#39;s the testcase&lt;/a&gt;. If it did, if there was such a way to access not HTML attribute but DOM properties from CSS selectors, it would be really weird but interesting.&lt;/p&gt;
&lt;h2 id=&quot;generated-content&quot;&gt;Generated content&lt;/h2&gt;
&lt;p&gt;When I was &lt;a href=&quot;http://sharovatov.wordpress.com/2008/04/08/ie8b1-generated-content-support/&quot;&gt;testing it&lt;/a&gt;, I noticed that if you want to get element&amp;#39;s class, you can&amp;#39;t use &lt;code&gt;content: attr(class)&lt;/code&gt; rule, you have to use &lt;code&gt;content: attr(className)&lt;/code&gt;. It&amp;#39;s obvious that this is a DOM property name rather than HTML element&amp;#39;s attribute.&lt;/p&gt;
&lt;p&gt;This violates the standard which clearly says that &lt;code&gt;attr(X)&lt;/code&gt; must return an attribute string value for the element matching the selector. It also violates the standard by returning &lt;code&gt;null&lt;/code&gt; value for not existing attributes.&lt;/p&gt;
&lt;p&gt;This behavior also gives us some strange options. Please see &lt;a href=&quot;http://sharovatov.ru/testcases/genContJs.html&quot;&gt;the testcase&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I don&amp;#39;t know if it&amp;#39;s a bug or a feature - none of the Microsoft documents on IE8 describes this behaviour, so I don&amp;#39;t know if this is going to be fixed or not; but it may be used in some interesting ways.&lt;br&gt;E.g. using &lt;code&gt;outerHTML&lt;/code&gt; IE-only DOM property I rebuilt &lt;a href=&quot;http://sharovatov.ru/testcases/attrClassName3.html&quot;&gt;the testcase&lt;/a&gt; for the attribute selectors bug mentioned above. If you have IE8, don&amp;#39;t wait to have a look. And please have a look at another &lt;a href=&quot;http://sharovatov.ru/testcases/DOMgenCont.html&quot;&gt;interesting thing&lt;/a&gt; - again it&amp;#39;s IE8-only as it uses &lt;code&gt;attr(nodeName)&lt;/code&gt; function to show every element&amp;#39;s nodeName.&lt;/p&gt;
&lt;p&gt;During testing I&amp;#39;ve noticed some more bugs with generated content:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;text-transform doesn&amp;#39;t work for generated content. Please see &lt;a href=&quot;http://sharovatov.ru/testcases/genContTextTransform.html&quot;&gt;the testcase&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;text-indent doesn&amp;#39;t work for generated content. &lt;a href=&quot;http://sharovatov.ru/testcases/genContTextIndent.html&quot;&gt;Here&amp;#39;s the testcase&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;text-align doesn&amp;#39;t work for generated content. &lt;a href=&quot;http://sharovatov.ru/testcases/genContTextAlign.html&quot;&gt;The testcase&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;ie8-and-expressions&quot;&gt;IE8 and expressions&lt;/h1&gt;
&lt;p&gt;Internet Explorer keeps on changing. One example is &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms537634.aspx&quot;&gt;expressions&lt;/a&gt; - their support is dropping from version to version. In different versions of IE &lt;a href=&quot;http://sharovatov.ru/testcases/expressions_test.html&quot;&gt;this testcase&lt;/a&gt; produces &lt;a href=&quot;http://sharovatov.ru/testcases/expressions_shots.html&quot;&gt;the following output&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So IE started filtering values in expressions since IE6, and now IE8b1 in both modes doesn&amp;#39;t even allow you to use object property accessors (both dot and square brackets notations - see &lt;a href=&quot;http://sharovatov.ru/testcases/exp_propacc.html&quot;&gt;testcase&lt;/a&gt;). So in IE8b1 in expressions you can only use plain string values in your expressions (which is not handy at all) or call externally defined functions.&lt;/p&gt;
&lt;p&gt;I can&amp;#39;t think of any other reason for disabling this except for protecting from potential XSS threat that I described in the previous post.&lt;/p&gt;
&lt;p&gt;Also in IE8b1 expressions are not reevaluated on &lt;var&gt;mouseover&lt;/var&gt; event (see &lt;a href=&quot;http://sharovatov.ru/testcases/exps_recalc.html&quot;&gt;testcase&lt;/a&gt;), but &lt;var&gt;onscroll&lt;/var&gt; still fires &lt;code&gt;document.recalc&lt;/code&gt; (this again seems to be left intentionally in order to support all cludges that were invented to implement for example non-existent position: fixed CSS rule).&lt;/p&gt;
&lt;p&gt;Bottom line, if you have expressions used in your CSS code, don&amp;#39;t wait - separate all the stuff you do there to JS functions and just call these functions from your expressions.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>data URI browser issues</title>
            <link href="/posts/2008-05-dataURI-browserissues.html"/>
            <updated>2008-05-01T00:00:00.000Z</updated>
            <id>/posts/2008-05-dataURI-browserissues.html</id>
            <content type="html">&lt;h2 id=&quot;length-limit&quot;&gt;Length limit&lt;/h2&gt;
&lt;h3 id=&quot;theory&quot;&gt;Theory&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc2397.txt&quot;&gt;data URI specification&lt;/a&gt; says the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;some applications that use URLs may impose a length limit; for example, URLs embedded within &lt;A&gt; anchors in HTML have a length limit determined by the SGML declaration for HTML [RFC1866]. The LITLEN (1024) limits the number of characters which can appear in a single attribute value literal, the ATTSPLEN (2100) limits the sum of all lengths of all attribute value specifications which appear in a tag, and the TAGLEN (2100) limits the overall length of a tag.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Though at the time of writing data URI specification &lt;a href=&quot;http://www.w3.org/TR/REC-html32&quot;&gt;HTML3.2&lt;/a&gt; was current HTML recommendation, author intentionally used LITLEN, ATTSPLEN and TAGLEN values from the older &lt;a href=&quot;http://www.w3.org/MarkUp/html-spec/html-spec_9.html#SEC9.5&quot;&gt;HTML2.0 SGML declaration&lt;/a&gt; to show that some user-agents may impose a length limit for URI.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc2616.txt&quot;&gt;HTTP1.1&lt;/a&gt; doesn&amp;#39;t put a limit on the length of URI, but it warns us:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: Servers ought to be cautious about depending on URI lengths above 255 bytes, because some older client or proxy implementations might not properly support these lengths.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;which basically means that if all clients in the network support URIes more than 255 bytes long, we&amp;#39;re ok.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.w3.org/TR/REC-html32#sgmldecl&quot;&gt;HTML3.2 SGML declaration&lt;/a&gt; states the maximum length of an attribute to be 65535. Even more, &lt;a href=&quot;http://www.w3.org/TR/html40/sgml/sgmldecl.html&quot;&gt;HTML4.01 SGML declaration&lt;/a&gt; uses value 65535 as a maximum allowed in SGML but says that fixed limits should be avoided. &lt;a href=&quot;http://xml.coverpages.org/xmlSGMLDecl970627.html&quot;&gt;XML1.0 SGML declaration&lt;/a&gt; uses 99999999 value just to show that there&amp;#39;s no limit specified.&lt;/p&gt;
&lt;h3 id=&quot;practice&quot;&gt;Practice&lt;/h3&gt;
&lt;p&gt;Different browsers have different maximum length of dataURI&amp;#39;ed values supported.&lt;/p&gt;
&lt;p&gt;As per &lt;a href=&quot;http://support.microsoft.com/kb/208427&quot;&gt;the kb208427 article&lt;/a&gt;, IE supports URI length of up to 2048 bytes. According to the &lt;a href=&quot;http://go.microsoft.com/fwlink?LinkID=110274&quot;&gt;Microsoft IE8 data URI support whitepaper&lt;/a&gt;, IE8 supports up to 32Kbytes of data URI and silently discards dataURI value if its size exceeds 32Kbytes (which can be checked in the &lt;a href=&quot;http://sharovatov.ru/testcases/dataURI_maxlength.html&quot;&gt;testcase1&lt;/a&gt; and &lt;a href=&quot;http://sharovatov.ru/testcases/dataURI_maxlength2.html&quot;&gt;testcase2&lt;/a&gt;). As I&amp;#39;ve already mentioned in the previous post, other browsers provide bigger-sized URI support, but I doubt that IE8 will have minor market share so we will still have to stick to 32Kbytes. And I will repeat: data URI spec author that the only reasonable and semantic use of data URI is embedding small resources, so realistically
speaking 32Kbytes limit shouldn&amp;#39;t be a problem.&lt;/p&gt;
&lt;h2 id=&quot;serving-css-datauri-ed&quot;&gt;Serving CSS dataURI&amp;#39;ed&lt;/h2&gt;
&lt;p&gt;In theory, CSS has to be served with its MIME type (&lt;code&gt;text/css&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;In practice, only Firefox and only in standards compliancy mode cares about MIME type that CSS&amp;#39;s been served with. Please see the testcases with CSS served with wrong MIME type in different render modes: &lt;a href=&quot;http://sharovatov.ru/testcases/dataURI_extCSSwrongMIME.html&quot;&gt;in standards compliancy mode&lt;/a&gt; and &lt;a href=&quot;http://sharovatov.ru/testcases/dataURI_extCSSwrongMIME_quirks.html&quot;&gt;in quirks mode&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Opera, Safari and Internet Explorer 8 all apply CSS served with any MIME type in all modes. The behaviour is the same for both CSS files served using dataURI and by referencing normal external files.&lt;/p&gt;
&lt;h2 id=&quot;serving-javascript-and-html-datauri-ed&quot;&gt;Serving Javascript and HTML dataURI&amp;#39;ed&lt;/h2&gt;
&lt;p&gt;Safari, Opera and Firefox support &lt;a href=&quot;http://sharovatov.ru/testcases/dataURI_extJS.html&quot;&gt;embedding javascript using data URI scheme&lt;/a&gt;. According to &lt;a href=&quot;http://code.msdn.microsoft.com/ie8whitepapers/Release/ProjectReleases.aspx?ReleaseId=575&quot;&gt;the whitepaper&lt;/a&gt;, IE8b1 doesn&amp;#39;t support this. Here&amp;#39;s the quote:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Scripts in data URIs are unsupported because they allow potentially harmful script to bypass server- and proxy-script filters for applications such as HTML email. (Web-based email clients generally do not allow emails to execute script; data URIs could be used to easily bypass these filters).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I do agree that this is a valid point, it is a potential security issue, dataURIed javascript is even &lt;a href=&quot;http://ha.ckers.org/xss.html&quot;&gt;published as an XSS vector&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Please see &lt;a href=&quot;http://sharovatov.ru/testcases/dataURI_JSXSS.html&quot;&gt;the testcase&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Opera and Safari run dataURI&amp;#39;ed HTML page in a separate isolated context, IE8b1 doesn&amp;#39;t support dataURI&amp;#39;ed html at all, so the only affected browser here is Firefox. There&amp;#39;s an interesting bugzilla &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=296871&quot;&gt;entry describing the XSS&lt;/a&gt; (marked as duplicate to &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=255107&quot;&gt;the security proposal&lt;/a&gt;) which says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The attack works by exploiting an ambiguity in RFC 2397 with regard to the Javascript same-origin security policy &amp;#8212; what is the origin of a URI? Is it the containing page? If so, preventing this attack is the responsibility of site maintainers. If not, FF should launch the child of a data: URI without same-origin privileges.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Firefox authors reply that this is site maintainers&amp;#39; problem to filter dataURI and compare this to filtering &lt;code&gt;javascript:&lt;/code&gt; (which is quite fair) but why did they want to create a new hole in all the sites for some vague benefits of executing dataURI&amp;#39;ed scripts in the same context?&lt;/p&gt;
&lt;p&gt;To me it seems a bit weird especially looking at the fact that other browsers do care about execution context. &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=255107&quot;&gt;The bugzilla entry&lt;/a&gt; is still opened, but I doubt that this is going to be fixed. So, “site maintainers”, be aware! (note from 2012 - this bug report is still open)&lt;/p&gt;
&lt;h3 id=&quot;nested-datauri-es&quot;&gt;Nested dataURI&amp;#39;es&lt;/h3&gt;
&lt;p&gt;Neither dataURI spec nor any other mentions if dataURI&amp;#39;es can not be nested. So here&amp;#39;s &lt;a href=&quot;http://sharovatov.ru/testcases/dataURI_extCSS_dataURI_img.html&quot;&gt;the testcase&lt;/a&gt; where dataURI&amp;#39;ed CSS has dataURI&amp;#39;ed image embedded. IE8b1, Firefox3 and Safari applied the stylesheet and showed the image, Opera9.50 (build 9613) applies the stylesheet but &lt;strong&gt;doesn&amp;#39;t show the embedded image&lt;/strong&gt;! So it seems that Opera9 doesn&amp;#39;t expect to get anything embedded inside of an already embedded resource! :D&lt;/p&gt;
&lt;p&gt;But funny thing, as IE8b1 supports expressions and also supports nested data URI&amp;#39;es, it has the same potential security flaw as Firefox does (as described in the section above). See &lt;a href=&quot;http://sharovatov.ru/testcases/dataURI_JSXSSIE.html&quot;&gt;the testcase&lt;/a&gt; — embedded CSS has the following code: &lt;code&gt;body { background: expression(a()); }&lt;/code&gt;which calls &lt;var&gt;function a()&lt;/var&gt; defined in the javascript of the main page, and this function is called every time the expression is reevaluated. Though IE8b1 has limited expressions support (which is going to be explained in a separate post) you can&amp;#39;t use &lt;em&gt;any&lt;/em&gt; code as the expression value, but you can only call already defined functions or use direct
string values. &lt;/p&gt;
&lt;p&gt;So in order to exploit this feature we need to have a ready javascript function already located on the page and then we can just call it from the expression embedded in the stylesheet. That&amp;#39;s not very trivial obviously, but if you have a website that allows people to specify their own stylesheets and you want to be on the safe side, you have to either make sure you don&amp;#39;t have a javascript function that can cause any potential harm or filter expressions from people&amp;#39;s stylesheets.&lt;/p&gt;
&lt;h3 id=&quot;line-feeds&quot;&gt;Line feeds&lt;/h3&gt;
&lt;p&gt;Firefox, Opera, Safari and IE8b1 support both data URI values supplied as one line (as an URI) and splitted by 76 bytes (as specified in &lt;a href=&quot;http://tools.ietf.org/html/rfc2045&quot;&gt;MIME&lt;/a&gt; and &lt;a href=&quot;http://www.faqs.org/rfcs/rfc2557.html&quot;&gt;MHTML&lt;/a&gt; RFCs). See &lt;a href=&quot;http://sharovatov.ru/testcases/dataURI_extCSSIMGs_split.html&quot;&gt;the testcase&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But &lt;a href=&quot;http://tools.ietf.org/html/rfc3548#section-2.1&quot;&gt;base64 RFC&lt;/a&gt; doesn&amp;#39;t put a requirement to split base64 strings:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MIME [3] is often used as a reference for base 64 encoding. However, MIME does not define &amp;quot;base 64&amp;quot; per se, but rather a &amp;quot;base 64 Content-Transfer-Encoding&amp;quot; for use within MIME. As such, MIME enforces a limit on line length of base 64 encoded data to 76 characters. MIME inherits the encoding from PEM [2] stating it is &amp;quot;virtually identical&amp;quot;, however PEM uses a line length of 64 characters. The MIME and PEM limits are both due to limits within SMTP.&lt;/p&gt;
&lt;p&gt;Implementations &lt;strong&gt;MUST NOT not add line feeds&lt;/strong&gt; to base encoded data unless the specification referring to this document explicitly directs base encoders to add line feeds after a specific number of characters.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;datauried-images-with-images-turned-off&quot;&gt;DataURIed images with images turned off&lt;/h3&gt;
&lt;p&gt;When you turn off images in your browser, only Firefox still shows dataURIed images. IE8b1, Safari and Opera don&amp;#39;t show the image as it&amp;#39;s supposed to be when you turn the images off. To test this turn off images in your browser and run &lt;a href=&quot;http://sharovatov.ru/testcases/dataURI_img.html&quot;&gt;the testcase&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; Firefox developers told me this is by design as unchecking “Load images automatically” option in the browser settings &lt;strong&gt;disables only network request to get the image&lt;/strong&gt;. So if the image is accessible without doing a network request — either from cache or embedded as dataURI, it will be displayed in any case.&lt;/p&gt;
&lt;h3 id=&quot;dynamically-created-datauries&quot;&gt;Dynamically created dataURIes&lt;/h3&gt;
&lt;p&gt;As dataURI can contain binary data (e.g. to show images), there are thoughts on using this. Ajaxian has a &lt;a href=&quot;http://ajaxian.com/archives/jsonvid-pure-javascript-video-player&quot;&gt;crazy article&lt;/a&gt; on creating pure JS video player that doesn&amp;#39;t use flash but changes dataURI&amp;#39;ed images instead. This technique may get some practical evolution and usage, but now it&amp;#39;s rather impractical.&lt;/p&gt;
&lt;h3 id=&quot;links-and-references&quot;&gt;Links and references&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.w3.org/MarkUp/html-spec/html-spec_9.html#SEC9.5&quot;&gt;HTML 2.0 SGML declaration&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.w3.org/TR/html40/sgml/sgmldecl.html&quot;&gt;HTML 4.01 SGML declaration&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.w3.org/MarkUp/html3/sgmldecl.dtd&quot;&gt;HTML 3.0 SGML declaration&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.w3.org/TR/REC-html32#sgmldecl&quot;&gt;HTML 3.2 SGML delcaration&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://go.microsoft.com/fwlink?LinkID=110274&quot;&gt;Microsoft IE8 data URI support&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://xml.coverpages.org/xmlSGMLDecl970627.html&quot;&gt;XML1.0 SGML declaration&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.boutell.com/newfaq/misc/urllength.html&quot;&gt;Maximum Length of the URL&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://developer.mozilla.org/en/docs/How_Mozilla_determines_MIME_Types&quot;&gt;How Mozilla determines MIME types&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;P.S. And here’s a great tool from Nicholas C. Zakas – &lt;a href=&quot;http://www.nczonline.net/blog/2009/11/03/automatic-data-uri-embedding-in-css-files/&quot;&gt;CSSEmbed&lt;/a&gt; – it reads the CSS file you want, finds all the images references, converts images to dataURIes and saves resulting CSS file. So if you have small presentational images referenced in your CSS file, feed CSSEmbed with your CSS file and you’ll get them all converted in one go! Nice and simple! This tool can be also easily integrated into your publishing process if required.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>data URI theory and practice</title>
            <link href="/posts/2008-05-dataURI-theory.html"/>
            <updated>2008-05-01T00:00:00.000Z</updated>
            <id>/posts/2008-05-dataURI-theory.html</id>
            <content type="html">&lt;h1 id=&quot;theory&quot;&gt;Theory&lt;/h1&gt;
&lt;p&gt;Data URI&amp;#39;es is an &lt;a href=&quot;http://www.ietf.org/rfc/rfc2397.txt&quot;&gt;RFC 2397&lt;/a&gt; published in 1998. It&amp;#39;s a URL scheme which is used to embed small resources right into the (X)HTML page.&lt;/p&gt;
&lt;p&gt;Syntax is quite simple: &lt;code&gt;data:[&amp;lt;mediatype&amp;gt;][;base64],&amp;lt;data&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To see how it works let&amp;#39;s take the following code (&lt;a href=&quot;http://sharovatov.ru/testcases/dataURI_extCSS.html&quot;&gt;testcase&lt;/a&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; href=&amp;quot;data:text/css;base64,Ym9keXtiYWNrZ3JvdW5kOmdyZWVuO30=&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Browser supporting data URI will base64-decode the encoded string &lt;code&gt;Ym9keXtiYWNrZ3JvdW5kOmdyZWVuO30=&lt;/code&gt; to &lt;code&gt;body{background:green;}&lt;/code&gt; and then &lt;em&gt;load&lt;/em&gt; this string as if it was a result of an http request to an external file containing this CSS code.&lt;/p&gt;
&lt;p&gt;According to the RFC we can embed any small resource into our page, e.g:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://sharovatov.ru/testcases/dataURI_img.html&quot;&gt;images&lt;/a&gt; (as &lt;var&gt;img&lt;/var&gt; elements and CSS backgrounds)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://sharovatov.ru/testcases/dataURI_extJS.html&quot;&gt;javascript&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://sharovatov.ru/testcases/dataURI_HTML.html&quot;&gt;html&lt;/a&gt; (links, iframes)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://sharovatov.ru/testcases/dataURI_extCSS.html&quot;&gt;css&lt;/a&gt; (and even &lt;a href=&quot;http://sharovatov.ru/testcases/dataURI_extCSS_dataURI_img.html&quot;&gt;dataURIed images inside dataURIed CSS&lt;/a&gt;!)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;any other resource supported by browsers&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So theoretically we could have the same functionality as we have in MHTML - some or all external resources embedded directly in the page.&lt;/p&gt;
&lt;p&gt;All data URI advocates say that as most of the browsers have 2 concurrent connections per server (but 6 in total), dataURI mechanism potentially can speed up page load by decreasing the amount of HTTP requests (especially in case of HTTPS where encrypting payload produces quite big overhead). But:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;HTTP protocol already has methods to help building efficient applications - persistent connections to avoid recreating the sockets, different caching mechanisms to reduce overhead (Conditional GET) or avoid total amount of requests (aggressive caching using Expires header).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Even more, using &lt;a href=&quot;http://www.ajaxperformance.com/2006/12/18/circumventing-browser-connection-limits-for-fun-and-profit/&quot;&gt;simple technique&lt;/a&gt; you can have your browser use 6 concurrent connections to parallelize fetching data as much as it can and therefore fasten page load.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Though &lt;a href=&quot;http://tools.ietf.org/html/rfc2616#section-8.1.4&quot;&gt;HTTP 1.1 spec says&lt;/a&gt; that we shouldn&amp;#39;t have more than 2 concurrent connections per server, in real world we have 2 concurrent connections only in Firefox and IE6/7. In IE8b1 the number is 6, in Opera 9 and Safari it&amp;#39;s 4. In the next post I will give more details on this.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So keeping all this in mind we can&amp;#39;t just say that dataURI is the only usable way to improve page load times. But it definetely is the only option when you have a limited access to the server and/or the server is not configured properly, so you can&amp;#39;t set Expires header for aggressive caching, you can&amp;#39;t set DNS wildcards or CNAME records to get your resources served from different hosts (and therefore leverage the maximum available concurrent connection in browsers) or server doesn&amp;#39;t support HTTP caching properly.&lt;/p&gt;
&lt;h1 id=&quot;practice&quot;&gt;Practice&lt;/h1&gt;
&lt;p&gt;I can only see the following cases where dataURI can be effectively used:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;CSS sprites, rounded corners images, icons and other images that have only presentational
  semantics&lt;/strong&gt;. It&amp;#39;s the perfect target for dataURI + base64 to be applied to. If we embed them
  in the CSS file, we &lt;em&gt;remove&lt;/em&gt; HTTP requests that would be queried if these images were normal
  files. These images are part of the design described in the stylesheet, so it makes perfect sense to
  embed them in CSS. CSS files can be perfectly cached and while design doesn&amp;#39;t change, we don&amp;#39;t
  need to touch this CSS and change anything. But there should be a common sense here as well -
  firstly, base64 decoding takes system resources and secondly, who wants to wait for a CSS file of couple
  hundred kilobytes in size to load?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Reasonably small CSS files with rules specific for a page&lt;/strong&gt;. If there is a semantical sense to define an inline CSS on a page, then there&amp;#39;s a perfect sense to set it using dataURI.
  Another thing is that if CSS file is not going to be parsed until it&amp;#39;s fully downloaded by a browser. So when we embed a big image, we&amp;#39;ll have first client opening the page wait till CSS is fully loaded. So we loose our HTTP parallelism benefits here.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please don&amp;#39;t forget that if a resource is embedded on multiple pages, it&amp;#39;s obviously going to be redownloaded as many times as these containing pages are. And if a resource is not dataURI&amp;#39;ed but referenced normally as an external file, it can be cached quite aggressively and requested from the server only once (all popular web-servers already provide good caching support for static files).&lt;/p&gt;
&lt;p&gt;However, this is all ideal world where specification don&amp;#39;t have flaws and all browsers follow them.&lt;/p&gt;
&lt;p&gt;In our world we have the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Lack of support. Only IE8b1/Opera9/Firefox2/Safari support data URI. No IE6/IE7&lt;sup&gt;&lt;a href=&quot;#dataURI_note1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. That means that for the next three or four years while IE6 and IE7 will still have a significant market share, we can&amp;#39;t just go and start using dataURI.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Different size limits on URI length in different browsers. As far as I know for now IE8 supports up to 32 kilobytes in &lt;var&gt;data:&lt;/var&gt; value. Even though all other browsers support bigger sizes, our limit will obviously be 32Kb.&lt;br&gt;See &lt;a href=&quot;http://sharovatov.ru/testcases/dataURI_maxlength.html&quot;&gt;testcase 1 with data URI of 32755 bytes&lt;/a&gt; and &lt;a href=&quot;http://sharovatov.ru/testcases/dataURI_maxlength2.html&quot;&gt;testcase2 with dataURI of 32868 bytes&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also I would strongly discourage from dynamically base64-encoding and embedding images in CSS files by some scripting language unless you&amp;#39;re well aware of HTTP caching principles.&lt;/p&gt;
&lt;p&gt;Let&amp;#39;s consider the following composed code from &lt;a href=&quot;http://en.wikipedia.org/wiki/Data:_URI_scheme&quot;&gt;Wikipedia data:URI page&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php
function data_url($file, $mime)
{
    $contents = file_get_contents($file);
    $base64 = base64_encode($contents);
    return (&amp;#39;data:&amp;#39; . $mime . &amp;#39;;base64,&amp;#39; . $base64);
}

header(&amp;#39;Content-type: text/css&amp;#39;);

?&amp;gt;

div.menu {
    background-image:url(&amp;lt;?php echo data_url(&amp;#39;menu_background.png&amp;#39;,&amp;#39;image/png&amp;#39;)?&amp;gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Unless accompanied with correct HTTP caching algorythm, this CSS file will be downloaded &lt;strong&gt;every time the page that references this CSS file is loaded&lt;/strong&gt;! So every time user accesses the page referencing this CSS file, server will get a request, initiate script parsing, base64-encode the image and send it back to client. So you get rid of one simple request for an image (that in case of being a static file will be perfectly cached) but have one heavy request that will be run every time user requests a page! Not a fair change I think. So again, if you decide to use data URI scheme for your resources, encode and embed them beforehand or implement proper server-side HTTP caching and compressing support.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note for russian-speaking users&lt;/strong&gt;: - there&amp;#39;s &lt;a href=&quot;http://bolknote.ru/2006/08/25/~314&quot;&gt;a way to embed images even for IE6/IE7&lt;/a&gt;. Though it&amp;#39;s rather a proof-of-concept - it doesn&amp;#39;t support HTTP caching/compressing, but it works!&lt;/p&gt;
&lt;h2 id=&quot;links-and-resources-&quot;&gt;Links and resources:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc2397.txt&quot;&gt;RFC 2397 - The &amp;ldquo;data&amp;rdquo; URL scheme&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.mozilla.org/quality/networking/testing/datatests.html&quot;&gt;Mozilla tests for data URI support&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.packetgram.com/pktg/docs/std/urls/techrfc2397.html&quot;&gt;Technical review of RFC 2397&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc2396.txt&quot;&gt;RFC 2396 - URI generic syntax&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc2616.txt&quot;&gt;RFC 2616 - HTTP/1.1&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://support.microsoft.com/kb/208427&quot;&gt;Maximum URL length is 2,083 characters in Internet Explorer&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.geocities.com/max1million/bookmarklets.htm&quot;&gt;Bookmarklets for Firefox&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.alistapart.com/articles/sprites&quot;&gt;CSS sprites&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://code.msdn.microsoft.com/ie8whitepapers/Release/ProjectReleases.aspx?ReleaseId=575&quot;&gt;Microsoft IE8b1 data URI support&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.ajaxperformance.com/2006/12/18/circumventing-browser-connection-limits-for-fun-and-profit/&quot;&gt;Circumventing browser connection limits for fun and profit&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://forevergeek.com/open_source/make_firefox_faster.php&quot;&gt;Make Firefox faster&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://bolknote.ru/2006/08/25/~314&quot;&gt;Embedding resources in IE6/IE7&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        </entry>
    
        <entry>
            <title>HTTP History Lists and Back Button</title>
            <link href="/posts/2008-06-http-historylist.html"/>
            <updated>2008-06-01T00:00:00.000Z</updated>
            <id>/posts/2008-06-http-historylist.html</id>
            <content type="html">&lt;p&gt;While writing the post about forms values persistence, I noticed that browsers handle back button in different HTTP &lt;em&gt;situations&lt;/em&gt; differently.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc2616.txt&quot;&gt;HTTP 1.1 spec&lt;/a&gt; says the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;13.13 History Lists&lt;/p&gt;
&lt;p&gt;User agents often have history mechanisms, such as &amp;quot;Back&amp;quot; buttons and history lists, which can be used to redisplay an entity retrieved earlier in a session.&lt;/p&gt;
&lt;p&gt;History mechanisms and caches are different. In particular history mechanisms SHOULD NOT try to show a semantically transparent view of the current state of a resource. Rather, a history mechanism is meant to show exactly what the user saw at the time when the resource was retrieved.&lt;/p&gt;
&lt;p&gt;By default, an expiration time does not apply to history mechanisms. If the entity is still in storage, a history mechanism SHOULD display it even if the entity has expired, unless the user has specifically configured the agent to refresh expired history documents.&lt;/p&gt;
&lt;p&gt;This is not to be construed to prohibit the history mechanism from telling the user that a view might be stale.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So it clearly recommends UA authors to separate history list and cache behaviour. So if user navigates through the history list (using Back or Forward buttons), HTTP spec recommends to show the &lt;strong&gt;exact&lt;/strong&gt; response that the user saw before, regardless if it&amp;#39;s stale or expired.&lt;/p&gt;
&lt;p&gt;I&amp;#39;ve tested 4 major browsers - IE, FF, Opera and Safari, and here is the summary table:&lt;/p&gt;
&lt;table border=&quot;1&quot; cellpadding=&quot;3&quot;&gt;
    &lt;tbody&gt;
    &lt;tr&gt;
        &lt;th scope=&quot;row&quot;&gt;&lt;a title=&quot;click to see the corresponding perl code&quot;
href=&quot;http://sharovatov.ru/testcases/samples/expiresAndCG.txt&quot;&gt;Expires in the future
            + &lt;br&gt;Conditional GET validators&lt;/a&gt;&lt;/th&gt;
        &lt;td style=&quot;color:green;&quot;&gt;no request&lt;/td&gt;
        &lt;td style=&quot;color:green;&quot;&gt;no request&lt;/td&gt;
        &lt;td style=&quot;color:green;&quot;&gt;no request&lt;/td&gt;
        &lt;td style=&quot;color:green;&quot;&gt;no request&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;th scope=&quot;row&quot;&gt;&lt;a title=&quot;click to see the corresponding perl code&quot;
href=&quot;http://sharovatov.ru/testcases/samples/expires.txt&quot;&gt;Expires in the future&lt;/a&gt;
        &lt;/th&gt;
        &lt;td style=&quot;color:green;&quot;&gt;no request&lt;/td&gt;
        &lt;td style=&quot;color:green;&quot;&gt;no request&lt;/td&gt;
        &lt;td style=&quot;color:green;&quot;&gt;no request&lt;/td&gt;
        &lt;td style=&quot;color:green;&quot;&gt;no request&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;th scope=&quot;row&quot;&gt;&lt;a title=&quot;click to see the corresponding perl code&quot;
href=&quot;http://sharovatov.ru/testcases/samples/CG.txt&quot;&gt;Conditional GET validators&lt;/a&gt;
        &lt;/th&gt;
        &lt;td style=&quot;color:green;&quot;&gt;no request&lt;/td&gt;
        &lt;td style=&quot;color:green;&quot;&gt;no request&lt;/td&gt;
        &lt;td style=&quot;color:green;&quot;&gt;no request&lt;/td&gt;
        &lt;td style=&quot;color:green;&quot;&gt;no request&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;th scope=&quot;row&quot;&gt;&lt;a title=&quot;click to see the corresponding perl code&quot;
href=&quot;http://sharovatov.ru/testcases/samples/noHeaders.txt&quot;&gt;no HTTP caching
            headers&lt;/a&gt;&lt;/th&gt;
        &lt;td style=&quot;color:green;&quot;&gt;no request&lt;/td&gt;
        &lt;td style=&quot;color:green;&quot;&gt;no request&lt;/td&gt;
        &lt;td style=&quot;color:green;&quot;&gt;no request&lt;/td&gt;
        &lt;td style=&quot;color:red;&quot;&gt;full request&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;th scope=&quot;row&quot;&gt;&lt;a title=&quot;click to see the corresponding perl code&quot;
href=&quot;http://sharovatov.ru/testcases/samples/expiresPast.txt&quot;&gt;Expires in the past&lt;/a&gt;
        &lt;/th&gt;
        &lt;td style=&quot;color:green;&quot;&gt;no request&lt;/td&gt;
        &lt;td style=&quot;color:green;&quot;&gt;no request&lt;/td&gt;
        &lt;td style=&quot;color:green;&quot;&gt;no request&lt;/td&gt;
        &lt;td style=&quot;color:red;&quot;&gt;full request&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;th scope=&quot;row&quot;&gt;&lt;a title=&quot;click to see the corresponding perl code&quot;
href=&quot;http://sharovatov.ru/testcases/samples/noStore.txt&quot;&gt;Cache-Control: no-store&lt;/a&gt;
        &lt;/th&gt;
        &lt;td style=&quot;color:red;&quot;&gt;full request&lt;/td&gt;
        &lt;td style=&quot;color:red;&quot;&gt;full request&lt;/td&gt;
        &lt;td style=&quot;color:green;&quot;&gt;no request&lt;/td&gt;
        &lt;td style=&quot;color:red;&quot;&gt;full request&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;th scope=&quot;row&quot;&gt;&lt;a title=&quot;click to see the corresponding perl code&quot;
href=&quot;http://sharovatov.ru/testcases/samples/noStoreAndExpiresPast.txt&quot;&gt;Cache-Control:
            no-store +&lt;br&gt;Expires in the past&lt;/a&gt;&lt;/th&gt;
        &lt;td style=&quot;color:red;&quot;&gt;full request&lt;/td&gt;
        &lt;td style=&quot;color:red;&quot;&gt;full request&lt;/td&gt;
        &lt;td style=&quot;color:green;&quot;&gt;no request&lt;/td&gt;
        &lt;td style=&quot;color:red;&quot;&gt;full request&lt;/td&gt;
    &lt;/tr&gt;
    &lt;/tbody&gt;
    &lt;thead&gt;
    &lt;tr style=&quot;background:#eee;&quot;&gt;
        &lt;th scope=&quot;col&quot;&gt;Page served with&lt;/th&gt;
        &lt;th scope=&quot;col&quot;&gt;IE8&lt;/th&gt;
        &lt;th scope=&quot;col&quot;&gt;FF&lt;/th&gt;
        &lt;th scope=&quot;col&quot;&gt;Opera&lt;/th&gt;
        &lt;th scope=&quot;col&quot;&gt;Safari&lt;/th&gt;
    &lt;/tr&gt;
    &lt;/thead&gt;
&lt;/table&gt;

&lt;p&gt;So we can see that only Opera follows HTTP 1.1 recommendation.&lt;/p&gt;
&lt;p&gt;Obviously IE and FF don&amp;#39;t produce a request when HTTP caching is not explicitly prohibited which is against the HTTP spec recommendation, but this was done intentionally as authors usually prohibit caching for a reason and don&amp;#39;t want users to view those pages without revalidating.&lt;/p&gt;
&lt;p&gt;And Safari just does the full request whenever the page is not cached explicitly.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Internet Explorer 8 beta 2 — new tests</title>
            <link href="/posts/2008-12-ie8b2.html"/>
            <updated>2008-12-01T00:00:00.000Z</updated>
            <id>/posts/2008-12-ie8b2.html</id>
            <content type="html">&lt;p&gt;Finally I had some time to test Internet Explorer 8 beta 2, so first of all I ran all the test I had previously done to check if bugs were fixed.&lt;/p&gt;
&lt;p&gt;Here&amp;#39;s the list:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;applying &lt;code&gt;:first-child&lt;/code&gt; selector to dynamically added element still doesn&amp;#39;t work, see &lt;a href=&quot;http://sharovatov.ru/testcases/addingFirstChild.html&quot;&gt;the testcase&lt;/a&gt;. When you click on &amp;quot;Add first child&amp;quot; button, a new paragraph is added which then becomes the actual first-child of the parent div and only this new paragraph should apply CSS rules defined for the corresponding &lt;code&gt;:first-child&lt;/code&gt; selector. In IE8b2 new element gets the CSS applied, but the element that previously was first-child doesn&amp;#39;t lose CSS as if it still was the first child (see &lt;a href=&quot;http://sharovatov.ru/screenshots/addingFirstChild.jpg&quot;&gt;IE8b2 screenshot&lt;/a&gt; and &lt;a href=&quot;http://sharovatov.ru/screenshots/addingFirstChild_proper.jpg&quot;&gt;Google Chrome screenshot&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;:last-child&lt;/code&gt; is still not supported. Of course, it&amp;#39;s CSS3, but it would be really handy to have this supported and most browsers already support &lt;code&gt;:last-child&lt;/code&gt;. See &lt;a href=&quot;http://sharovatov.ru/testcases/lastchild.html&quot;&gt;testcase&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now about bugs that I blogged about &lt;a href=&quot;http://sharovatov.wordpress.com/2008/04/08/ie8b1-generated-content-support/&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;http://sharovatov.wordpress.com/2008/05/06/ie8b1-attribute-selectors-generated-content/&quot;&gt;here&lt;/a&gt;:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;position: relative for the generated content rule&lt;/em&gt; - &lt;strong&gt;fixed&lt;/strong&gt; - now &lt;a href=&quot;http://sharovatov.ru/testcases/genPosition.html&quot;&gt;the testcase&lt;/a&gt; doesn&amp;#39;t kill the tab where it&amp;#39;s been opened.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;generated content is created after window.onload&lt;/em&gt; - &lt;strong&gt;fixed&lt;/strong&gt; - now all the generated content is created right at the stage of applying CSS rules which can be &lt;a href=&quot;http://sharovatov.ru/testcases/textOnly.html&quot;&gt;clearly seen here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;&lt;code&gt;content: attr(class)&lt;/code&gt; showing &lt;code&gt;null&lt;/code&gt;&lt;/em&gt; - &lt;strong&gt;fixed&lt;/strong&gt; - now IE8b2 correctly shows the value of class attribute. &lt;code&gt;content: attr(className)&lt;/code&gt; results as an empty string, right as it&amp;#39;s defined in the CSS spec for non-existing attributes. Here&amp;#39;s &lt;a href=&quot;http://sharovatov.ru/testcases/classNameBug.html&quot;&gt;the testcase&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;expressions don&amp;#39;t work in generated content&lt;/em&gt; - &lt;a href=&quot;http://blogs.msdn.com/ie/archive/2008/10/16/ending-expressions.aspx&quot;&gt;expressions don&amp;#39;t work in standards compliancy mode any more&lt;/a&gt; at all, so this bug is outdated&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;&lt;code&gt;text-transform&lt;/code&gt; doesn&amp;#39;t work for generated content&lt;/em&gt; - &lt;strong&gt;fixed&lt;/strong&gt; - see &lt;a href=&quot;http://sharovatov.ru/testcases/genContTextTransform2.html&quot;&gt;testcase&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;&lt;code&gt;text-indent&lt;/code&gt; doesn&amp;#39;t work for generated content&lt;/em&gt; - &lt;strong&gt;fixed&lt;/strong&gt; - see &lt;a href=&quot;http://sharovatov.ru/testcases/genContTextIndent2.html&quot;&gt;testcase&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So I was really convinced by IE8b1 tests that some hidden javascript code was used to support generated content, but now I&amp;#39;m absolutely sure that IE8b2 has decent native support for generated content and attribute selectors! Plus all the text-transform, text-align, text-indent issues are now fixed!&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Migrating live website</title>
            <link href="/posts/2008-12-migratinglivesite.html"/>
            <updated>2008-12-01T00:00:00.000Z</updated>
            <id>/posts/2008-12-migratinglivesite.html</id>
            <content type="html">&lt;p&gt;I will describe the migration strategy I used to move the live website from the old server to the new one.&lt;/p&gt;
&lt;p&gt;Old website configuration:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows 2000 Server&lt;/li&gt;
&lt;li&gt;MSSQL 2000&lt;/li&gt;
&lt;li&gt;ASP, ASP.NET1.1, PHP5&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It was a virtual hosting with all its drawbacks - shared MS SQLServer 2000, no RDP, no way to install ISAPI modules or even additional scripting languages (or change their configuration), no proper control over the email server, no ability to set custom backup scheme and so on and so on. It&amp;#39;s obvious that when a website starts to be much more than just a set of a static informational pages but rather a full-blown complicated web-app, it needs better and more controlled infrastructure.&lt;/p&gt;
&lt;p&gt;So we wanted our server fully managed by professional hosters, we wanted it sitting behind a properly configured firewall in the reliable datacentre but still under our full control.&lt;/p&gt;
&lt;p&gt;That&amp;#39;s why we decided to go for a dedicated server hosted at &lt;a href=&quot;http://www.ukfast.net/&quot;&gt;UKFAST&lt;/a&gt; in their datacentre in Manchester. I&amp;#39;ve been to this datacenter, and I can tell you - it was really exciting :)&lt;/p&gt;
&lt;p&gt;But due to the fact that our website is used 24 hours a day we had to find a way to move it along with the SSL certificate, mail server and the database causing as less interruption to the live site work as possible.&lt;/p&gt;
&lt;h1 id=&quot;phase-0-preparing-the-infrastructure&quot;&gt;Phase 0: preparing the infrastructure&lt;/h1&gt;
&lt;p&gt;During this stage we made sure that changing addresses of the resources web-apps used was just a matter of changing one-two lines in the global configuration files (e.g. SQL Server name, mail server name). We also configured all the services on the new dedicated hosting to have the same settings/user logins etc; uploaded web-apps scripts and checked that they worked correctly. &lt;/p&gt;
&lt;p&gt;To get everything tested properly, we temprorarily added a line to &lt;strong&gt;%systemroot%\system32\hosts&lt;/strong&gt; files to make our computers think that the domain name was bound to the new dedicated server IP address. Found errors were fixed, required modules were installed and configured. As emails that our web-apps send were still being sent through the old virtual hosting mail server and all data was still stored on the old virtual hosting SQL Server, we didn&amp;#39;t have to modify anything in the code of our web applications, we just made sure that there were no errors and the new server infrastructure was ready for the website migration.&lt;/p&gt;
&lt;p&gt;I estimated this phase to take 3 days, but it actually took 2 working days.&lt;/p&gt;
&lt;h1 id=&quot;phase-1-preparing-for-moving-the-domain-name&quot;&gt;Phase 1: preparing for moving the domain name&lt;/h1&gt;
&lt;p&gt;With our dedicated server package we&amp;#39;ve got full control over two DNS servers, so the first step was to create four DNS records:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A record for ourdomain.co.uk pointing to the new server IP address&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A record for &lt;a href=&quot;http://www.ourdomain.co.uk&quot; rel=&quot;nofollow&quot;&gt;&lt;a href=&quot;http://www.ourdomain.co.uk&quot;&gt;http://www.ourdomain.co.uk&lt;/a&gt;&lt;/a&gt; pointing to the new server IP address&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A record for mail.ourdomain.co.uk pointing to the old mail server IP address&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then DNS propagation period kicked in - during ~48 hours (TTL for &lt;strong&gt;.co.uk&lt;/strong&gt; TLD is 172800 seconds) all the DNS servers in the world were copying the information.&lt;/p&gt;
&lt;p&gt;This phase took us an hour.&lt;/p&gt;
&lt;h1 id=&quot;phase-2-preparing-to-move-the-data&quot;&gt;Phase 2: preparing to move the data&lt;/h1&gt;
&lt;p&gt;As we had to wait at least 48 hours before we could change the &lt;strong&gt;NS records&lt;/strong&gt; for our domain name, we took our time to prepare a migration plan for the SQL server data. As we had users committing data to our SQL server all the time, we decided that the only possible way to migrate the server was at night.&lt;/p&gt;
&lt;p&gt;The simplest way to move data from one SQL Server to another is to do a full backup on the old server and restore it on the new one. We measured that backup-upload-restore sequence took up to 2 hours, so we decided to down the website for two hours on a Friday night to move the SSL key and SQL Server data.&lt;/p&gt;
&lt;p&gt;This phase had been estimated as 4 hours task and it took exactly 4 :)&lt;/p&gt;
&lt;h1 id=&quot;phase-3-moving-the-sql-server-data&quot;&gt;Phase 3: moving the SQL Server data&lt;/h1&gt;
&lt;p&gt;On one Friday night we stopped clients from commiting data to the old SQL server and moved the data. Here&amp;#39;s the procedure we followed:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;We created a custom error page with the &amp;ldquo;maintenance&amp;rdquo; message on the old server&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;changed SQL connection strings on the old server webapps configuration files to point to an inexistant SQL Server address, so if any client tried to write data to the SQL server, he was shown the custom error page&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;did a backup of the data, uploaded it to the new dedicated server and ran the import&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;changed SQL connection strings in the configuration files on the &lt;em&gt;new server&lt;/em&gt; to point to the new SQL server&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;changed SQL connection strings in the configuration files on the &lt;em&gt;old server&lt;/em&gt; to point to the new SQL server, so all the clients coming to the old site would still get their data saved to the new SQL Server&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;disable HTTPS on the old server&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;exported SSL key from the old server, uploaded and imported to the new one&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This phase took us 3 hours. While the third task was in progress clients could&amp;#39;t place an order or post a message on the forum. This third task took nearly two hours but as soon as it was finished and task 4 and 5 were done, normal work of the website was restored and clients could save data and it was committed to the new SQL Server, so actual downtime was ~2 hours due to SQL data transfer process.&lt;/p&gt;
&lt;p&gt;Also during this step we disabled HTTPS on the old webserver and moved the SSL key to the new one.&lt;/p&gt;
&lt;h1 id=&quot;phase-4-final-steps&quot;&gt;Phase 4: final steps&lt;/h1&gt;
&lt;p&gt;To summarise the state at the time when Phase 3 is completed:&lt;/p&gt;
&lt;p&gt;Old host has the following configuration:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;DNS servers have the following records:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A record for ourdomain.co.uk pointing to the IP address of the old webserver&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A record for &lt;a href=&quot;http://www.ourdomain.co.uk&quot; rel=&quot;nofollow&quot;&gt;&lt;a href=&quot;http://www.ourdomain.co.uk&quot;&gt;http://www.ourdomain.co.uk&lt;/a&gt;&lt;/a&gt; pointing to the IP address of the old webserver&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A record for mail.ourdomain.co.uk pointing to the IP address of the old mail server&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;MX record for mail.ourdomain.co.uk&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SQL connection strings in the configuration files point to the new SQL server so data gets saved there&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;mail is sent through mail.ourdomain.co.uk which according to the DNS settings on all the DNS servers point to the IP address of the old mail server&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;https is disabled&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And the new host:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;DNS servers have the following records:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A record for ourdomain.co.uk pointing to the IP address of the new webserver&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A record for &lt;a href=&quot;http://www.ourdomain.co.uk&quot; rel=&quot;nofollow&quot;&gt;&lt;a href=&quot;http://www.ourdomain.co.uk&quot;&gt;http://www.ourdomain.co.uk&lt;/a&gt;&lt;/a&gt; pointing to the IP address of the new webserver&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A record for mail.ourdomain.co.uk pointing to the IP address of the old mail server&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;MX record for mail.ourdomain.co.uk&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SQL connection strings in the configuration files point to the new SQL server&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;mail is sent through mail.ourdomain.co.uk i.e. through the old mail server&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;https is enabled and uses the imported certificate for our domain name&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On this step we changed NS records for our domain name to be the new DNS servers. During next 48 hours DNS changes were propagating throughout the world and we were noticing as clients were starting to visit our new webserver. Wherever a client came to, his data was stored in the new SQL Server and emails were sent through the old mail server; but only if he came to the new webserver, he could use HTTPS.&lt;/p&gt;
&lt;p&gt;Then we started Exchange integration process which I&amp;#39;m going to cover in one of the next posts.&lt;/p&gt;
&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;/h1&gt;
&lt;p&gt;We tried to have as less downtime as possible and we achieved the goal without any additional investments.&lt;/p&gt;
&lt;p&gt;During the process we had complete downtime (when clients couldn&amp;#39;t put orders) only of 2 hours during the SQL migration and up to 48 hours when HTTPS was disabled on the old server (but for the UK clients DNS propagation took less than a day - we changed NS records on Friday night and had first clients coming to the new webserver on Saturday morning!).&lt;/p&gt;
&lt;p&gt;Actually we could migrate the website without any downtime at all and that would require two additional steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Obtain a separate SSL license for Load Balancing, this would allow us not to have any HTTPS downtime - the certificate for our domain name would be installed on both servers. But this means that we would lose the money we paid for this license as soon as the migration process is finished.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Set MSSQL mirroring so that both SQL servers synchronise transparently, in which case we wouldn&amp;#39;t have a downtime of two hours when clients could&amp;#39;t place orders. This wasn&amp;#39;t possible with our old virtual hosting.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        </entry>
    
        <entry>
            <title>rel=&quot;canonical&quot;</title>
            <link href="/posts/2009-04-canonical.html"/>
            <updated>2009-04-01T00:00:00.000Z</updated>
            <id>/posts/2009-04-canonical.html</id>
            <content type="html">&lt;p&gt;I recently found out a very useful SEO stuff supported by Google (&lt;a href=&quot;http://googlewebmastercentral.blogspot.com/2009/02/specify-your-canonical.html&quot;&gt;here&lt;/a&gt;), Microsoft Live Search (&lt;a href=&quot;http://blogs.msdn.com/webmaster/archive/2009/02/12/partnering-to-help-solve-duplicate-content-issues.aspx&quot;&gt;here&lt;/a&gt;), Yahoo (&lt;a href=&quot;http://blog.ask.com/2009/02/ask-is-going-canonical.html&quot;&gt;here&lt;/a&gt;) and Ask.com ( &lt;a href=&quot;http://ysearchblog.com/2009/02/12/fighting-duplication-adding-more-arrows-to-your-quiver/&quot;&gt;here&lt;/a&gt;) – canonical links.&lt;/p&gt;
&lt;p&gt;Basically, if you have a page accessible by multiple URLs, from search engine’s prospective you’re bloating its database by serving duplicate content. So to avoid this, you have to set &lt;code&gt;&amp;lt;link rel=&amp;quot;canonical&amp;quot; href=&amp;quot;...&amp;quot;&amp;gt;&lt;/code&gt; with &lt;code&gt;href&lt;/code&gt; pointing to the original URL of this page. Search engines will check the url in href attr and won’t put a duplicate content penalty on your pages.&lt;/p&gt;
&lt;p&gt;Useful thing to remember and use!&lt;/p&gt;
&lt;p&gt;WordPress (&lt;a href=&quot;http://wordpress.org/extend/plugins/canonical/&quot;&gt;here&lt;/a&gt;) and RoR (
&lt;a href=&quot;http://github.com/mbleigh/canonical-url/tree/master&quot;&gt;here&lt;/a&gt;) have already got plugins for canonical URL support. Hope to see support for this useful rel in other frameworks, forum and blog engines.&lt;/p&gt;
&lt;p&gt;And I just found an &lt;a href=&quot;http://annevankesteren.nl/2009/04/rev-canonical&quot;&gt;interesting post on this topic&lt;/a&gt; by Anne van Kesteren with interesting discussion going in comments.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Common Internet Scheme Syntax</title>
            <link href="/posts/2009-04-commoninternetscheme.html"/>
            <updated>2009-04-01T00:00:00.000Z</updated>
            <id>/posts/2009-04-commoninternetscheme.html</id>
            <content type="html">&lt;p&gt;I&amp;#39;ve recently read an &lt;a href=&quot;http://bolknote.ru/2009/04/04/~2074&quot;&gt;extremely interesting post&lt;/a&gt; on &lt;a href=&quot;http://bolknote.ru/&quot;&gt;bolknote.ru&lt;/a&gt; about &amp;quot;Common Internet Scheme Syntax&amp;quot;.&lt;/p&gt;
&lt;p&gt;You may have already faced quite a common problem of setting absolute URIs to a resource on a page that must be accessed by both HTTPS and HTTP schemes.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://tools.ietf.org/html/rfc1738&quot;&gt;RFC 1738&lt;/a&gt; Common Internet Scheme Syntax section states the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;While the syntax for the rest of the URL may vary depending on the particular scheme selected, URL schemes that involve the direct use of an IP-based protocol to a specified host on the Internet use a common syntax for the scheme-specific data:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;**//&amp;lt;user&amp;gt;:&amp;lt;password&amp;gt;@&amp;lt;host&amp;gt;:&amp;lt;port&amp;gt;/&amp;lt;url-path&amp;gt;**&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So you don’t actually have to specify HTTP or HTTPS scheme, you just put two slashes and browser adds the current scheme automatically!&lt;/p&gt;
&lt;p&gt;I tested this URL notation in the following browsers – IE3, IE4, IE5.0, IE501, IE5.5, IE6, IE7, IE8, FF2, FF3.0.8, Opera 8.5, Opera 9, Opera 10, Google Chrome (current version) – and it works fine in all of them!&lt;/p&gt;
&lt;p&gt;You can test it yourself – here’s &lt;a href=&quot;http://sharovatov.ru/testcases/schemeTest.html&quot;&gt;the testcase&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;As you may see, the URL is set without a scheme and your browser silently adds the current scheme. If you change http to https in your address, you’ll see that the scheme in dummy.html page URL will change to https!&lt;/p&gt;
&lt;p&gt;It’s interesting to note that &lt;a href=&quot;http://tools.ietf.org/html/rfc3986#section-3.1&quot;&gt;RFC 3986 (URI Generic Syntax)&lt;/a&gt; says that &lt;strong&gt;scheme&lt;/strong&gt; part is required:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Each URI begins with a scheme name that refers to a specification for assigning identifiers within that scheme. As such, the URI syntax is a federated and extensible naming system wherein each scheme&amp;#39;s specification may further restrict the syntax and semantics of identifiers using that scheme.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;but it also mentions Common Internet Syntax notation in the &lt;a href=&quot;http://tools.ietf.org/html/rfc3986#section-4.2&quot;&gt;Relative Reference&lt;/a&gt; section:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;A relative reference that begins with two slash characters is termed a network-path reference; such references are rarely used&lt;/strong&gt;. A relative reference that begins with a single slash character is termed an absolute-path reference. A relative reference that does not begin with a slash character is termed a relative-path reference.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;However, I don’t think that any browser vendor will stop support for this functionality as it’s quite useful and there’s no problem in supporting it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UPDATE&lt;/strong&gt;: Google and Nigma.ru said their robots would follow and index such a link.&lt;/p&gt;
&lt;h1 id=&quot;common-internet-scheme-syntax-detailed-post&quot;&gt;Common Internet Scheme Syntax – detailed post&lt;/h1&gt;
&lt;p&gt;Now I’d like to describe in detail why and when abovementioned approach is extremely useful.&lt;/p&gt;
&lt;h2 id=&quot;problem&quot;&gt;Problem&lt;/h2&gt;
&lt;p&gt;If you serve CSS/JS or images from a domain that’s different to the domain of your page, and the page must be accessed from both HTTP and HTTPS, you must’ve already been thinking about this – what protocol scheme to set for these links? HTTP or HTTPS?&lt;/p&gt;
&lt;p&gt;If you set your links’ URLs with HTTP scheme, and the page is accessed over HTTPS, all the resources are suddenly in a non-secure zone. Browsers behave differently, but they warn user in some way that the page contains non-secure content. Here’s &lt;a href=&quot;https://www.allrussiantrains.com/schemeTestAdvanced.html&quot;&gt;the testcase&lt;/a&gt;. As you may see, testcase link points to HTTPS resource on allrussiantrains.com domain. This testcase has &lt;strong&gt;IMG&lt;/strong&gt;, &lt;strong&gt;LINK type=&amp;quot;text/css&amp;quot;&lt;/strong&gt;, &lt;strong&gt;SCRIPT&lt;/strong&gt; and &lt;strong&gt;A&lt;/strong&gt; elements pointing to a HTTP locations on &lt;strong&gt;sharovatov.ru&lt;/strong&gt; domain.&lt;/p&gt;
&lt;p&gt;So if we have HTTP urls on the page that’s served through SSL, we face &lt;strong&gt;the problem of “mixed content security warnings”&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;IE7 shows a &lt;strong&gt;Security Information&lt;/strong&gt; warning asking user if he wants to display non-secure
content:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;non-secure content security warning in IE&quot; src=&quot;http://sharovatov.ru/screenshots/securityWarning.gif&quot;&gt;&lt;/p&gt;
&lt;p&gt;If user presses Yes, all the elements are loaded.&lt;/p&gt;
&lt;p&gt;If user presses No, all the elements are not loaded at all.&lt;/p&gt;
&lt;p&gt;Firefox 3.0.8 silently loads HTTP-referenced content, but shows a small icon in the right-hand corner:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;security warning in FF&quot; src=&quot;http://sharovatov.ru/screenshots/securityWarning-FF.gif&quot;&gt;&lt;/p&gt;
&lt;p&gt;Firefox also changes the address bar as if the connection isn’t secured by SSL, indicating user that the browser is displaying mixed content:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://sharovatov.ru/screenshots/securityWarningAddressBar-FF.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;Compare it to normal address bar interface when secure page is shown:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://sharovatov.ru/screenshots/noSecurityWarningAddressBar-FF.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;Opera 9.62 silently loads HTTP-referenced content, but shows a question mark icon in the address bar:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://sharovatov.ru/screenshots/securityWarningAddressBar-OP.gif&quot;&gt;&lt;/p&gt;
&lt;p&gt;Compare it to the normal address bar when secure page is shown:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://sharovatov.ru/screenshots/noSecurityWarningAddressBar-OP.gif&quot;&gt;&lt;/p&gt;
&lt;p&gt;Google Chrome does a similar thing – displays non-secure content, but shows an icon in the address bar:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://sharovatov.ru/screenshots/securityWarningAddressBar-GG.gif&quot;&gt;&lt;/p&gt;
&lt;p&gt;Compare to the normal secure address bar:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://sharovatov.ru/screenshots/noSecurityWarningAddressBar-GG.gif&quot;&gt;&lt;/p&gt;
&lt;p&gt;So all the browsers &lt;strong&gt;in a very obvious way&lt;/strong&gt; alert user that the page has mixed content, and IE even fires an alert. This is clearly not suitable for public websites.&lt;/p&gt;
&lt;h1 id=&quot;popular-solutions&quot;&gt;Popular solutions&lt;/h1&gt;
&lt;p&gt;Usually people solve this problem by setting all the links to be HTTPS. So whichever way the page is accessed – either by HTTP or HTTPS, all the content is served through HTTPS channel.&lt;/p&gt;
&lt;p&gt;This is generally OK, but still couple of issues bother me:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;HTTPS loads server’s CPU as all the traffic must be encrypted&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;HTTPS content is not cached by default&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So though setting all links to HTTPS won’t cause clients any problems, it will increase server load.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Another way around is to change scheme in the URLs dynamically by a server-side language based on current scheme of the requested page&lt;/strong&gt;. But what if you have a static html file? Then you have to edit links’ URLs in javascript. Well, in any way, changing links schemes is right a kerfuffle! :)&lt;/p&gt;
&lt;p&gt;And if you @import some CSS files or serve background images from a different domain, you’ll have to dynamically parse CSS in order to change URL scheme in all @import rules and background-image url’s. Which isn’t always a bad thing, but as your CSS file will be dumped into response stream by your favourite scripting language, default &lt;strong&gt;HTTP conditional GET caching mode &lt;/strong&gt;will stop working (while it’s supported and working perfectly fine for static files in all web servers). So you will have to either reinvent the wheel and support caching in your CSS-parsing script, or live with the fact that your CSS is going to be fetched every time your page’s loaded.&lt;/p&gt;
&lt;h1 id=&quot;proposed-solution&quot;&gt;Proposed solution&lt;/h1&gt;
&lt;p&gt;We’ve got a better option!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://tools.ietf.org/html/rfc1738&quot;&gt;RFC 1738&lt;/a&gt; Common Internet Scheme Syntax section states the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;While the syntax for the rest of the URL may vary depending on the particular scheme selected, URL schemes that involve the direct use of an IP-based protocol to a specified host on the Internet use a common syntax for the scheme-specific data:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;**//&amp;lt;user&amp;gt;:&amp;lt;password&amp;gt;@&amp;lt;host&amp;gt;:&amp;lt;port&amp;gt;/&amp;lt;url-path&amp;gt;**&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And &lt;a href=&quot;http://tools.ietf.org/html/rfc3986#section-4.2&quot;&gt;RFC 3986 follows&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;A relative reference that begins with two slash characters is termed a network-path reference; such references are rarely used&lt;/strong&gt;. A relative reference that begins with a single slash character is termed an absolute-path reference. A relative reference that does not begin with a slash character is termed a relative-path reference.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So you don’t need to specify HTTP or HTTPS scheme, you just put two slashes and browser adds the current scheme automatically!&lt;/p&gt;
&lt;p&gt;I tested this URL notation in the following browsers – IE3, IE4, IE5.0, IE501, IE5.5, IE6, IE7, IE8, FF2, FF3.0.8, Opera 8.5, Opera 9, Opera 10, Google Chrome (current version) – and it works fine in all of them!&lt;/p&gt;
&lt;p&gt;You can test it yourself – here’s &lt;a href=&quot;http://sharovatov.ru/testcases/schemeTest.html&quot;&gt;the testcase&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;As you may see, the URL is set without a scheme and your browser silently adds the current scheme of the loaded page, be it HTTP or HTTPS! If you change HTTP to HTTPS in your address, you’ll see that the scheme in dummy.html page URL will change to HTTPS!&lt;/p&gt;
&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;So, if you use “&lt;strong&gt;General Internet Syntax Scheme&lt;/strong&gt;” URL syntax, you’ll achieve the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;you won’t have to care about URL schemes in CSS @import and background-image rules – you just put &lt;code&gt;@import &amp;quot;//externalsite.com/stylesheet.css&amp;quot;&lt;/code&gt; or &lt;code&gt;#someElement { background-image: url(//externalsite.com/someBG.jpg); }&lt;/code&gt; and your browser automatically puts current URL scheme and fetches the corresponding resource.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;you won’t have to parse CSS to change the URL scheme, and therefore you won’t break default HTTP Conditional GET caching mode, so your CSS will be perfectly cached as they remain static files&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;you won’t have to mess with URL scheme in your JS-files, so you won’t have to parse your js-files and change URLs in them&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;you won’t need to rewrite IMG URLs on all your pages!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Plus Google said their robot would happily parse, index and follow such links (of course, with HTTP scheme).&lt;/p&gt;
&lt;p&gt;I also asked MSN Live Search Team about that – hope they reply soon – I’ll update the post.&lt;/p&gt;
&lt;p&gt;So – use this approach if you have a page which is accessed by both HTTP and HTTPS and whenever you need to reference any resource from a different host on this page. Plus this host must support both HTTP and HTTPS :)&lt;/p&gt;
&lt;p&gt;McAffee SiteScan button uses this in their image - &lt;strong&gt;check!&lt;/strong&gt;&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Embedded fonts</title>
            <link href="/posts/2009-04-embeddedfonts.html"/>
            <updated>2009-04-01T00:00:00.000Z</updated>
            <id>/posts/2009-04-embeddedfonts.html</id>
            <content type="html">&lt;p&gt;Long long ago (before IE4, yes, IE4) Microsoft  proposed a standard called EOT (&lt;a href=&quot;http://en.wikipedia.org/wiki/Embedded_OpenType&quot;&gt;Embedded OpenType&lt;/a&gt;) which allowed you to embed any font on your website – all you had to do was to prepare eot fonts in a free &lt;a href=&quot;http://www.microsoft.com/typography/web/embedding/weft3/overview.aspx&quot;&gt;WEFT tool&lt;/a&gt; (see &lt;a href=&quot;http://www.sean.co.uk/a/webdesign/embedding_fonts_in_webpages.shtm&quot;&gt;nice how-to&lt;/a&gt;) and then reference them in your CSS:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@font-face {
    font-family: myFont;
    src: url(myfont.eot);
}
h1 { font-family: myFont; }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It’s interesting to know that support for @font-face property appeared in &lt;a href=&quot;http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#font-descriptions&quot;&gt;CSS2.0&lt;/a&gt; without specifying of font format, then was suddenly dropped in &lt;a href=&quot;http://www.w3.org/TR/CSS21/fonts.html&quot;&gt;CSS2.1&lt;/a&gt; and now is back in &lt;a href=&quot;http://www.w3.org/TR/css3-webfonts/#font-descriptions&quot;&gt;CSS3&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And now, 10 years later after this feature has been introduced in IE4, all other browsers are slowly starting to implement embedded fonts support. As always, browser vendors talk about compatibility more than actually support this compatibility – while the technology is 10 years old and quite mature, none of popular browsers supports or plans to support EOT – only IE.&lt;/p&gt;
&lt;p&gt;And this silent boycott of EOT looks extremely weird because EOT has got a unique feature – font file in this format can be much smaller than a TTF/OTF file due to subsetting. And EOT is not proprietary any more – &lt;a href=&quot;http://www.w3.org/Submission/2008/SUBM-EOT-20080305/&quot;&gt;Microsoft has submitted it to W3C&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The only reason browser vendors say stops them from implementing EOT is DRM, but:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;as &lt;a href=&quot;http://novemberborn.net/sifr3/web-fonts-eot&quot;&gt;Mark Wubben says&lt;/a&gt;, using OTF/TTF can be violating fonts EULA while EOT was &lt;strong&gt;designed to follow &lt;/strong&gt;the rules.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;there&amp;#39;re free fonts that can be embedded.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And it’s really funny to read rants &lt;a href=&quot;http://diveintomark.org/archives/2009/04/21/fuck-the-foundries&quot;&gt;like this&lt;/a&gt; – if there’s a law, you can’t just violate it because you think it’s too hard to follow it.&lt;/p&gt;
&lt;p&gt;And while browser vendors pretend they don’t see the industry standard implementation of the technology, we’ll have to use something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@font-face {
    font-family: myFont;
    src: url(font.eot);
}
@font-face {
    font-family: myFont;
    src: url(font.ttf) format(&amp;quot;truetype&amp;quot;),
    url(font.eot) format(&amp;quot;embedded-opentype&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I.e. set the @font-face twice – for IE and other browsers. More crap for us, developers. Thanks to Opera, Mozilla and Safari.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update: &lt;/strong&gt;Thanks to Philip Taylor, author of great &lt;a href=&quot;http://fonts.philip.html5.org/&quot;&gt;web fonts application&lt;/a&gt;, he pointed in comments that I was wrong saying that TTF/OTF didn’t support subsetting – they did! But my point is still the same – why inventing other standards when there’s a working one?&lt;/p&gt;
&lt;p&gt;Links:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Embedded_OpenType&quot;&gt;Wikipedia article about EOT&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://fonts.philip.html5.org/&quot;&gt;Nice webapp that generates EOT files from free opentype fonts&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://talleming.com/2009/04/21/web-fonts/&quot;&gt;Web fonts from font author prospective&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.w3.org/Fonts/Misc/eot-report-2008&quot;&gt;EOT report&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://novemberborn.net/sifr3/web-fonts-eot&quot;&gt;Excellent article by Mark Wubben (novemberborn) discussing license issues&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        </entry>
    
        <entry>
            <title>Microsoft Exchange 2010</title>
            <link href="/posts/2009-04-exchange2010.html"/>
            <updated>2009-04-01T00:00:00.000Z</updated>
            <id>/posts/2009-04-exchange2010.html</id>
            <content type="html">&lt;p&gt;Wow, I’m now listening to the web-conference about Microsoft Exchange 2010 Beta, and it seems that it’s going to be cool!&lt;/p&gt;
&lt;p&gt;Useful links:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://technet.microsoft.com/en-us/library/bb124558(EXCHG.140).aspx&quot;&gt;official documentation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.microsoft.com/downloads/details.aspx?FamilyID=1898ED2C-2F88-48AC-824E-D3D20FAD77D7&amp;amp;DisplayLang=en&quot;&gt;download link&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://technet.microsoft.com/en-us/exchange/2010/default.aspx&quot;&gt;official Microsoft Exchange 2010 page&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://technet.microsoft.com/ru-ru/library/bb125040(en-us,EXCHG.140).aspx&quot;&gt;new Exchange Core Store Functionality&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Interesting facts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;no more storage groups – databases are now just files which as far as I understand can be easily transferred to another server. I think, Exchange will soon start using MS SQL Server as a storage engine.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;it’s highly integrated with Powershell&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Exchange 2010 will have a way to migrate certain mailboxes to a cloud!!! That’s just SO WAY interesting! It means that you can have some mailboxes in your storage. Say, if you’re concerned about security and want your sales mailbox to be stored locally, while you don’t care if your employees’ mailboxes are located somewhere in the cloud – so you save storage space and don’t have to have a serious big server. Another interesting usecase is server maintenance – you can temporarily move your mailboxes to a cloud and then move it back! Really really interesting technology!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Outlook Web Access will now be called &lt;strong&gt;Outlook Live&lt;/strong&gt; – I bet there’s going to be a whole new layer of integration of Microsoft products!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Exchange Web-Access (Outlook Live) has been rebuilt and now works fine in Firefox – Microsoft spent time on fixing Web-Access work in IE,FF and Safari.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Exchange Web Access (Outlook Live) now has Favourites – similar as what we have in Outlook&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Exchange Web Access (Outlook Live) will have multilingual spellchecking!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can create mailboxes and change user details right from the Exchange Web Access (Outlook Live)!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I’ve found &lt;a href=&quot;http://www.hrizns.com/blogs/nbe/default.aspx&quot;&gt;an interesting blog&lt;/a&gt; about Exchange 2010, hope Gary Cooper will continue posting on the topic!&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>designMode and Firefox</title>
            <link href="/posts/2009-04-fxdesignmode.html"/>
            <updated>2009-04-01T00:00:00.000Z</updated>
            <id>/posts/2009-04-fxdesignmode.html</id>
            <content type="html">&lt;p&gt;Another weird bug reported back in 2004 and unfortunately still not resolved – &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=232791&quot;&gt;bug 232791&lt;/a&gt;, marked as a dup for &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=474255&quot;&gt;bug 474255&lt;/a&gt; (testcase &lt;a href=&quot;https://bug232791.bugzilla.mozilla.org/attachment.cgi?id=187018&quot;&gt;here&lt;/a&gt; – if you click on the editable window, neither delete nor backspace button works, and if you add a character, it springs back to life). When you work with wysiwyg editor in Firefox (&lt;a href=&quot;http://kb.mozillazine.org/Firefox_:_Midas&quot;&gt;MIDAS&lt;/a&gt;), and programmatically add a text node to the end of the editable document, Firefox creates a dumb BR node of type &lt;code&gt;_moz&lt;/code&gt; with &lt;code&gt;_moz_editor_bogus_node&lt;/code&gt; attribute.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=232791#c8&quot;&gt;Yuh-Ruey Chen proposed&lt;/a&gt; a workaround – you set designMode to &amp;#39;off&amp;#39; and then back to &amp;#39;on&amp;#39; and it works, and this approach is used in YUI library (see &lt;a href=&quot;http://yuilibrary.com/projects/yui2/ticket/1946017&quot;&gt;ticket 1946017&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The weird thing I noticed now in FF 3.0.8 is that while the bug is still not fixed, the bogus BR node is not visible through Firebug for some reason! And that’s strange – node’s invisible, but still there.&lt;/p&gt;
&lt;p&gt;However, workaround still works so nothing to worry about, just interesting.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>HTTP Chunked Encoding</title>
            <link href="/posts/2009-04-httpchunked.html"/>
            <updated>2009-04-01T00:00:00.000Z</updated>
            <id>/posts/2009-04-httpchunked.html</id>
            <content type="html">&lt;p&gt;Did you notice that some pages on the internet start rendering in your browser incrementally, block after block, and on some sites you have to sit and look at the white screen and then get the full page in one second?&lt;/p&gt;
&lt;p&gt;There’re two main problems that can make your browser wait for the whole page to load before it starts parsing it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;if you’re using IE6 and the page you’re viewing has table-based layout without COLGROUPs/COLs specifying width or &lt;code&gt;table-layout: fixed&lt;/code&gt; CSS rule.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;if the page’s not being served from server using chunked encoding.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first issue is really simple – IE6 has to know the exact width of the columns before it starts displaying the table, and if you have &lt;code&gt;table-layout: fixed&lt;/code&gt; rule for the table or COLs with specified width – it will wait for the whole content to load, calculate the width and only then display the table. Other browsers (such as Opera, Firefox, Google Chrome) and newer versions of IE don’t have this issue and start displaying content right after they get at least a piece of it.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc2616.txt&quot;&gt;So while the first issue is really simple, the second is definitely more interesting!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Normally when HTTP client receives a response, it parses HTTP headers and then tries to read from the input the exact amount of bytes as specified in Content-Length header. So if it takes 3 seconds for the server-side script to prepare the page, HTTP client (and the user!) will be just waiting with opened connection for these seconds.&lt;/p&gt;
&lt;p&gt;What was OK at the time when HTTP1.0 was invented and the web had almost only static content, authors of HTTP1.1 thought was inacceptable for era of web applications.&lt;/p&gt;
&lt;p&gt;And &lt;a href=&quot;http://www.ietf.org/rfc/rfc2616.txt&quot;&gt;HTTP 1.1 Spec&lt;/a&gt; introduces a concept of &amp;quot;Chunked&amp;quot; transfer encoding:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The chunked encoding modifies the body of a message in order to transfer it as a series of chunks, each with its own size indicator, followed by an OPTIONAL trailer containing entity-header fields.&lt;/p&gt;
&lt;p&gt;This allows dynamically produced content to be transferred along with the information necessary for the recipient to verify that it has received the full message&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The main goal of HTTP Chunked Encoding is to allow clients to parse and display data immediately after the first chunk is read!&lt;/p&gt;
&lt;p&gt;Here&amp;#39;s a sample of HTTP response with chunked encoding:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    HTTP/1.1 200 OK
    Transfer-Encoding: chunked
    Content-Type: text/html

    c
    &amp;lt;h1&amp;gt;go!&amp;lt;/h1&amp;gt;

    1b
    &amp;lt;h1&amp;gt;first chunk loaded&amp;lt;/h1&amp;gt;

    2a
    &amp;lt;h1&amp;gt;second chunk loaded and displayed&amp;lt;/h1&amp;gt;

    29
    &amp;lt;h1&amp;gt;third chunk loaded and displayed&amp;lt;/h1&amp;gt;

    0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you may see, there’s no Content-Length field in the beginning of the message, but there’s a hexadecimal chunk-size before every chunk. And 0 with two CRLFs specifies the end of the payload.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So the server doesn’t need to calculate Content-Length before it starts serving data to client. &lt;/strong&gt;This is an amazing functionality! It means that the server can start sending the first part of the response while still processing the other parts of it.&lt;/p&gt;
&lt;p&gt;Say, you have a dynamic page with two elements, both of which are queried from the database.&lt;/p&gt;
&lt;p&gt;So you can either wait for both queries to finish, populate your template with results and send the whole page to client, or you can get first query result, send it in one chunk to the client, then do the next query and send its results in another chunk. You may not notice the difference between chunked and normal serving mode in most of the cases – but if the page is created from different sources or it takes significant time to prepare the data – user experience may be seriously improved.&lt;/p&gt;
&lt;p&gt;Before the widespread popularization of AJAX (another Microsoft-invented technology) – Chunked Encoding was used as a core for so-called “&lt;a href=&quot;http://en.wikipedia.org/wiki/Push_technology&quot;&gt;Server Push&lt;/a&gt;” approach for building web-chats and other &lt;em&gt;streaming&lt;/em&gt; purposes. The idea was simple – server didn’t close the HTTP connection and kept on sending chunk after chunk with new messages or other data. This approach had serious drawbacks – e.g. for each new client server had to instantiate a new connection (which eats resources), browsers had a limit on waiting time, so the page had to be reloaded once in a while and so on. But anyway, Chunked Encoding was widely used.&lt;/p&gt;
&lt;p&gt;In my company we use Chunked Encoding to show loading progressbar in our &lt;a href=&quot;http://www.realrussia.co.uk/main_train_screen.asp&quot;&gt;online train tickets ordering system&lt;/a&gt; – we
serve the first chunk with nicely styled &lt;code&gt;&amp;lt;div id=”loading”&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt; and when the data for the main table is ready, we serve it in the second chunk. And after the document is fully loaded, javascript routine hides &lt;code&gt;&amp;lt;div id=”loading”&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt; :) Simple and nice.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Weird bug with hiding columns in IE7</title>
            <link href="/posts/2009-04-ie7weirdcolbug.html"/>
            <updated>2009-04-01T00:00:00.000Z</updated>
            <id>/posts/2009-04-ie7weirdcolbug.html</id>
            <content type="html">&lt;p&gt;Sometimes when you create a table, you need to dynamically toggle certain columns visibility. I usually use the following approach:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Set those columns that are supposed to be hidden and shown with a className, e.g. &lt;code&gt;tohide&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Set their parent with some className, say, &lt;code&gt;hiddenChildren&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Define the following CSS rule: &lt;code&gt;.&lt;/code&gt;hiddenChildren &lt;code&gt;.tohide { display: none }&lt;/code&gt;, which basically says that if there is a parent node with &lt;code&gt;className=&amp;quot;hiddenChildren&amp;quot;&lt;/code&gt; and it has child nodes with &lt;code&gt;className=&amp;quot;tohide&amp;quot;&lt;/code&gt;, all these child nodes will be hidden.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When I need to show cells, I remove this &lt;code&gt;hiddenChildren&lt;/code&gt; class from parent’s className, and when I need to hide them again, I add it back.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is a very common scenario and it’s much more efficient than the approach where you go through all the elements in javascript and toggle their personal display mode.&lt;/p&gt;
&lt;p&gt;There’s also an &lt;em&gt;inverted&lt;/em&gt; approach where by default elements are hidden and assigned class specifies &lt;em&gt;positive&lt;/em&gt; display – &lt;code&gt;table-cell&lt;/code&gt; for CSS2.1-compliant browsers and &lt;code&gt;block&lt;/code&gt; for IE6. But my approach is better as it’s cleaner – there’s no need for IE6-specific code (usually assigned by star hack).&lt;/p&gt;
&lt;p&gt;However, in IE7 with both of the approaches the cells’ display is not switched as you may notice by viewing &lt;a href=&quot;http://sharovatov.ru/testcases/hideColumns0.html&quot;&gt;the testcase&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But as in most cases, there’s a workaround – you have to “poke” any TH of your table. In &lt;a href=&quot;http://sharovatov.ru/testcases/hideColumns1.html&quot;&gt;this testcase&lt;/a&gt; I added the following code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/*@cc_on if (!document.querySelector)
    document.getElementsByTagName(&amp;#39;th&amp;#39;)[0].className = &amp;#39;wt2&amp;#39;; 
@*/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;to the toggling function. As you may know, js code within &lt;code&gt;/*@cc_on ... @*/&lt;/code&gt; block will be executed only by IE, and only IE8 has support for &lt;code&gt;document.querySelector&lt;/code&gt; interface, so chances are that this code will be executed only in IE with version earlier than 8, which is precisely what we need (as IE8 doesn&amp;#39;t have this problem).&lt;/p&gt;
&lt;p&gt;It’s interesting to know, that YUI Team in their &lt;a href=&quot;http://developer.yahoo.com/yui/datatable/&quot;&gt;DataTable control&lt;/a&gt; in order to implement hiding/showing functionality choosed to loop through all the cells and set their display individually (see &lt;code&gt;hideColumn&lt;/code&gt;/&lt;code&gt;showColumn&lt;/code&gt; functions &lt;a href=&quot;http://yui.yahooapis.com/2.7.0/build/datatable/datatable.js&quot;&gt;here&lt;/a&gt;). I understand that this is the bulletproof approach ready to use in any environment, but it can be rather ineffective when your table has a significant amount of rows as it will have to go through all the TR’s. And it will do the loop twice if you choose to hide two columns :) Of course, using my approach requires setting classes for those cells that you were going to hide, so it’s not that flexible, but in the controlled environment it’s definitely the best option.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Various IE8 Accelerators - thepiratebay, php.net, pagerank, alexa</title>
            <link href="/posts/2009-04-ie8accels.html"/>
            <updated>2009-04-01T00:00:00.000Z</updated>
            <id>/posts/2009-04-ie8accels.html</id>
            <content type="html">&lt;p&gt;I recently updated to Internet Explorer 8, and it just rocks! One of the new shiny features that’s been added to IE8 is &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/cc289775(VS.85).aspx&quot;&gt;Web Accelerators&lt;/a&gt;. I’ve just written some to make my life easier a bit. Hope you find them handy.&lt;/p&gt;
&lt;p&gt;Search category:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://sharovatov.ru/current.html#accelerators&quot;&gt;Search on thepiratebay&lt;/a&gt;&lt;/strong&gt; – just select any text on the page, wait for Accelerators icon, and click “Search on ThePirateBay” and it wil open you a new tab with search results&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SEO category:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://sharovatov.ru/current.html#accelerators&quot;&gt;Check Google Pagerank&lt;/a&gt;&lt;/strong&gt; of the page by its link – just right-click on any link, go to Accelerators, hover on “Check pagerank” and you’ll get it’s pagerank directly fetched from google.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://sharovatov.ru/current.html#accelerators&quot;&gt;Check Alexa rating&lt;/a&gt;&lt;/strong&gt; of the page by its link – the same instructions – right click on a link, go to Accelerators, hover on “Check Alexa rating” and you’ll see this page’s Alexa rating in a preview window.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://sharovatov.ru/current.html#accelerators&quot;&gt;Check Alexa+pagerank&lt;/a&gt;&lt;/strong&gt; – a little bit more useful Accelerator which combines both alexa and pagerank checks in one accelerator, but is hosted on my server – and again it shows Alexa rating and Google Pagerank on the preview screen.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Web-development:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://sharovatov.ru/current.html#accelerators&quot;&gt;PHP manual for selected property&lt;/a&gt;&lt;/strong&gt; – just select a function name on the page, wait for the Accelerators icon to appear, click on “Search definition on php.net” and you’ll get a page with php.net manual loaded for this function&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://sharovatov.ru/current.html#accelerators&quot;&gt;Validate a page&lt;/a&gt;&lt;/strong&gt; – right click on any link to get the context menu, go to Accelerators and select “Validate a page” and you’ll get w3.org validator checking this link!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Remember, Accelerators work only in IE8, and clicking on these links in other browsers will just show the XML source of accelerators :)&lt;/p&gt;
&lt;p&gt;It took me really half an hour to grasp the manual and write these six accelerators – thanks Microsoft for such an easy and productive platform.&lt;/p&gt;
&lt;p&gt;Some useful links:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Internet_Explorer_8#Accelerators&quot;&gt;http://en.wikipedia.org/wiki/Internet_Explorer_8#Accelerators&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.ieaddons.com/en/accelerators/&quot;&gt;IE Accelerators Gallery&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.labnol.org/software/ie8-accelerator-tutorial/8259/&quot;&gt;How to write an IE8 Accelerator for your website&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://blogs.msdn.com/miah/archive/2008/10/04/ie8-rocks-creating-custom-accelerators.aspx&quot;&gt;Creating custom accelerators&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;P.S. And I&amp;#39;ve just created another one accelerator – “&lt;a href=&quot;http://sharovatov.ru/current.html&quot;&gt;Find broken links on a page&lt;/a&gt;”. It allows you to use W3C links checker utility to quickly check if any of your links on the page are broken – just right click on a page to get the context menu, go to Accelerators and press “&lt;strong&gt;Find broken links&lt;/strong&gt;” :) May be really useful.&lt;/p&gt;
&lt;p&gt;I submitted four of my IE8 accelerators to a IE8 Addons gallery today and now waiting for approval :) Hope they will be approved and I’ll create more!&lt;/p&gt;
&lt;p&gt;P.S. To submit your new Accelerator or Webslice, you need to register at &lt;a href=&quot;http://www.ieaddons.com/gb/Register.aspx&quot;&gt;ieaddons.com&lt;/a&gt;, then go to the Upload page, provide name, description, screenshot and XML of your Accelerator and then wait for the approval :)&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>IE8 - important update!</title>
            <link href="/posts/2009-04-ie8impupd.html"/>
            <updated>2009-04-01T00:00:00.000Z</updated>
            <id>/posts/2009-04-ie8impupd.html</id>
            <content type="html">&lt;p&gt;&lt;a href=&quot;http://blogs.msdn.com/ie/archive/2009/04/10/prepare-for-automatic-update-distribution-of-ie8.aspx&quot;&gt;IE team says that starting from this week IE8 will be distributed as an important update&lt;/a&gt;! Hooray! It will be marked as important update for Vista and Windows Server 2008. Hope most people will install it and we’ll soon forget about IE6 and IE7 :)&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Raphaёl – excellent JS vector graphics library</title>
            <link href="/posts/2009-04-raphael.html"/>
            <updated>2009-04-01T00:00:00.000Z</updated>
            <id>/posts/2009-04-raphael.html</id>
            <content type="html">&lt;p&gt;When you need to create charts or do other graphically-reach stuff in your web application, you’re usually going to choose flash or silverlight, which is fine, but right a kerfuffle! :) I mean, you need to know one more technology while you could achieve nearly the same results just with Javascript and vml/svg.&lt;/p&gt;
&lt;p&gt;And here comes &lt;a href=&quot;http://raphaeljs.com/&quot;&gt;Raphaёl&lt;/a&gt; – awesome javascript library for providing a cross-browser way to operate with vector graphics written by Dmitry Baranovsky. Check out its demos – really impressive and works in all major browsers – IE6+, Firefox 3.0+, Safari 3.0+ and Opera 9.5+; and Safari on iPhone! It leverages VML functionality for IE and SVG for other browsers. While John Resig is still working on his processingjs.com (and it’s not working in IE at the moment), we already have a well-supported and easy-to-use library.&lt;/p&gt;
&lt;p&gt;I did some tests of Raphaёl, and its performance was sufficient to use it in a production environment.&lt;/p&gt;
&lt;p&gt;P.P.S. heh, &lt;a href=&quot;http://en.wikipedia.org/wiki/VML&quot;&gt;VML&lt;/a&gt; is another thing that’s been invented by Microsoft (and Macromedia), then &lt;a href=&quot;http://www.w3.org/TR/1998/NOTE-VML-19980513&quot;&gt;proposed to W3C as a standard&lt;/a&gt;; but W3C has always its own weird way – they decided to create &lt;a href=&quot;http://www.w3.org/Graphics/SVG/&quot;&gt;SVG spec&lt;/a&gt; instead. I mean, really, spend time to spec what’s already been spec’ed so that the new spec doesn’t match the old spec – isn’t it weird?&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Silverlight smooth streaming and HTTP</title>
            <link href="/posts/2009-04-sl-smooth-and-http.html"/>
            <updated>2009-04-01T00:00:00.000Z</updated>
            <id>/posts/2009-04-sl-smooth-and-http.html</id>
            <content type="html">&lt;p&gt;I’ve read about smooth streaming technology, and I must say, I just love the way it works. It automatically and smoothly adjusts video quality and allows clients to view smooth video online regardless of their bandwidth and without a need to sit and wait staring at “buffering” message for ages – what it does it dynamically changes the video quality based on network bandwidth, CPU load and other factors.&lt;/p&gt;
&lt;p&gt;It’s idea and implementation are so simple and beautiful that I wonder why nobody didn’t invent it earlier.&lt;/p&gt;
&lt;p&gt;This is what steps you have to follow to make it work:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;encode your video file in &lt;a href=&quot;http://www.microsoft.com/downloads/details.aspx?FamilyId=A29BE9F9-29E1-4E70-BF67-02D87D3E556E&quot;&gt;Expression Encoder 2 Service Pack 1&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;upload it to IIS7 web server with &lt;a href=&quot;http://www.iis.net/extensions/SmoothStreaming&quot;&gt;IIS7 Smooth Streaming extension&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;point your Silverlight player to the appropriate URL&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That’s it. &lt;a href=&quot;http://smoothhd.com/&quot;&gt;Here’s a showcase&lt;/a&gt; how this technology works – awesome!&lt;/p&gt;
&lt;p&gt;Looks simple, right? It is simple, but there’s a huge amount of work hidden beside this simplicity. Let me dive into technical details a little bit :)&lt;/p&gt;
&lt;p&gt;First of all, let me give you some background. Originally there were basically two types of streaming – stateful streaming and progressive download.&lt;/p&gt;
&lt;p&gt;Good example of stateful streaming is &lt;a href=&quot;http://en.wikipedia.org/wiki/RTSP&quot;&gt;RTSP&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Client had to initiate connection to the server and send commands like PAUSE or PLAY, and server sent back video stream packets, client waited for its playback buffer to be filled with data and started playback. RTSP worked both over UDP and TCP (port 554 was used).&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Progressive_download&quot;&gt;Progressive download&lt;/a&gt; – where client was sending traditional HTTP GET request and server responded with video data sent with use of HTTP chunked encoding, and client started the playback as soon as its playback buffer had enough data to play.&lt;/p&gt;
&lt;p&gt;Both approaches had serious issues – RTSP couldn’t work for clients behind proxies or firewalls without extra efforts (that’s why Apple had to spend time inventing &lt;strike&gt;the wheel&lt;/strike&gt; &lt;a href=&quot;http://developer.apple.com/documentation/QuickTime/QTSS/Concepts/QTSSConcepts.html#//apple_ref/doc/uid/TP30000245-TPXREF143&quot;&gt;tunnelling RTSP over HTTP&lt;/a&gt;), progressive download couldn&amp;#39;t work fine for situation where bandwidth wasn&amp;#39;t good enough – have you had wonderful time sitting and staring at “Buffering” message?&lt;/p&gt;
&lt;p&gt;So if you want to give highest video quality to users on a high bandwidth but still want to show users with low bandwidth at least something &amp;#8211; you’ll create several versions of the same video and give users a way to choose and watch what they want.&lt;/p&gt;
&lt;p&gt;But what if a user doesn’t know what bandwidth he’s got? What if &lt;em&gt;the player itself&lt;/em&gt; could automatically select what video to download – high-res or low-res? What if the player could &lt;em&gt;change bitrate during the playback if network conditions or CPU load changed&lt;/em&gt;? What if the player could instantly start playback from &lt;em&gt;any point of the movie&lt;/em&gt;? And what if pure HTTP was used so that there would be no issues with proxies? What if each chunk of video could be perfectly cached by HTTP agent, such as proxy?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;That’s precisely how Microsoft Silverlight Smooth Streaming works. &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;First of all, Microsoft decided to switch from their ASF format to &lt;a href=&quot;http://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnumber=41828&quot;&gt;MP4&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There were many reasons for that, but the main point is that MP4 container specification allows content to be internally organised as a series of fragments, so-called “boxes”. Each box contains data and metadata, so that if metadata is written before the data, player can have required information about the video before it plays it.&lt;/p&gt;
&lt;p&gt;So what does Expression Encoder do? It allows you to easily create multiple versions of the same video for different bitrates in this fragmented MP4 format. So you get up to 10 versions of the same video file with different resolution – from 320&amp;#215;200 up to 1080 or 720p. Each file internally is split in 2-seconds chunks, each chunk has its own metadata so you can programmatically identify the required chunk. Plus Expression Encoder creates two complimentary files (both follow &lt;a href=&quot;http://www.w3.org/TR/SMIL20/&quot;&gt;SMIL XML standard&lt;/a&gt;) – &lt;em&gt;.ISM – server manifest file, which basically just describes to server which file versions have what bitrates; and &lt;/em&gt;.ISMC, which tells a client what bitrates can be used and how many fragments files have.&lt;/p&gt;
&lt;p&gt;Can you see the idea? &lt;strong&gt;IIS Smooth Streaming extension just maps URL to a chunk in a file.&lt;/strong&gt; You do a HTTP GET request to a URL like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;http://test.ru/mov.ism/QualityLevels(400000)/Fragments(video=61024)&amp;quot;&amp;gt;http://test.ru/mov.ism/QualityLevels(400000)/Fragments(video=61024)&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And IIS Smooth Streaming extension checks “mov.ism” manifest file to find filename of the file with requested quality level (400000), opens and parses this file to get the chunk with requested time offset (61024). Then this chunk is returned to you in a normal HTTP response.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So you can query for any chunk of any one of your video files with the requested time offset.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Let me repeat it – you encoded your original video file into 10 fragmented video files with different bitrate. And you have a way to query for any chunk in any of these files.&lt;/p&gt;
&lt;p&gt;So to play 10 seconds of video you have to do 5 consequent HTTP requests. As we have versions of the same video with different bitrate, we can get first chunk in the worst quality to see how it renders and what time it takes to download it, and then if CPU load is low and network is fast, we can query next 4 chunks with higher bitrate.&lt;/p&gt;
&lt;p&gt;And that’s exactly what Silverlight Media Player component does – it requests chunk by chunk from the server and changes “QualityLevels” parameter in URL if conditions change. For example, if Silverlight Media Player sees that CPU load is too high and it’s dropping frames, or network becomes too slow, it changes “QualityLevels” parameter to a lower value so IIS Smooth Streaming extension serves next chunks from the smaller file with lower video quality.&lt;/p&gt;
&lt;p&gt;Actually, when user starts the playback, first thing that Silverlight Media Player does is a request for ISMC file to find out how many different bitrate versions server has (and how to identify frames). And only then it composes URL to get the first chunk of video. Simple and beautiful technology.&lt;/p&gt;
&lt;p&gt;So what do we have? Video plays smoothly – on old slow internet channels in lower quality and in full HD on fast internet and good CPUs. As HTTP is used as a transport – therefore no issues with proxies or firewalls; as each chunk is identifiable by a unique URL, every single chunk can be perfectly cached by proxies or other HTTP agents.&lt;/p&gt;
&lt;p&gt;And as this technology is quite simple, there’s no doubt that there will be a similar module for other web servers, or even web applications achieving similar functionality!&lt;/p&gt;
&lt;p&gt;Yes, as it’s encoded in multiple bitrate versions, it takes up to 6 times more space for one movie/clip, but if that’s what it takes to provide users with smooth playback in any conditions – I’m for it!&lt;/p&gt;
&lt;p&gt;Thanks for another great technology, IIS Team!&lt;/p&gt;
&lt;p&gt;Links:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a title=&quot;Live Smooth Streaming for IIS 7.0 - Getting Started&quot; href=&quot;http://www.iis.net/learn/media/live-smooth-streaming/getting-started-with-iis-live-smooth-streaming&quot;&gt;Live Smooth Streaming for IIS 7.0 &amp;#8211; Getting Started&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://alexzambelli.com/blog/2009/02/10/smooth-streaming-architecture/&quot;&gt;Smooth Streaming technology infrastructure&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/cc251059(PROT.10).aspx&quot;&gt;Windows Media HTTP Streaming Protocol Specification&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.clarkezone.net/default.aspx?id=6149974c-3ebf-4002-8dd1-e2aecf835eeb&quot;&gt;debugging silverlight smooth streaming applications&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;akamai-supports&quot;&gt;Akamai supports&lt;/h2&gt;
&lt;p&gt;Just noticed that the &lt;a href=&quot;http://smoothhd.com&quot;&gt;smoothhd.com&lt;/a&gt; serves media from AKAMAI &lt;a href=&quot;http://en.wikipedia.org/wiki/Content_Delivery_Network&quot;&gt;CDN&lt;/a&gt; servers!&lt;/p&gt;
&lt;p&gt;Also found that &lt;a href=&quot;http://www.akamai.com/html/about/press/releases/2009/press_031709.html&quot;&gt;AKAMAI has a contract with Microsoft to deliver Smooth Streaming content&lt;/a&gt; – and that’s just great. It means that if you have webcasts or any other video you want to deliver to the maximum audience with any bandwidth and CPUs, Akamai and Silverlight Smooth Streaming would be an ideal solution – you won’t even need to host video files on your servers! Or you can start with streaming from your own server and later if required you can
always seamlessly switch to Akamai.&lt;/p&gt;
&lt;p&gt;And here’re some nice videos from MIX09 (about silverlight) that I’ve found today:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://videos.visitmix.com/MIX09/T19F&quot;&gt;Creating media content for Microsoft Silverlight using Microsoft Expression Encoder&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://videos.visitmix.com/MIX09/T43F&quot;&gt;Microsoft Silverlight Media end-to-end&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As soon as I get my IIS7, I’ll definitely try streaming something :)&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Synchronize posts drafts between laptop and home PC? Easy to do with Windows Live Sync!</title>
            <link href="/posts/2009-04-sync-wlw.html"/>
            <updated>2009-04-01T00:00:00.000Z</updated>
            <id>/posts/2009-04-sync-wlw.html</id>
            <content type="html">&lt;p&gt;Sometimes I write really big blogposts (for example, I’m still not finished with translating my &lt;a href=&quot;http://bitari.blogspot.com/2006/08/blog-post_11.html&quot;&gt;old blogpost about HTTP caching&lt;/a&gt; from Russian) so I save them as local drafts in Windows Live Writer (earlier as docx-files in Microsoft Word 2007). When I go mobile, I have to copy all the drafts and recent posts to my laptop; and if I edit them there – I have to copy drafts back to work PC when I come back home.&lt;/p&gt;
&lt;p&gt;I knew there were tools to help me in synchronizing directories, but only today I had time to try &lt;a href=&quot;https://sync.live.com/&quot;&gt;Windows Live Sync&lt;/a&gt; (formerly called &lt;a href=&quot;http://en.wikipedia.org/wiki/Windows_Live_FolderShare&quot;&gt;Windows Live Foldershare&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Basically it’s just a free tool to synchronize folders on any number of machines sharing the same Windows Live ID. But it’s damn easy to use!&lt;/p&gt;
&lt;p&gt;All I had to do was:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Install Windows Live Sync on both work PC and my laptop&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Signed in to Windows Live Sync website using my Windows Live ID on my work PC and on my laptop&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Created Personal Folder pointing to &lt;strong&gt;My DocumentsMy Weblog Posts&lt;/strong&gt; directory (that’s the place where Windows Live Writer saves drafts and recent posts)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Clicked to add my laptop to a list of devices that will get synchronized, selected &lt;strong&gt;My Documents\My Weblog Posts&lt;/strong&gt; folder there&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And that’s it, both folders were successfully synchronized.&lt;/p&gt;
&lt;p&gt;Now I have most recent versions of my drafts and recent posts on both work PC and my laptop.&lt;/p&gt;
&lt;p&gt;Thanks, &lt;a href=&quot;http://windowslivesync.spaces.live.com/&quot;&gt;WindowsLiveSync Team&lt;/a&gt; :)&lt;/p&gt;
&lt;p&gt;And I’ve just configured and synchronized IE favourites on my work PC and laptop. Just awesome – so easy to do – few clicks and I’m not afraid to loose an important link that I saved when I was travelling!&lt;/p&gt;
&lt;p&gt;I’d highly recommend Live Sync to everyone who has more than one computer running Windows or Mac OS – I’ve never seen a synchronizing tool that would be so easy to use.&lt;/p&gt;
&lt;p&gt;I’m sure I’ll add more and more folders to synchronize – it’s too tempting to have important information in the same state on both machines without any kerfuffle :)&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>startpanic.com and :visited links privacy issue</title>
            <link href="/posts/2009-04-visited.html"/>
            <updated>2009-04-01T00:00:00.000Z</updated>
            <id>/posts/2009-04-visited.html</id>
            <content type="html">&lt;p&gt;Back in April 2008 I was blogging about &lt;a href=&quot;http://sharovatov.wordpress.com/2008/04/06/selectors-api-support-in-ie8b1/&quot;&gt;Selectors API support in IE8 Beta 1&lt;/a&gt; support and mentioned the security concern about &lt;code&gt;:visited&lt;/code&gt; links – &lt;strong&gt;potential privacy theft&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&quot;the-problem&quot;&gt;The problem&lt;/h2&gt;
&lt;p&gt;This concern was risen long ago in &lt;a href=&quot;http://www.w3.org/TR/CSS21/selector.html#link-pseudo-classes&quot;&gt;CSS2.1 Spec&lt;/a&gt; (and also mentioned then in the following specs - 
&lt;a href=&quot;http://www.w3.org/TR/css3-selectors/#link&quot;&gt;CSS3 Selectors&lt;/a&gt;, &lt;a href=&quot;http://www.w3.org/TR/selectors-api/#privacy&quot;&gt;Selectors API spec&lt;/a&gt;):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note. It is possible for style sheet authors to abuse the &lt;code&gt;:link&lt;/code&gt; and &lt;code&gt;:visited&lt;/code&gt; pseudo-classes to determine which sites a user has visited without the user&amp;#39;s consent.&lt;/p&gt;
&lt;p&gt;UAs may therefore treat all links as unvisited links, or implement other measures to preserve the user&amp;#39;s privacy while rendering visited and unvisited links differently.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=57351&quot;&gt;original bugzilla issue&lt;/a&gt; was reported back in October 2000, &lt;a href=&quot;http://crypto.stanford.edu/sameorigin/&quot;&gt;Stanford sameorigin whitepapers&lt;/a&gt; had this issue described in 2002, then lots of articles followed, and then Ajaxian had an &lt;a href=&quot;http://ajaxian.com/archives/spyjax-using-avisited-to-test-your-history&quot;&gt;article&lt;/a&gt; in 2007 which made this issue really popular.&lt;/p&gt;
&lt;p&gt;And now we have &lt;a href=&quot;http://startpanic.com&quot;&gt;&lt;a href=&quot;http://startpanic.com&quot;&gt;http://startpanic.com&lt;/a&gt;&lt;/a&gt; with nice implementation of this approach – it has &lt;a href=&quot;http://startpanic.com/db/db_en.txt&quot;&gt;a txt database&lt;/a&gt; of some thousands URLs that are tested for being visited.&lt;/p&gt;
&lt;p&gt;You can check &lt;a href=&quot;http://startpanic.com/js/sp.js&quot;&gt;the code&lt;/a&gt; – it’s pretty straight forward – links from the database are appended to the iframe where &lt;code&gt;:visited&lt;/code&gt; links are displayed and others are hidden, then current style of the current link is checked and if it’s hidden, this link is appended to the big list of visited links.&lt;/p&gt;
&lt;h2 id=&quot;possible-solutions&quot;&gt;Possible solutions&lt;/h2&gt;
&lt;p&gt;Basically, there’re some ways to resolve this issue:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;try to protect &lt;code&gt;:visited&lt;/code&gt; links computed style access&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;limit support of &lt;code&gt;:visited&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;don’t fix it, find a way around&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;protect-visited-links-programmatically&quot;&gt;Protect :visited links programmatically&lt;/h3&gt;
&lt;p&gt;That’s clearly useless. People were suggesting many solutions (which you can get round), like making getComputedStyle return default value for &lt;code&gt;:visited&lt;/code&gt; links as if they are not visited – but you can make the case more complex, e.g.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;a:link span {display: none;}
a:visited span { display: block }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and then use getComputedStyle to check the span; and all the proposed solutions were weak in some way. But even if you manage to make scripts unaware about the state of your links, there will always be a server-side attack vector – for those links that you want to check you can just specify a unique background-image pointing to some server-side tracking script, e.g.:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#alQaedaLnk:visited {
    background: url(http://www.cia.gov/track.pl);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Like &lt;a href=&quot;http://ha.ckers.org/weird/CSS-history.cgi&quot;&gt;here&lt;/a&gt;, for example. So it clearly shows us that there’s no way (or it’s too troublesome) to fix this “issue” programmatically.&lt;/p&gt;
&lt;h3 id=&quot;limiting-support-for-visited-&quot;&gt;Limiting support for &lt;code&gt;:visited&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;As I understood from the discussion with startpanic.com author, he wants to limit &lt;code&gt;:visited&lt;/code&gt; support so that only links to pages to the same domain are applied with &lt;code&gt;:visited&lt;/code&gt; pseudo class.&lt;/p&gt;
&lt;p&gt;But this would hurt user experience so much! First example that comes to my head is Google and other search engines – they all colour visited links differently so you can clearly see which pages you’ve already been on and which not. If same-domain policy is applied, all the links in Google search results will be plain blue. This sounds awful to me.&lt;/p&gt;
&lt;p&gt;Guys from &lt;a href=&quot;http://crypto.stanford.edu/sameorigin/&quot;&gt;Stanford security group&lt;/a&gt; suggest applying &lt;code&gt;:visited&lt;/code&gt; only to those links that were visited from the current domain. This approach was used in Firefox add-on called &lt;a href=&quot;https://addons.mozilla.org/en/firefox/addon/1502&quot;&gt;SafeHistory&lt;/a&gt; (it doesn’t work any more). So if you do a search in Google and visit some pages, &lt;code&gt;:visited&lt;/code&gt; will be applied to these pages only in Google search results. So if you then do a search on MSN Live Search, all the links there will be plain blue and &lt;code&gt;:visited&lt;/code&gt; won’t be applied to them. To me this solution looks weird as well. And Firefox developers said that it would be a problem to support this; and &lt;/p&gt;
&lt;p&gt;I don’t think other browser vendors will fix this privacy “issue” in that way. Keep on reading, I will explain why.&lt;/p&gt;
&lt;p&gt;So from technical prospective the only easy solution would be to completely remove support for &lt;code&gt;:visited&lt;/code&gt; pseudo class, which nobody will do because user experience will suffer and people will complain.&lt;/p&gt;
&lt;h3 id=&quot;best-solution-find-a-way-around&quot;&gt;Best solution – find a way around&lt;/h3&gt;
&lt;p&gt;You may think – why not make &lt;code&gt;:visited&lt;/code&gt; support configurable in the browser UI?  But that’s what all browsers already have! &lt;strong&gt;You can specify that you don’t want to keep history at all, you won’t see visited links anywhere, you will feel that you’re “safe”&lt;/strong&gt; :).&lt;/p&gt;
&lt;h3 id=&quot;another-solution-private-browsing-mode&quot;&gt;Another solution – Private Browsing mode&lt;/h3&gt;
&lt;p&gt;Another nice option is to use Private Browsing mode that’s supported by all modern browsers &lt;a href=&quot;http://blogs.msdn.com/ie/archive/2008/08/25/ie8-and-privacy.aspx&quot;&gt;IE8&lt;/a&gt;, &lt;a href=&quot;http://www.apple.com/pro/tips/privacy_safari.html&quot;&gt;Safari&lt;/a&gt;, &lt;a href=&quot;http://www.google.com/support/chrome/bin/answer.py?hl=en&amp;amp;answer=95464&quot;&gt;Google Chrome&lt;/a&gt; (and then &lt;a href=&quot;https://wiki.mozilla.org/PrivateBrowsing&quot;&gt;FF3.1&lt;/a&gt; joined). &lt;strong&gt;When you visit a site that you don’t want to appear in the history – use Private Browsing mode and you’re safe.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: currently Google Chrome has a bug – it applies &lt;code&gt;:visited&lt;/code&gt; pseudo class to
links in Incognito Mode. However, &lt;a href=&quot;http://codereview.chromium.org/42114&quot;&gt;the bug is fixed&lt;/a&gt; and the bugfix will be included in one of new updates.&lt;/p&gt;
&lt;h2 id=&quot;-private-browsing-browser-feature-is-the-only-true-solution-to-this-issue-&quot;&gt;“Private Browsing” browser feature is the only true solution to this issue.&lt;/h2&gt;
&lt;p&gt;Here’s a &lt;u&gt;&lt;a href=&quot;http://sharovatov.ru/testcases/visitedIssueTest.html&quot;&gt;testcase&lt;/a&gt;&lt;/u&gt;. I visited both &lt;a href=&quot;http://ya.ru&quot;&gt;&lt;a href=&quot;http://ya.ru&quot;&gt;http://ya.ru&lt;/a&gt;&lt;/a&gt; and &lt;a href=&quot;http://www.google.com&quot;&gt;&lt;a href=&quot;http://www.google.com&quot;&gt;http://www.google.com&lt;/a&gt;&lt;/a&gt; links in IE8 InPrivate mode, then went to the &lt;a href=&quot;http://sharovatov.ru/testcases/visitedIssueTest.html&quot;&gt;testcase page&lt;/a&gt; and it didn’t tell anything as if I hadn’t visited these URLs.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://sharovatov.ru/screenshots/visitedIssueIE8.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;When I followed the same process in Google Chrome “Incognito mode”, it showed that I visited both ya.ru and Google.com. &lt;a href=&quot;http://codereview.chromium.org/42114&quot;&gt;This bug is fixed&lt;/a&gt; and will be updated in newer versions of Google Chrome.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://sharovatov.ru/screenshots/visitedIssueGG.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;And this issue is also fixed in FF3.1b3:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://sharovatov.ru/screenshots/visitedIssueFF.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;In comments Avdeev said that Safari in its Private Browsing mode (they call it Porn mode) didn’t show if the link was visited or not. Great stuff!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; It seems that Opera 10 will have Private browsing mode support as well – they are already choosing the name for it – and the most voted one is “Phantom mode” :)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: while I understand the whole concern about privacy, you shouldn’t forget that all search engines, adds providers and many many others gather statistics about your visits. When you’re in London (and other major cities), you’re being watched on CCTV constantly, does it bother you? Does this new world leave any space for privacy?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Links&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;the best use of this privacy issue is &lt;a href=&quot;http://www.azarask.in/blog/post/socialhistoryjs/&quot;&gt;this&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=147777&quot;&gt;This bugzilla entry&lt;/a&gt; contains main discussion about the issue.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;-visited-links-privacy-issue-revisited-2010-03-&quot;&gt;:visited links privacy issue revisited &lt;em&gt;2010-03&lt;/em&gt;&lt;/h1&gt;
&lt;p&gt;This is a follow up. I thought the best solution for this issue would be educating users about the problem and promoting Private mode as a solution. I think I was wrong. See below why.&lt;/p&gt;
&lt;p&gt;It’s worthy to note that all browsers now support Private mode – IE8, Fx, Opera, Safari, Chrome. Opera 10.50 can even open a “private” tab in the existing window. Flash player did a good catch-up – with its version 10.1 release flash cookies are not stored when a browser runs in the Private mode (so updating to latest flash player is highly recommended if you use Private mode).&lt;/p&gt;
&lt;p&gt;But browser vendors clearly failed to promote this feature. I asked few general internet users, nobody even knew about Private browsing mode in their browser. (However, most of my interviewees knew about HTTPS, so security concerns weren’t completely new to them). If my small poll doesn’t seem a representative sample for you, do your own and share results!&lt;/p&gt;
&lt;p&gt;So people are obviously not aware that their history data can be “obtained” by anyone.&lt;/p&gt;
&lt;p&gt;David Baron thought this was unacceptable and &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=147777#c172&quot;&gt;started working on a patch for Gecko&lt;/a&gt; which targets most of the “attack vectors” (see his &lt;a href=&quot;http://dbaron.org/mozilla/visited-privacy&quot;&gt;blogpost&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Basically, Gecko will have two style contexts for a visited link – one with rules applied for a &lt;code&gt;:visited&lt;/code&gt; link, and one with rules not applied – as if the link wasn’t visited. GetComputedStyle will take the first style context, and therefore getComputedStyle check for a CSS value of the rule set for &lt;code&gt;:visited&lt;/code&gt; pseudoclass selector will fail – it will think the link has default or specified in &lt;code&gt;:link&lt;/code&gt; selector rules applied. But when browser will do actual styling, it will use the second styling context, but will apply only a set of properties which are considered safe (&lt;code&gt;color&lt;/code&gt;, &lt;code&gt;background-color&lt;/code&gt;, &lt;code&gt;border-*-color&lt;/code&gt;, and &lt;code&gt;outline-color&lt;/code&gt;). &lt;/p&gt;
&lt;p&gt;This approach looks nice and will give users some protection, but as it was pointed by &lt;a href=&quot;http://lists.w3.org/Archives/Public/www-svg/2008Sep/0112.html&quot;&gt;Robert O’Callahan here&lt;/a&gt;, it will fail if it becomes possible to read the actual color of the link after actual styling is done. So this approach has to be applied very carefully – for example, if Canvas &lt;a href=&quot;http://mxr.mozilla.org/mozilla/source/content/canvas/src/nsCanvasRenderingContext2D.cpp#2352&quot;&gt;drawWindow object was available not only to Fx extensions&lt;/a&gt;, it would mean that attacker would still be able to get resulting color from the second styling context. I really hope this never happens.&lt;/p&gt;
&lt;p&gt;So I was wrong because I thought that no browser vendor would go and fix this technically, while it seems quite doable and thanks to David Baron, it will appear in Gecko. With careful integration, this approach will protect from most of the possible attacks and will still provide a way for authors to make visited and not visited links distinguishable in their designs.&lt;/p&gt;
&lt;p&gt;We’ll now see what other browser vendors will do, and this will become especially interesting if Firefox does a good marketing campaign from this feature.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Windows Live</title>
            <link href="/posts/2009-04-wl.html"/>
            <updated>2009-04-01T00:00:00.000Z</updated>
            <id>/posts/2009-04-wl.html</id>
            <content type="html">&lt;p&gt;I’ve just updated &lt;a href=&quot;http://download.live.com/?sku=messenger&quot;&gt;Windows Live Messenger&lt;/a&gt; to version 2009. It also offered to install other Windows Live tools, which I did. And you know what – &lt;a href=&quot;http://windowslivewriter.spaces.live.com/&quot;&gt;Windows Live Writer&lt;/a&gt; rocks! Before I was using Microsoft Office 2007 Word for writing and publishing blogposts and it was doing it job, but now I’ve got a lightweight and really easy-to-use tool to manage my blog. And it’s free so I can install it on my laptop (which has got only Outlook 2007 on it). It can save any post as a draft, edit it later, it’s got live preview tool (which works amazingly fast), you can either work with wysiwyg or with plain html code – and I bet this is the cleanest wysiwyg I’ve ever seen. I really mean it – it generates absolutely clean HTML, and it uses my blog visual theme!&lt;/p&gt;
&lt;p&gt;And the configuration process was great as well – I just entered my blog url, username and password, it fetched the theme information and that’s all – I’m writing, previewing and publishing posts!&lt;/p&gt;
&lt;p&gt;So, the key features of Windows Live Writer (for me) are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;it’s kerfuffle-free:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;it works fine with my wordpress blog&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;wysiwyg generates really clean code so I don’t have to edit the code manually after I finished writing the blogpost&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;it’s got good spellchecking mechanism&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;it has a &lt;a href=&quot;http://gallery.live.com/liveItemDetail.aspx?li=6b2b5ffe-936a-4cb3-869c-c01de29de176&amp;amp;bt=9&quot;&gt;nice twitter plugin&lt;/a&gt; that puts a twit with a link to the new blogpost&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;it contains most often used photo editing functions – so I don’t need to install anything else on my netbook to post to my blog when I’m travelling.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;it automatically fetches all the categories from the blog – you just need to set them, plus you can add categories if you want&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;it can save drafts both to local storage and to the blog – so if I’m writing a huge blogpost, I can proceed editing it when I’m travelling or finish it at home.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;it’s lightweight and really fast&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;it’s completely free&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;and it’s got plugin architecture so we’ll see more interesting stuff coming!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Good stuff, Live Team, thanks!&lt;/p&gt;
&lt;p&gt;P.S. for more information, read &lt;a href=&quot;http://windowslivewriter.spaces.live.com/blog/cns!D85741BB5E0BE8AA!1650.entry&quot;&gt;this blogpost&lt;/a&gt;.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Windows Live Messenger adds removal</title>
            <link href="/posts/2009-04-wlwaddsremoval.html"/>
            <updated>2009-04-01T00:00:00.000Z</updated>
            <id>/posts/2009-04-wlwaddsremoval.html</id>
            <content type="html">&lt;p&gt;If you use Windows Live Messenger 2009 and you don’t want to watch adds – there’re two simple ways to disable them:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;add rad.msn.com to a list of Restricted Sites in your Internet Explorer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;add &lt;code&gt;.0.0.0 rad.msn.com&lt;/code&gt; record to your &lt;code&gt;%systemroot%system32driversetchosts&lt;/code&gt; file&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Both ways will stop Live Messenger from downloading advertisement. I don’t know if these ways are legal, but we’re not touching Live Messenger, not disassembling it or doing anything specifically prohibited.&lt;/p&gt;
&lt;p&gt;As always, there’s a patch (&lt;a href=&quot;http://apatch.org/&quot;&gt;apatch&lt;/a&gt;), but as it modifies Live Messenger dlls, it certainly breaches the EULA.&lt;/p&gt;
&lt;p&gt;The same approach can be used for blocking ads in all kinds of messengers – you just need to find out which host adds are served from and if your messenger uses IE settings, add it to restricted zone list, or to the hosts file with 0.0.0.0 address.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Apple submitted HTTP Live Streaming spec to IETF</title>
            <link href="/posts/2009-05-applelivestreaming.html"/>
            <updated>2009-05-01T00:00:00.000Z</updated>
            <id>/posts/2009-05-applelivestreaming.html</id>
            <content type="html">&lt;p&gt;As &lt;a href=&quot;http://sharovatov.wordpress.com/2009/04/28/silverlight-smooth-streaming-and-http/&quot;&gt;I’ve blogged recently&lt;/a&gt;, nearly a year ago Microsoft proposed an approach for adaptive video streaming over HTTP – Smooth Streaming. As Microsoft didn’t apply for a patent for this technology, I was hoping to see the same beautiful approach implemented in modules for other web-servers, or even as web-applications – as it’s really easy to implement.&lt;/p&gt;
&lt;p&gt;The mistake Microsoft did was that they didn’t submit this technology standard to IETF to make it RFC – and that’s what Apple’s doing at the moment.&lt;/p&gt;
&lt;p&gt;Yes, I’m not mistaken – Apple copied the whole idea, called it &lt;a href=&quot;http://www.ietf.org/internet-drafts/draft-pantos-http-live-streaming-00.txt&quot;&gt;HTTP Live Streaming and submitted to IETF&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Yes, there’re differences, but they are absolutely insignificant:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Apple spec suggests extending M3U format for a playlist – Microsoft uses &lt;a href=&quot;http://www.w3.org/TR/SMIL20/&quot;&gt;SMIL-compliant&lt;/a&gt; ISMC client-manifest file (i.e. playlist)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Apple spec defines that the server creates the playlist – in Microsoft approach the encoder creates the playlist&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Apple spec defines encryption for media files – Microsoft doesn’t&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And the whole specification that’s been proposed is weird – I think they just wanted to submit it as soon as possible before Microsoft Smooth Streaming approach gets popularity and becomes de-facto standard.&lt;/p&gt;
&lt;p&gt;Here’s what jumped at me when I was reading the spec:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;section 6.2.3. Reloading the Playlist file - why specify the expiration time of the playlist separately when HTTP 1.1 already has flexible methods for &lt;br&gt;setting expiration time of the resource?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;encryption - what’s the purpose of encrypting media files when there’s HTTPS? And if there’s a purpose - HTTP already provides a place where encryption could be &amp;quot;plugged in&amp;quot; - Transfer-Encoding, why didn&amp;#39;t Apple just register another transfer-coding in IANA?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;EXT-X-ALLOW-CACHE - why add this if HTTP already gives flexible tools to control caching?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So as I see it – Apple was just a little bit in a hurry to propose this “standard” – looks like they took Microsoft idea, added some proprietary bits and bobs without thinking them through, didn’t use what HTTP natively provides but bravely called the draft “&lt;strong&gt;HTTP&lt;/strong&gt; Live Streaming”.&lt;/p&gt;
&lt;p&gt;Awesome.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Beanstalkapp and Fogbugz - free online bugtracking and version control</title>
            <link href="/posts/2009-05-beanstalkapp.html"/>
            <updated>2009-05-01T00:00:00.000Z</updated>
            <id>/posts/2009-05-beanstalkapp.html</id>
            <content type="html">&lt;p&gt;Once I tried &lt;a href=&quot;http://www.fogcreek.com/fogbugz/learnmore.html&quot;&gt;Fogbugz&lt;/a&gt; bug tracking &lt;a href=&quot;http://www.fogcreek.com/FogBugz/IntrotoOnDemand.html&quot;&gt;on-demand service&lt;/a&gt; and was amazed how cool it was and how easy it was to use it – no problems with installing and managing anything – just register and start working. And it’s not only a bug tracking software, but a full-fledged project management solution, and as the support cost is zero, it’s almost invaluable for small projects or your own start-up. &lt;/p&gt;
&lt;p&gt;It’s free for 2 users only, which is more than enough if you’re running a hobby project, but if you have a budget, you can easily afford $25 for each additional user.&lt;/p&gt;
&lt;p&gt;But in proper development you also need &lt;a href=&quot;http://en.wikipedia.org/wiki/Revision_control&quot;&gt;source code management system&lt;/a&gt; (SCM). And &lt;a href=&quot;http://www.fogcreek.com/FogBugz/docs/60/topics/advanced/Sourcecontrolintegration.html?isl=130641&quot;&gt;Fogbugz allows for great level of integration&lt;/a&gt; with all popular SCM systems. But if you choose Fogbugz on-demand to avoid support costs of running it locally, does it sound logical to install SCM locally? Definitely not.&lt;/p&gt;
&lt;p&gt;And here comes &lt;a href=&quot;http://beanstalkapp.com/&quot;&gt;beanstalk&lt;/a&gt; – great hosted hassle-free version control service. It’s free for 3 users and a repository of up to 100Mbytes, and you can easily upgrade at any time.&lt;/p&gt;
&lt;p&gt;In most cases, free version should suit your hobby project or start up. Beanstalk runs &lt;a href=&quot;http://en.wikipedia.org/wiki/Subversion_(software)&quot;&gt;subversion&lt;/a&gt; SCM which is almost a de-facto standard in project development and has client software for all platforms.&lt;/p&gt;
&lt;p&gt;But the best thing in Beanstalk for me is that it provides &lt;a href=&quot;http://help.beanstalkapp.com/faqs/integration-tools/integrating-with-fogbugz&quot;&gt;integration with Fogbugz on-demand&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So you can have bug tracking/PM and version control software at no cost!&lt;/strong&gt; It is just a dream for a hobby project or a small start-up.&lt;/p&gt;
&lt;p&gt;The installation process is dead easy:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;register at fogbugz.com for on-demand service and get &lt;strong&gt;yourproject.fogbugz.com&lt;/strong&gt; address&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;register at beanstalkapp.com for a free account and get &lt;strong&gt;yourproject.beanstalkapp.com&lt;/strong&gt; address and login there. You will be prompted to set your first repository. I assume that you’re just starting and don’t have SCM system yet, so just zip your working directory (where all your project files are) and upload it. Your first repository will be created.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;go to your repository setup → integration → fogbugz. All you need to do is follow the instructions – but basically they will just need your fogbugz URL (yourproject.fogbugz.com) and username with password.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://help.beanstalkapp.com/faqs/getting-started-11/choosing-your-subversion-client&quot;&gt;choose your subversion client&lt;/a&gt;, download it and install. All you’ll have to configure in the client is a repository URL, it will look something like this: &lt;/p&gt;
&lt;pre&gt;&lt;code&gt; http://yourproject.svn.beanstalkapp.com/myfirstrepo/ 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; and your username/password (usually username is the email you entered when registering). That’s it, you can delete all files from the working directory on your computer (do a backup before deleting!) and check-out files from your repository there. I use &lt;a href=&quot;http://en.wikipedia.org/wiki/TortoiseSVN&quot;&gt;tortoiseSVN&lt;/a&gt; so I just stopped IIS, removed everything from my c:\inetpub\testproject directory, right-clicked on it and chose “Check-out” from TortoiseSVN menu. In a minute I had all my files fetched from beanstalk repository. I started IIS and had my test project up and running, but now with full source control!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;in Fogbugz – set “&lt;strong&gt;Source Control URL for logs&lt;/strong&gt;” and “&lt;strong&gt;Source Control URL for diffs&lt;/strong&gt;”. To do this, you need to go to your fogbugz account, to Settings → site → Main. Grab your repository URL from beanstalk, add “browse/^FILE” to it and set it as “&lt;strong&gt;Source Control URL for logs&lt;/strong&gt;”. It should look something like that:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; http://yourProject.beanstalkapp.com/yourRepository/browse/^FILE
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; And “&lt;strong&gt;Source Control URL for diffs&lt;/strong&gt;” will be&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; http://yourProject.beanstalkapp.com/yourRepositroy/diff/path/^FILE?from=^R2&amp;amp;amp;to=^R1
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Voila! Everything should be working.&lt;/p&gt;
&lt;p&gt;So the workflow will be like that:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;If you have a bug or a feature request, you enter it to Fogbugz, it will get a number assigned.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When you (or someone else) start working on a bug, you just edit your code and then commit it. When committing, you can add tags to a commit message. For example, if you do a commit with the following message:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; [case:34 status:resolved] 
 fixed IE5.5 lack of .toFixed() support
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; Beanstalk will go to FogBugz, find bug #34, add the message to it and mark the bug as resolved. &lt;a href=&quot;http://www.wildbit.com/blog/2008/01/21/beanstalk-major-update-today/&quot;&gt;See here&lt;/a&gt; for more commit tags.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then in Fogbugz bug#34 you will see that it’s been just resolved and you will be able to check what files were changed and look at the diff of the changes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So that’s it, you’ve got your bug tracking and version control software set up and integrated. It’s working online so support cost is zero, and it’s completely free :)&lt;/p&gt;
&lt;p&gt;P.S. What’s also great about Beanstalk is that it supports twitter integration – so if you have an open-source project, your users can follow it on twitter and see what you’re committing! It also supports web-hooks API so integration is limited to your fantasy only :)&lt;/p&gt;
&lt;p&gt;P.P.S. The only thing that’s left is database versioning control – we need something like RoR migrations, but that’s a topic for another post :)&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Googletranslateclient.com and Windows Accelerator Platform</title>
            <link href="/posts/2009-05-gtc.html"/>
            <updated>2009-05-01T00:00:00.000Z</updated>
            <id>/posts/2009-05-gtc.html</id>
            <content type="html">&lt;p&gt;Yesterday &lt;a href=&quot;http://sharovatov.wordpress.com/2009/05/20/windows-7-accelerators-platform/&quot;&gt;I’ve blogged about Accelerators Platform&lt;/a&gt; and now I’m looking at a website &lt;a href=&quot;http://googletranslateclient.com&quot;&gt;googletranslateclient.com&lt;/a&gt; which offers to download a standalone VB6 win32 application that uses &lt;a href=&quot;http://translate.google.com&quot;&gt;google translate service&lt;/a&gt; to dynamically translate a selected text.&lt;/p&gt;
&lt;p&gt;Funny thing is that this program implements what Accelerator Platform is invented for, but in a very limited and counter-productive way – its functionality is limited to only one service so nobody can enhance it!&lt;/p&gt;
&lt;p&gt;I think the best thing Microsoft could do would be to create a program that would capture text select event in any window and &lt;strong&gt;add&lt;/strong&gt; Accelerators group to the context menu of that program!&lt;/p&gt;
&lt;p&gt;Or alternatively, if this is too much work, just show Accelerators icon (&lt;a href=&quot;http://sharovatov.files.wordpress.com/2009/05/acceleratorsicon.gif&quot;&gt;&lt;img title=&quot;accelerators-icon&quot; border=&quot;0&quot; alt=&quot;accelerators-icon&quot; src=&quot;http://sharovatov.files.wordpress.com/2009/05/acceleratorsicon_thumb.gif?w=32&amp;#038;h=32&quot; width=&quot;32&quot; height=&quot;32&quot;&gt;&lt;/a&gt;) when any text is selected. I’m not much of a system application developer, so I’m not sure this is easy to do, but I’m sure people would benefit from it and developers wouldn’t need to add Accelerators API support in their apps!&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Hosting issues</title>
            <link href="/posts/2009-05-hostingissues.html"/>
            <updated>2009-05-01T00:00:00.000Z</updated>
            <id>/posts/2009-05-hostingissues.html</id>
            <content type="html">&lt;p&gt;I’ve been trying to prepare some test cases for HTTP Chunked Encoding support, but noticed that something went weird when I was requesting data from my host (&lt;a href=&quot;http://sharovatov.ru/&quot;&gt;sharovatov.ru&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;I’ve got a basic LAMP virtual hosting at &lt;a href=&quot;http://naunet.ru&quot;&gt;naunet.ru&lt;/a&gt; which worked fine when I was hosting static content. But when I started doing the testcase, I found out all the weird and wonderful issues – mainly because they have SQUID installed before apache, so every single request goes to squid, and it’s a caching proxy that serves all my request from its cache – so I can’t test chunked encoding properly, can’t test ranges support properly… Crap. Seems that they just use squid to reduce load on their web servers.&lt;/p&gt;
&lt;p&gt;But the worst thing is bad techsupport – it works 8 hours a day and there’s nobody there on the weekends or bank holidays. I ask a question and nobody answers it in 3 days. It just drives me insane.&lt;/p&gt;
&lt;p&gt;Will have to move to somewhere else where sysadmins know how to do load-balancing without installing front-end proxies.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>HTML+CSS+JS Widgets - future cross-platform environment</title>
            <link href="/posts/2009-05-htmlcssjsplatform.html"/>
            <updated>2009-05-01T00:00:00.000Z</updated>
            <id>/posts/2009-05-htmlcssjsplatform.html</id>
            <content type="html">&lt;p&gt;Yesterday I installed Windows 7 on both my laptop (MSI Wind U100) and work PC (Core2Duo with 2Gb RAM). Both machines had XP – Home on laptop and Pro on work PC. One of the first things I’ve noticed right after installation was Gadgets technology that Windows 7 supports (actually, support for Sidebar Gadgets appeared in Vista, but as I didn’t have Vista installed, I couldn’t check it out). The technology is very simple – you create a manifest file with your gadget settings and HTML file with your gadget code, styles and scripting (of course, you’d better put styles and js in separate files); then zip everything in one archive and rename its extension to .gadget. That’s it, then you can install it on your sidebar in Vista or Windows 7.&lt;/p&gt;
&lt;p&gt;Technical details of how gadgets work are for one of next blog posts, but I feel the tendency that all small applications soon will be written in HTML/JS/CSS (especially those that use web-services!).&lt;/p&gt;
&lt;p&gt;Look, Opera has proposed a &lt;a href=&quot;http://www.w3.org/TR/widgets-apis/&quot;&gt;draft to W3C called Widgets&lt;/a&gt; – the same concept of small HTML/CSS/JS application but running inside a browser. Vodafone &lt;a href=&quot;http://www.quirksmode.org/blog/archives/2009/03/testing_mobile.html&quot;&gt;hired PPK&lt;/a&gt; to spec Mobile Widgets technology and test thoroughly (and Peter-Paul is famous for his great tests and compatibility tables!). Nokia already supports
&lt;a href=&quot;http://www.s60.com/life/thisiss60/s60indetail/technologiesandfeatures/webruntime&quot;&gt;Web Widgets&lt;/a&gt; on S60 phones.&lt;/p&gt;
&lt;p&gt;So instead of multiple environments we have one common environment for building applications for almost any platform – be it a browser, a mobile phone or Windows desktop. Yes, there’re API and DOM differences, for example, Windows Gadgets allow access to WMI so that you can build an application leveraging all the system functionality provided by WMI, on the phones and in Opera you will be limited to web-service based development and some pretty basic DOM, but even so it’s great that html/js/css is becoming a standard for writing cross-platform applications.&lt;/p&gt;
&lt;p&gt;Front-end developers – our skills will become even more valuable :)&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>IE8 news - MUI packs, compatibility view for intranet</title>
            <link href="/posts/2009-05-ie8news.html"/>
            <updated>2009-05-01T00:00:00.000Z</updated>
            <id>/posts/2009-05-ie8news.html</id>
            <content type="html">&lt;p&gt;First of all, as guys at IEBLOG reported, IE8 MUI packs for Windows XP (and also Windows Server 2003) are now available and have the following languages: Arabic, Chinese (Traditional), Chinese (Hong Kong), Czech, Danish, Dutch, Finnish, French, German, Greek, Hebrew, Hungarian, Italian, Japanese, Korean, Norwegian, Polish, Portuguese (Portugal), Portuguese (Brazil), Russian, Spanish, Swedish, Turkish, Bulgarian, Croatian, Estonian, Latvian, Lithuanian, Romanian, Slovenian, Slovakian, Thai. This is great for those who use localised versions.&lt;/p&gt;
&lt;p&gt;Another interesting thing is that IE8 renders sites from Intranet security zone in compatibility view by default, unless the page specifically indicates that it should be rendered in standards-compliant mode (either by corresponding META or HTTP header). &lt;/p&gt;
&lt;p&gt;However, this behaviour can be controlled from Group Policy. This is one of the most valuable benefits of using Microsoft technologies – you get great level of
integration out-of-the-box.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>IE8 Rendering Modes theory and practice</title>
            <link href="/posts/2009-05-ie8renderingmodes.html"/>
            <updated>2009-05-01T00:00:00.000Z</updated>
            <id>/posts/2009-05-ie8renderingmodes.html</id>
            <content type="html">&lt;p&gt;Many web-developers moan about the Rendering Modes switch that’s been introduced in IE8. I’ve got some thoughts on this.&lt;/p&gt;
&lt;h2 id=&quot;rendering-modes-switches-history&quot;&gt;Rendering modes switches history&lt;/h2&gt;
&lt;p&gt;As you may know, IE5 on Mac (followed by IE6 on Windows) introduced Quirks and Standards compliancy modes with a DOCTYPE switcher. All other browsers followed the move and introduced similar approach – they tried to mimic IE behaviour in quirks mode and tried supporting CSS as close to the W3C standard as they could&lt;/p&gt;
&lt;p&gt;DOCTYPE switch approach was really straight forward – if you put a valid DOCTYPE for your HTML page, browser switches to the standards compliancy mode; if DOCTYPE is omitted, quirks mode is used.&lt;/p&gt;
&lt;p&gt;This switch was required because many sites were built at the time when even CSS1 was a draft, and for browsers to evolve safely (and add newer standards’ support) without breaking the existing web these old websites were to be rendered properly.&lt;/p&gt;
&lt;p&gt;At the time the idea of using DOCTYPE as a rendering mode switcher was fine - almost all pages that had been built without standards support in mind didn’t have DOCTYPE. And if developers wanted to use modern standards, they added HTML or XHTML DOCTYPE and the page was rendered using standard-compliant parser.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Quirks mode and DOCTYPE switch locked old web with old rendering engine, IE5 engine&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I’m not wrong – after IE4 won first browsers war (&lt;strong&gt;BW I&lt;/strong&gt;) nearly all sites were built for IE4 and IE5 &lt;strong&gt;only&lt;/strong&gt;, so all other browsers had nothing to do but copy IE5 behaviour.&lt;/p&gt;
&lt;p&gt;It’s important to note that DOCTYPE can only toggle standards compliancy on and off.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Therefore DOCTYPE switch only solves backwards compatibility issue and does nothing to prevent future compatibility issues.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When developers started using DOCTYPE switch, IE6 was a major browser and all the sites were build around its CSS support level. So when IE7 was shipped, it had better support for CSS2.1 but had the same DOCTYPE rendering modes switch.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;That’s why many of these websites had rendering issues and had to fix CSS/JS for IE7 specifically&lt;/strong&gt;. &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms537512(VS.85).aspx&quot;&gt;Conditional comments&lt;/a&gt; and &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/121hztk3(VS.85).aspx&quot;&gt;conditional compilation&lt;/a&gt; came to rescue. However, with XP SP3 update IE6 started showing &lt;code&gt;@jscript_version&lt;/code&gt; equal to that of IE7 and conditional compilation became pretty useless.&lt;/p&gt;
&lt;p&gt;In IE7 old web-sites in quirks mode continued being rendered by IE5 rendering engine, and standards compliancy engine was just an updated version of IE6 standards compliancy rendering engine with some bugs fixed. And while IE7 was a minor update to IE6 but still caused so much trouble, one could imagine what IE8 with proper CSS2.1 support would do to websites. Basically, all the websites with DOCTYPES that were just fixed for IE7 Standards Compliancy mode would break in IE8 again.&lt;/p&gt;
&lt;p&gt;Other browsers didn’t have a similar problem, and there’re many reasons to this. First of all, by the time when first IE7 beta was shipped, other browsers had really insignificant market share (so their developers could change anything and wouldn’t be blamed for “breaking the web”), were updated really often and were mostly installed by IT-related people who knew how to update the browser. So DOCTYPE rendering switch was
and still is fine for non-IE browsers.&lt;/p&gt;
&lt;p&gt;And Microsoft had to solve interesting problem in IE8 – support CSS2.1, support IE7 standards compliancy mode and support IE5 quirks mode. But DOCTYPE can only toggle standards compliancy on or off! They couldn’t drop support for very old but still existing sites build in quirks mode, couldn’t drop IE6 and IE7 support, and couldn’t leave IE8 without proper CSS2.1 support.&lt;/p&gt;
&lt;p&gt;So we see that if any browser is locked at some version and this version gains noticeable market share, DOCTYPE switching will not work as vendors will have to choose what to support – older sites or newer features.&lt;/p&gt;
&lt;p&gt;And Microsoft found a way – they gave web-developers and users a way to control in which mode sites are rendered.&lt;/p&gt;
&lt;h2 id=&quot;ie8-rendering-modes-theory&quot;&gt;IE8 Rendering Modes Theory&lt;/h2&gt;
&lt;p&gt;In IE8 there’re 6 rendering modes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;“Edge” Standard compliancy mode&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;IE8 Standards mode&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“Emulate IE8” mode&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;IE7 Standards mode&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“Emulate IE7” mode&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;IE5 – Quirks mode&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Edge Standard compliancy mode &lt;/strong&gt;basically tells the browser that it should use the most recent rendering mode – in IE8 it’s “IE8 Standards mode”, in IE9 it will hopefully be “IE9 Standards mode”.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IE8 Standards mode &lt;/strong&gt;makes browser render a page using IE8 standards compliancy parser and renderer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Emulate IE8&lt;/strong&gt; – DOCTYPE switch will be used to determine whether to use IE8 Standards
compliancy mode or IE5 Mode.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IE7 Standards mode&lt;/strong&gt; makes browser render a page using IE7 Standards compliancy parser and renderer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Emulate IE7&lt;/strong&gt; – DOCTYPE switch will be used to determine whether to use IE7 Standards
compliancy mode or IE5 Mode. If you have a site that’s been built with IE7 Standards compliant mode support and you don’t want to change anything there, just add this META tag or HTTP header and IE8 (and all future versions of IE) will emulate IE7 behaviour, i.e. use IE7 Standards Compliant renderer when DOCTYPE is present and use IE5 mode when there’s no DOCTYPE. &lt;strong&gt;So you virtually “lock” your website to a current browser version behaviour&lt;/strong&gt;. “Emulate IE7 mode” even sets User Agent string to IE7 string and report Version Vector as IE7 (so conditional comments will be evaluated as for IE7).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IE5 Mode&lt;/strong&gt; – basically, it’s Quirks Mode. If we compare this to DOCTYPE switch approach, Edge mode is similar to a mode when DOCTYPE is set, and IE5 mode – to a mode when DOCTYPE is not present.&lt;/p&gt;
&lt;p&gt;To explain modes in more details, I need to show how they are applied.&lt;/p&gt;
&lt;h2 id=&quot;ie8-rendering-modes-practice&quot;&gt;IE8 Rendering Modes Practice&lt;/h2&gt;
&lt;p&gt;As I’ve shown above, the whole idea of using DOCTYPE as a rendering mode switch failed because &lt;strong&gt;there were more than two types of documents&lt;/strong&gt; on the web – those that should work in quirks mode, those that should work in IE7 standards mode, those that should work in IE8 standards compliancy mode and those that should work even with future versions of IE. So instead of two types we have three and a half :)&lt;/p&gt;
&lt;p&gt;To give a proper way to control this, Microsoft and &lt;a href=&quot;http://www.webstandards.org/&quot;&gt;WaSP&lt;/a&gt; invented X-UA-Compatible http header, so you can either configure your server to send this header with corresponding value or add it as META HTTP-EQUIV to your page. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;meta http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;IE=8&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This declaration will tell IE8 to toggle &lt;strong&gt;IE8 Standards compliancy mode&lt;/strong&gt; to render the page.&lt;/p&gt;
&lt;p&gt;Here’s a list of modes:&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;4&quot; width=&quot;540&quot;&gt;
    &lt;tbody&gt;&lt;/tbody&gt;
    &lt;thead&gt;
    &lt;tr&gt;
        &lt;th width=&quot;230&quot;&gt;Rendering mode&lt;/th&gt;
        &lt;th width=&quot;308&quot;&gt;X-UA-Compatible value&lt;/th&gt;
    &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
    &lt;tr&gt;
        &lt;th valign=&quot;top&quot; width=&quot;256&quot; scope=&quot;row&quot; align=&quot;left&quot;&gt;Edge Standard compliancy&lt;/td&gt;
        &lt;/th&gt;
        &lt;td valign=&quot;top&quot; width=&quot;308&quot;&gt;IE=edge&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;th width=&quot;272&quot; scope=&quot;row&quot; align=&quot;left&quot;&gt;IE8 Standards compliancy &lt;/td&gt;
        &lt;/th&gt;
        &lt;td valign=&quot;top&quot; width=&quot;308&quot;&gt;IE=8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;th width=&quot;281&quot; scope=&quot;row&quot; align=&quot;left&quot;&gt;IE8 Emulation &lt;/td&gt;
        &lt;/th&gt;
        &lt;td valign=&quot;top&quot; width=&quot;308&quot;&gt;IE=EmulateIE8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;th width=&quot;285&quot; scope=&quot;row&quot; align=&quot;left&quot;&gt;IE7 Standards compliancy &lt;/td&gt;
        &lt;/th&gt;
        &lt;td valign=&quot;top&quot; width=&quot;308&quot;&gt;IE=7&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;th width=&quot;287&quot; scope=&quot;row&quot; align=&quot;left&quot;&gt;IE7 Emulation &lt;/td&gt;
        &lt;/th&gt;
        &lt;td valign=&quot;top&quot; width=&quot;308&quot;&gt;IE=EmulateIE7&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;th width=&quot;289&quot; scope=&quot;row&quot; align=&quot;left&quot;&gt;IE5 Quirks &lt;/td&gt;
        &lt;/th&gt;
        &lt;td valign=&quot;top&quot; width=&quot;308&quot;&gt;IE=5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;


&lt;h2 id=&quot;ie8-rendering-modes-switches-priority&quot;&gt;IE8 Rendering Modes Switches Priority&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;First and main rule – if you specify X-UA-Compatible header or meta tag, IE8 will use the rendering engine you set.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If it’s &lt;strong&gt;EmulateIE7&lt;/strong&gt;, DOCTYPE switch will be used to determine whether to use IE7 Standards mode or IE5 Quirks mode. See test case &lt;a href=&quot;http://sharovatov.ru/testcases/X-UA-Compatible(IE=EmulateIE7)DTD.html&quot;&gt;with DTD&lt;/a&gt; and &lt;a href=&quot;http://sharovatov.ru/testcases/X-UA-Compatible(IE=EmulateIE7)noDTD.html&quot;&gt;without DTD&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If it’s &lt;strong&gt;EmulateIE8&lt;/strong&gt;, DOCTYPE switch will be used to determine if it should use IE8 Standards mode or IE5 Quirks mode. See test case &lt;a href=&quot;http://sharovatov.ru/testcases/X-UA-Compatible(IE=EmulateIE8)DTD.html&quot;&gt;with DTD&lt;/a&gt; and &lt;a href=&quot;http://sharovatov.ru/testcases/X-UA-Compatible(IE=EmulateIE8)noDTD.html&quot;&gt;without DTD&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If it’s &lt;strong&gt;IE=8&lt;/strong&gt;, IE8 Standards Compliancy mode will be used regardless of presence or absence of DOCTYPE. See test case &lt;a href=&quot;http://sharovatov.ru/testcases/X-UA-Compatible(IE=8)DTD.html&quot;&gt;with DTD&lt;/a&gt; and &lt;a href=&quot;http://sharovatov.ru/testcases/X-UA-Compatible(IE=8)noDTD.html&quot;&gt;without DTD&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If it’s &lt;strong&gt;IE=7&lt;/strong&gt;, IE7 Standards Compliancy mode will be used regardless of presence or absence of DOCTYPE. See test case &lt;a href=&quot;http://sharovatov.ru/testcases/X-UA-Compatible(IE=7)DTD.html&quot;&gt;with DTD&lt;/a&gt; and &lt;a href=&quot;http://sharovatov.ru/testcases/X-UA-Compatible(IE=7)noDTD.html&quot;&gt;without DTD&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If it’s &lt;strong&gt;IE=5&lt;/strong&gt;, IE5 Quirks mode is used even if there is a DOCTYPE (actually it didn’t matter for IE5 if there was DOCTYPE or not – quirks mode was the only mode it had). See &lt;a href=&quot;http://sharovatov.ru/testcases/X-UA-Compatible(IE=5).html&quot;&gt;test case&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If it’s &lt;strong&gt;Edge&lt;/strong&gt;, most modern rendering engine is used. For example, IE8 uses &lt;strong&gt;IE=8&lt;/strong&gt; mode regardless if there’s a DOCTYPE or not and IE9 will use &lt;strong&gt;IE=9&lt;/strong&gt;. See test case &lt;a href=&quot;http://sharovatov.ru/testcases/X-UA-Compatible(IE=edge)DTD.html&quot;&gt;with DTD&lt;/a&gt; and &lt;a href=&quot;http://sharovatov.ru/testcases/X-UA-Compatible(IE=edge)noDTD.html&quot;&gt;without DTD&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It’s worthy to note that &lt;strong&gt;X-UA-Compatible META overwrites X-UA-Compatible HTTP header&lt;/strong&gt;, so you can set X-UA-Compatible HTTP header for the whole website and then have X-UA-Compatible META with a different value on some pages.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If website doesn’t have X-UA-Compatible META tag or HTTP header, IE8 uses EmulateIE8 mode &lt;/strong&gt;i.e. DOCTYPE is used to switch between IE8 standards compliancy mode and IE5 Quirks mode.&lt;/p&gt;
&lt;p&gt;This means that everybody needs to add to add X-UA-Compatible header or META to their websites.&lt;/p&gt;
&lt;p&gt;Accepting the fact that web-developers wouldn’t update all the websites that were built around IE6/IE7 standards compliancy mode, Microsoft decision to take standards compliancy mode as a default would certainly “break the web”.&lt;/p&gt;
&lt;p&gt;So Microsoft had to find a way around this which they successfully did by introducing a bunch of Compatibility View settings.&lt;/p&gt;
&lt;h2 id=&quot;compatibility-view&quot;&gt;Compatibility View&lt;/h2&gt;
&lt;p&gt;As I’ve already said, when developer didn’t care about adding X-UA-Compatible header or META, IE8 works in &lt;strong&gt;EmulateIE8&lt;/strong&gt; mode and uses DOCTYPE switch to determine which rendering mode to use. If the site hasn’t got a DOCTYPE set, IE5 Quirks mode will be used, so backwards compatibility is not an issue. But if there’s a DOCTYPE, which Standards compliant mode to use? IE7? IE8? IE9 Standards Compliancy mode when IE9 it’s shipped? There’s no automatic way to choose.&lt;/p&gt;
&lt;p&gt;And as IE8 Standards mode is a default one, there might be issues on sites that only supported IE6/IE7 Standard modes. Apparently, only user can see if the site he’s viewing has rendering issues. And Microsoft gave users an easy way to switch back to IE7 Standards Compliancy mode if required by clicking on a Compatibility View button (located to the left of refresh button).&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://sharovatov.files.wordpress.com/2009/05/image.png&quot;&gt;&lt;img title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;http://sharovatov.files.wordpress.com/2009/05/image_thumb.png?w=124&amp;#038;h=46&quot; width=&quot;124&quot; height=&quot;46&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;IE8 will switch to &lt;strong&gt;EmulateIE7&lt;/strong&gt; mode and save the setting for the domain so all the pages from this domain will be rendered using IE7 engine.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Compatibility View button is shown only when X-UA-Compatible HTTP header or META is not set.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Also during IE8 install a user can specify if he wants to use &lt;a href=&quot;http://support.microsoft.com/kb/960321&quot;&gt;Compatibility View List&lt;/a&gt; feature. Basically, when this feature is turned and user clicks Compatibility View button while browsing, IE8 reports to Microsoft that the website on this domain required user to press the Compatibility View button.&lt;/p&gt;
&lt;p&gt;If statistics show that users tend to press Compatibility View button for the site, it’s included in iecompatdata.xml file which fresh copy is distributed with Windows Update. It can be viewed by typing &lt;code&gt;res://iecompat.dll/iecompatdata.xml&lt;/code&gt; into the address bar.&lt;/p&gt;
&lt;p&gt;So when Compatibility View List feature is enabled and there’s no X-UA-Compatible HTTP header or META, and DOCTYPE is present, IE8 will look if the site is in the &lt;code&gt;res://iecompat.dll/iecompatdata.xml&lt;/code&gt; file and make Compatibility View button pressed by default.&lt;/p&gt;
&lt;p&gt;As soon as the site gets X-UA-Compatible header or META tag, IE8 will use the rendering mode from its value and won’t even check Compatibility View List and also Compatibility View button won’t show at all.&lt;/p&gt;
&lt;h2 id=&quot;local-intranet-security-zone&quot;&gt;Local Intranet security zone&lt;/h2&gt;
&lt;p&gt;Intranet differs from Internet a lot.&lt;/p&gt;
&lt;p&gt;If Compatibility View List feature will work fine for public internet websites, Intranet sites should not be reported anywhere. So what rendering engine to use when there’s no X-UA-Compatible value and DOCTYPE is present? IE7 Standards Compliancy? IE8 Standards Compliancy?&lt;/p&gt;
&lt;p&gt;Intranet is a controlled environment where to decrease support costs IT pros usually set everybody with same set of software. As most successful companies use Microsoft technologies as a core of their IT infrastructure and because only IE has been providing a decent platform for building powerful intranet web applications, IE was always a de-facto standard browser in companies.&lt;/p&gt;
&lt;p&gt;Many intranet web applications were targeting IE5.5/6.0 and nobody cared to refactor to get standards compliancy – why bother if there was always only one browser supporting a well-known list of technologies so cross-browser interoperability was never an issue? We can argue if this approach is good or not – but IE8 team had thousands of intranet applications they had to support. That’s why compatibility view was the only option for sites from Local Intranet security zone.&lt;/p&gt;
&lt;p&gt;If the site is in the Local Intranet zone and there’s no X-UA-Compatible header or meta tag, DOCTYPE switch is used to determine which rendering engine to take – IE7 Standards compliancy or IE5 quirks mode.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If there’s no X-UA-Compatible value and site is in Local Intranet security zone, it will be rendered in EmulateIE7 mode by default.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Compatibility View button is not displayed at all.&lt;/p&gt;
&lt;p&gt;But as soon as a developer adds X-UA-Compatible header or META, site will start working in the specified mode.&lt;/p&gt;
&lt;h2 id=&quot;developer-tools&quot;&gt;Developer Tools&lt;/h2&gt;
&lt;p&gt;With great set of developer tools that Microsoft provided for IE8 you can also view what rendering is being used and change it if required. This is useful for developers only and overrides any other settings. It’s very useful for testing – you don’t need IE7 in a virtual machine to test how a page looks in IE7 – just press F12 to get the developer tools and play with Browser modes or Document modes :)&lt;/p&gt;
&lt;p&gt;Hope I managed to cover all the modes. In future posts I’ll write more on this topic.&lt;/p&gt;
&lt;p&gt;P.S. As SelenIT pointed in comments, it’s very important that X-UA-Compatible meta tag must be put &lt;strong&gt;before&lt;/strong&gt; any other elements in the head section, otherwise it might not work!&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>ITIL Conference</title>
            <link href="/posts/2009-05-itil.html"/>
            <updated>2009-05-01T00:00:00.000Z</updated>
            <id>/posts/2009-05-itil.html</id>
            <content type="html">&lt;p&gt;I&amp;#39;ve recently visited &lt;a href=&quot;http://www.osp.ru/conf/2007/0529/3903142&quot;&gt;OSPConf&lt;/a&gt; on business processes automation and ITIL. Was held at &lt;a href=&quot;http://www.radissonsas.com/cs/Satellite/Page/RadissonSAS/Page/rsasHotelDescription/1053502961507/en/hotelCode--mowzh/&quot;&gt;Radisson SAS hotel&lt;/a&gt; – quite a nice hotel, the launch was brilliant, the loos were not better than &lt;em&gt;*&lt;/em&gt;. But the conference was brilliant – there were top IT guys from HP, IBS, Megafon, Naumen, InlineGroup, IT Expert. Was really interesting to listen about the ITSM implementation in current investments-greedy crisis world. What I found out for myself was that if in your company and IT dept management is done properly, crisis won’t
affect you or even if it does, you’ll be able to easily explain to business what value it will lose if they cut investments or stop projects. So all the management practices and tools are for making all the work really transparent so that managers and CEO can focus and spend more time on strategic decisions rather than on operational routines. I had all these thoughts flying in my head, but when I listened to speech of &lt;a href=&quot;http://www.cbr.ru/eng/&quot;&gt;CBR&lt;/a&gt; IT chief, all the thoughts got sorted in a proper way.&lt;/p&gt;
&lt;p&gt;And I also have to note that ITSM software is not that expensive for SME – excellent
&lt;a href=&quot;http://www.omninet.biz/index.php?id=138&quot;&gt;Omnitracker&lt;/a&gt; costs from €12000 and it’s got everything your company might need, plus API for integration, plus additional templates – it will automate everything. &lt;/p&gt;
&lt;p&gt;However, the consultancy will be around 10 times more expensive. But again – nothing stops your company to send your own IT guys for training and save a fortune :)&lt;/p&gt;
&lt;p&gt;So thanks for all the interesting stuff, OSP! The conference was really worthy to visit! Will probably write a couple more blog posts on the topic as soon as I get all my thoughts in order :)&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Windows 7 Desktop Gadgets</title>
            <link href="/posts/2009-05-wdg.html"/>
            <updated>2009-05-01T00:00:00.000Z</updated>
            <id>/posts/2009-05-wdg.html</id>
            <content type="html">&lt;p&gt;I’ve been playing with Windows 7 Desktop Gadget technology and I must tell you – I just love it! And I’ll tell you why :)&lt;/p&gt;
&lt;h2 id=&quot;history&quot;&gt;History&lt;/h2&gt;
&lt;p&gt;The approach of putting web-application right on a desktop was invented by Microsoft in 1994-95 (in &lt;a href=&quot;http://en.wikipedia.org/wiki/Windows_Nashville&quot;&gt;Windows Nashville&lt;/a&gt; which was intended to be released in 1996) and was a part of Windows Desktop Update for Windows 95 and a core of Windows 98 &lt;a href=&quot;http://en.wikipedia.org/wiki/Active_Desktop&quot;&gt;Active Desktop&lt;/a&gt;. You could set an HTML page (plus JS, of course) as your desktop background and it would be run in IE. Microsoft even &lt;a href=&quot;http://web.archive.org/web/20040610054229/http://www.microsoft.com/windows/ie/previous/gallery/default.mspx&quot;&gt;had a gallery of Active Desktop widgets&lt;/a&gt;. So web-widgets-like functionality was around almost twelve years ago. As with many other Microsoft inventions, it was way too ahead of time.&lt;/p&gt;
&lt;p&gt;Another technology that played a role in inventing desktop gadgets is &lt;a href=&quot;http://www.microsoft.com/technet/scriptcenter/hubs/htas.mspx&quot;&gt;HTA&lt;/a&gt; – short HTML applications that run in a standalone way. You had to put your scripts (VBScript or JScript) and styles in a single HTML file, add a special description and rename the file extension to .hta. Here’s a sample code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;title&amp;gt;HTA Test&amp;lt;/title&amp;gt;
        &amp;lt;HTA:APPLICATION ID=&amp;quot;objTest&amp;quot; APPLICATIONNAME=&amp;quot;HTA Test&amp;quot; SCROLL=&amp;quot;yes&amp;quot; SINGLEINSTANCE=&amp;quot;yes&amp;quot;&amp;gt;
        &amp;lt;SCRIPT type=&amp;quot;text/javascript&amp;quot;&amp;gt;
            //some javascript code
        &amp;lt;/SCRIPT&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;!-- some html --&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You could access all ActiveX objects that your system provided – Scripting FileSystemObject, UserAccounts, &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/aa393260(VS.85).aspx&quot;&gt;WMI&lt;/a&gt; etc. – basically everything that was supported in &lt;a href=&quot;http://en.wikipedia.org/wiki/Windows_Script_Host&quot;&gt;WSH&lt;/a&gt; and &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/bstcxhf7(VS.85).aspx&quot;&gt;Script Runtime&lt;/a&gt;. If you were using classic ASP on the server, you could switch to writing HTAs with zero effort – language and all the objects would be the same. While any web-development IDEs could be used, there even was a special IDE for building HTAs – &lt;a href=&quot;http://www.htaedit.com/&quot;&gt;HTAEDIT&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So Microsoft had two nice technologies that weren’t actively used &amp;#8211; Active Desktop as a way to integrate web-application with desktop and HTA as a core for writing standalone client-side web applications. Both technologies combined both to create &lt;strong&gt;Microsoft Desktop Gadgets&lt;/strong&gt; - small standalone client-side web applications that run as dockable widgets on your desktop – pure HTML,CSS and JS packed with manifest file in an archive.&lt;/p&gt;
&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;
&lt;p&gt;If you double-click on this archive, gadget will get installed and can be moved to any place of your desktop. IE8 core is used to run them, so you get full support for CSS2.1, great level of javascript and other IE8 goodness.&lt;/p&gt;
&lt;p&gt;The gadgets concept was introduced In Windows Vista – but gadgets had to be positioned inside a special sidebar area – which is not very flexible. In Windows 7 you can put your gadgets wherever you want them to be.&lt;/p&gt;
&lt;p&gt;Here’s a screenshot how gadgets look like on my desktop:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://sharovatov.files.wordpress.com/2009/05/gadgetsscreenshot1.png&quot;&gt;&lt;img title=&quot;gadgets-screenshot[1]&quot; border=&quot;0&quot; alt=&quot;gadgets-screenshot[1]&quot; src=&quot;http://sharovatov.files.wordpress.com/2009/05/gadgetsscreenshot1_thumb.png?w=354&amp;#038;h=775&quot; width=&quot;354&quot; height=&quot;775&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Gadgets are especially useful when you have a widescreen monitor or two monitors configuration so that you’ve got much horizontal space, but even if you’ve got a normal monitor as gadgets can be freely positioned, you will find them useful.&lt;/p&gt;
&lt;p&gt;I use &lt;a href=&quot;http://www.arsecandle.org/twadget/&quot;&gt;Twitter&lt;/a&gt;, weather (standard), &lt;a href=&quot;http://gallery.live.com/liveItemDetail.aspx?li=aa4a0946-eee3-4af3-914d-ed0c66242523&quot;&gt;network traffic&lt;/a&gt; and &lt;a href=&quot;http://gallery.live.com/liveItemDetail.aspx?li=45c58820-e955-4802-9c2d-867b8b925c0a&quot;&gt;cpu meter&lt;/a&gt; gadgets.&lt;/p&gt;
&lt;p&gt;Awesome technology! I’m planning to build couple of my own gadgets and will definitely prepare a blog post on this :)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: It looks like Windows Mobile 6.5 will have support for similar gadgets
functionality!&lt;/p&gt;
&lt;h1 id=&quot;exploring-windows-desktop-gadgets&quot;&gt;Exploring Windows Desktop Gadgets&lt;/h1&gt;
&lt;p&gt;First of all, let’s get our hands dirty and create a simple gadget.&lt;/p&gt;
&lt;h2 id=&quot;creating-a-simple-gadget&quot;&gt;Creating a simple gadget&lt;/h2&gt;
&lt;p&gt;One of the things that was always bothering me was checking comments to my blog entries. There’re usually two ways to check for new comments on your blog – either by subscribing to comments RSS feed or by going to admin web-interface of the blog and checking for comments there. I don’t like first option because I’m subscribed to more than a hundred feeds in my Outlook so I only read them at the weekends when I’ve got enough free time. And I don’t particularly fancy logging to my blog every three-four hours to check for new
comments. So Windows 7 Desktop Gadget with my blog comments feed would perfectly suit my needs.&lt;/p&gt;
&lt;p&gt;Although this might not sound as a killer app to you, but it does its job and also perfectly shows how simple it is to build a gadget.&lt;/p&gt;
&lt;p&gt;First of all, as I’ve already said, Windows 7 Gadget is nothing more than just a HTML page with Javascript and CSS. So I use the same approach as if I had to parse my blog comments on a website – a simple HTML, a bit of CSS and a bit of AJAX. So gadget building comes down to building a client-side web-app and packing it.&lt;/p&gt;
&lt;h2 id=&quot;creating-a-web-app&quot;&gt;Creating a web-app&lt;/h2&gt;
&lt;p&gt;I created a &lt;a href=&quot;http://sharovatov.ru/gadgets/main.html&quot;&gt;simple page&lt;/a&gt; with a pretty &lt;a href=&quot;http://sharovatov.ru/gadgets/rss.js&quot;&gt;straight-forward javascript&lt;/a&gt;. If you take a look at window.onload js code, you’ll see the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;window.setInterval( function(){ getRSS(url); }, 5*60*1000); 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;meaning that every five minutes getRSS function is called.&lt;/p&gt;
&lt;p&gt;This is the “main loop” of our program. As our gadget is a desktop program written in javascript and since Javascript blocks UI when being executed, setInterval/setTimeout is the only one way to set the “main loop”.&lt;/p&gt;
&lt;p&gt;That’s how the javascript in this web-app works:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;getRSS function creates XMLHTTPRequest object and sends HTTP GET request to a href=&amp;quot;&lt;a href=&quot;http://sharovatov.wordpress.com/comments/feed/&amp;quot;&amp;gt;http://sharovatov.wordpress.com/comments/feed/&quot;&gt;http://sharovatov.wordpress.com/comments/feed/&amp;quot;&amp;gt;http://sharovatov.wordpress.com/comments/feed/&lt;/a&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;wordpress responds with XML file containing last ten comments from my blog&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;parseRSS function parses the XML and passes the resulting object to displayRSS which just dumps it to document.body&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It takes 15-20 minutes to write such a tiny piece of code. So now we’ve got a small web-application which is a very basic version of RSS reader.&lt;/p&gt;
&lt;p&gt;As you may notice, the script doesn’t work on sharovatov.ru. Cross-domain security restrictions is a reason for that – the script is located on one domain (sharovatov.ru) and it tries to request data from another domain (sharovatov.wordpress.com). However, if you save &lt;a href=&quot;http://sharovatov.ru/gadgets/main.html&quot;&gt;main.html&lt;/a&gt; page and &lt;a href=&quot;http://sharovatov.ru/gadgets/rss.js&quot;&gt;rss.js&lt;/a&gt; file to your machine, run main.html from
IE8 and confirm JS execution, you will see the comments feed displayed.&lt;/p&gt;
&lt;p&gt;As we’re done with functionality, it’s time to convert our small client-side web-app to a gadget.&lt;/p&gt;
&lt;h2 id=&quot;converting-to-a-gadget&quot;&gt;Converting to a gadget&lt;/h2&gt;
&lt;p&gt;All we need to do now is to add a special &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/aa965879(VS.85).aspx&quot;&gt;manifest&lt;/a&gt; file. It’s just an XML file with your gadget description. &lt;a href=&quot;http://sharovatov.ru/gadgets/gadget.xml&quot;&gt;Here’s mine&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That’s all. Now we pack these three files into a zip archive and rename its extension to &lt;code&gt;.gadget&lt;/code&gt;. Here’s &lt;a href=&quot;http://sharovatov.ru/gadgets/v0.2.gadget&quot;&gt;a link to what I came up with&lt;/a&gt;. Save it as test.gadget and double-click on it. If you then confirm gadget installation prompt, it will appear on the screen and the feed is downloaded and displayed.&lt;/p&gt;
&lt;p&gt;That’s the basics of creating a gadget, if you feel interested, read &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/aa965850(VS.85).aspx&quot;&gt;MSDN&lt;/a&gt; or follow my posts – I will
keep on writing about gadgets and in the next post I’ll show what my comments reader gadget will look like eventually :)&lt;/p&gt;
&lt;p&gt;This is the screenshot of a 20-minutes job:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://sharovatov.files.wordpress.com/2009/05/image1.png&quot;&gt;&lt;img title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;http://sharovatov.files.wordpress.com/2009/05/image_thumb1.png?w=193&amp;#038;h=318&quot; width=&quot;193&quot; height=&quot;318&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://sharovatov.files.wordpress.com/2009/05/image2.png&quot;&gt;&lt;img title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot;
src=&quot;http://sharovatov.files.wordpress.com/2009/05/image_thumb2.png?w=186&amp;#038;h=331&quot; width=&quot;186&quot; height=&quot;331&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Every five minutes the gadget is updated so I can clearly see whose comment is the last one and reply if needed. Very handy :)&lt;/p&gt;
&lt;h1 id=&quot;exploring-windows-desktop-gadgets-2-security-and-limitations&quot;&gt;Exploring Windows Desktop Gadgets #2 - security and limitations&lt;/h1&gt;
&lt;p&gt;First of all, let me repeat that gadget is a client-side web-application running in chromeless mode on your desktop. It’s similar to &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms536496(VS.85).aspx&quot;&gt;HTA&lt;/a&gt; but provides a whole new set of functionality and also has some restrictions compared to HTA.&lt;/p&gt;
&lt;h2 id=&quot;gadgets-security-model&quot;&gt;Gadgets security model&lt;/h2&gt;
&lt;p&gt;IE has always been the de-facto-standard platform for building powerful applications that require access to file system, &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/aa380245.aspx&quot;&gt;Cryptographic Service Provider&lt;/a&gt;, WMI and other OS functionality. This functionality is achieved by using ActiveX controls.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;But ActiveX can’t run without a user permission&lt;/strong&gt;! So by default javascript in a web-applications has quite strong security limitations. This security model can only be weaken by users choice - by allowing ActiveX controls to run or by adding a website to a trusted zone.&lt;/p&gt;
&lt;p&gt;But as gadgets are installed by user, so it’s his choice to run them, all functionality that MSHTML can provide is enabled (*). &lt;a href=&quot;http://msdn.microsoft.com/en-gb/library/bb508510(VS.85).aspx&quot;&gt;MSDN says&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The MSHTML runtime is configured with the set of permissions given to HTAs or the Local Machine Zone security configuration.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This rises a very important point – &lt;strong&gt;don’t install gadgets from non trusted sources&lt;/strong&gt;. Or if you do, please inspect the code before you install the gadget. As Gadget runs under current user account, it won’t be able to delete system32 directory or do any other critical damage to the system. But it will surely succeed in deleting your documents or photos.&lt;/p&gt;
&lt;p&gt;And of course, as any other Microsoft technology, Gadgets can be fully controlled by Group Policy.&lt;/p&gt;
&lt;p&gt;For more information on Gadgets security please read &lt;a href=&quot;http://msdn.microsoft.com/en-gb/library/bb508510(VS.85).aspx&quot;&gt;this&lt;/a&gt; and &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/bb498012.aspx&quot;&gt;this&lt;/a&gt; MSDN article.&lt;/p&gt;
&lt;h2 id=&quot;gadgets-limitations&quot;&gt;Gadgets limitations&lt;/h2&gt;
&lt;p&gt;The main limitation to me is that &lt;strong&gt;there’re no modal dialogs. &lt;/strong&gt;No alerts, no window.confirm, nothing. So if you want to do a quick debug, you have to dump data to the document itself or use a script debugger.&lt;/p&gt;
&lt;h1 id=&quot;exploring-windows-desktop-gadgets-3-settings-storage&quot;&gt;Exploring Windows Desktop Gadgets #3 - settings storage&lt;/h1&gt;
&lt;p&gt;This is the third post in Exploring Windows Desktop Gadgets series and it will be devoted to improving our comments feed reader gadget by adding settings storage functionality.&lt;/p&gt;
&lt;h2 id=&quot;settings-storage-theory&quot;&gt;Settings storage theory&lt;/h2&gt;
&lt;p&gt;Any desktop program has its own settings storage (ini files, xml files, etc.) or uses a global OS storage (registry).&lt;/p&gt;
&lt;p&gt;But in web-applications everything’s different – part of the functionality is provided by client (browser) and another part - by the server. Although it’s dead easy to store data on the server, on the client-side you can’t get access neither to file system nor to registry. (You actually can in IE, but this will require ActiveX scripting and therefore will ask user for an explicit permission.)&lt;/p&gt;
&lt;p&gt;Until very recent &lt;a href=&quot;http://dev.w3.org/html5/webstorage/&quot;&gt;DOM Storage specification draft&lt;/a&gt;, in most browsers you could only use cookies for storing some data on client side. However, IE5 introduced support for true client-side only storage – DOM Storage predecessor - &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms531424.aspx&quot;&gt;userData&lt;/a&gt;. So it took almost eight years for the whole browsers industry to define and support similar client-side storage approach. And right at the time as DOM Storage is being drafted by W3C, it gets support in IE8.&lt;/p&gt;
&lt;p&gt;The reason I’m telling you about DOM Storage in IE8 is that I have a strong feeling that this DOM Storage is used by Gadgets Platform to allow storing settings data for each gadget.&lt;/p&gt;
&lt;h2 id=&quot;settings-storage-practice&quot;&gt;Settings storage practice&lt;/h2&gt;
&lt;p&gt;Settings dialog is a modal window which opens on top of your gadget. As it’s modal, the only way you can close it is to press OK or CANCEL button in its UI. Similarly to the gadget itself, settings dialog is a HTML page displayed by MSHTML.&lt;/p&gt;
&lt;p&gt;As it would be useful to have comments feed URL and refresh frequency configurable, this is what I’ll add to my gadget:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://sharovatov.files.wordpress.com/2009/05/image3.png&quot;&gt;&lt;img title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;http://sharovatov.files.wordpress.com/2009/05/image_thumb3.png?w=317&amp;#038;h=345&quot; width=&quot;317&quot; height=&quot;345&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In the settings dialog only area outlined in red is actually a HTML file, title and OK/CANCEL buttons are provided by Gadgets Platform:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://sharovatov.files.wordpress.com/2009/05/image4.png&quot;&gt;&lt;img title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;http://sharovatov.files.wordpress.com/2009/05/image_thumb4.png?w=315&amp;#038;h=343&quot; width=&quot;315&quot; height=&quot;343&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To add the settings dialog to our gadget we’ll have to create a HTML file, let’s call it “settings.html”. To save comments feed URL and refresh frequency, we only need two fields and couple of labels. &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://sharovatov.ru/gadgets/v0.3/settings.html&quot;&gt;This is what I came up with&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If  you look at the JS code, you’ll see that it does two things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;calls &lt;strong&gt;System.Gadget.Settings.read&lt;/strong&gt; function to retrieve data from the Gadget settings storage&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;defines a handler for &lt;strong&gt;System.Gadget.onSettingsClosing&lt;/strong&gt; event&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There’s a &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/bb508511(VS.85).aspx&quot;&gt;complete reference of Gadget platform events and properties on MSDN&lt;/a&gt;, but for our simple case it’s enough to say that &lt;strong&gt;System.Gadget.Settings.read&lt;/strong&gt; reads object from the storage by its name, &lt;strong&gt;System.Gadget.Settings.write&lt;/strong&gt; writes object to the storage with its name and &lt;strong&gt;System.Gadget.onSettingsClosing&lt;/strong&gt; event fires when the settings dialog is closing. Settings store is separate for each gadget so don’t be afraid that your settings names can be accessed from other gadgets.&lt;/p&gt;
&lt;p&gt;So in the &lt;strong&gt;window.onload&lt;/strong&gt; handler of settings.html I try to get the data from the storage and set inputs values accordingly, and when the gadget is closing, I check if OK was pressed (&lt;strong&gt;e.closeAction == e.Action.commit&lt;/strong&gt;) and if so, save inputs values into the storage. Dead easy.&lt;/p&gt;
&lt;p&gt;Now we have to attach settings.html page to our gadget. This is done by adding the following javascript code to main.html file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;System.Gadget.settingsUI = &amp;quot;settings.html&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now our Gadget will show this button in the control area:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://sharovatov.files.wordpress.com/2009/05/image5.png&quot;&gt;&lt;img title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;http://sharovatov.files.wordpress.com/2009/05/image_thumb5.png?w=211&amp;#038;h=321&quot; width=&quot;211&quot; height=&quot;321&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And if you click on it, you’ll see your settings.html page rendered in a nice UI:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://sharovatov.files.wordpress.com/2009/05/image3.png&quot;&gt;&lt;img title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;http://sharovatov.files.wordpress.com/2009/05/image_thumb3.png?w=317&amp;#038;h=345&quot; width=&quot;317&quot; height=&quot;345&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So now we have a settings dialog that reads and writes data from the Gadget settings store.&lt;/p&gt;
&lt;p&gt;What we also need to do is to make our main.html read comments feed URL and refresh frequency from settings store as well. If you look at &lt;a href=&quot;http://sharovatov.ru/gadgets/v0.3/rss.js&quot;&gt;this javascript&lt;/a&gt;, you’ll see how it’s changed from &lt;a href=&quot;http://sharovatov.ru/gadgets/rss.js&quot;&gt;the previous version&lt;/a&gt;. Basically, I just
did the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;rss.js now doens’t have blog comments feed URL and refresh frequency hardcoded, instead, it reads these values from settings store:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; window.onload = function(){
     //read data from storage
     var data = getDataFromStorage();

     if (&amp;quot;&amp;quot; != data.url &amp;amp;amp;&amp;amp;amp;
     &amp;quot;&amp;quot; != data.frequency &amp;amp;amp;&amp;amp;amp;
     /^(\d*)(\.?)(\d*)$/.match(data.frequency)) startLoop(data);
     else document.body.innerHTML = &amp;quot;&amp;lt;b&amp;gt;Please make sure you&amp;quot;+
     &amp;quot;configured everything properly&amp;lt;/b&amp;gt;&amp;quot;;

 };
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;System.Gadget.onSettingsClosed &lt;/strong&gt;event handler is used to restart main loop with new settings:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; System.Gadget.onSettingsClosed = function(){
     var data = getDataFromStorage();
     startLoop(data);
 };
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;And startLoop function has been rewritten to allow only one main loop (but that&amp;#39;s pretty irrelevant to Gadgets platform):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; var startLoop = function(data){
     //clear existing interval (if present)
     if (&amp;quot;undefined&amp;quot; != typeof arguments.callee.intervalHandler)
         window.clearInterval(arguments.callee.intervalHandler);
     //retrieve feed again
     getRSS(data.url);
     //set new main loop
     arguments.callee.intervalHandler = window.setInterval(
         function(){ getRSS(data.url); }, data.frequency * 1000
     );
 };
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And here we go – &lt;a href=&quot;http://sharovatov.ru/gadgets/v0.3/rss-comments.gadget&quot;&gt;gadget’s ready&lt;/a&gt; :)&lt;/p&gt;
&lt;p&gt;Save it as &lt;strong&gt;rss-comments.gadget&lt;/strong&gt; to your computer and install it – you will be able to set comments feed URL (so you can start using it to watch comments on your own blog) and refresh frequency in seconds.&lt;/p&gt;
&lt;p&gt;In the next posts of this series I will cover flyouts, make the gadget look really slick with UI enhancements Gadget platform provides, show how debugging gadgets can be really effective and dive into more details of the Gadgets platform. Stay tuned for more interesting stuff!&lt;/p&gt;
&lt;h1 id=&quot;best-windows-7-gadgets&quot;&gt;Best Windows 7 gadgets&lt;/h1&gt;
&lt;p&gt;Found the best blog with windows 7 gadgets &amp;#8211; &lt;a title=&quot;http://blog.orbmu2k.de/&quot;
href=&quot;http://blog.orbmu2k.de/&quot;&gt;&lt;a href=&quot;http://blog.orbmu2k.de/&quot;&gt;http://blog.orbmu2k.de/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I installed Memory usage gadget, updated version of CPU Usage, Network traffic, Volume control and Top 5 processes gadgets. Really great!&lt;/p&gt;
&lt;p&gt;I also downloaded all Windows 7 themes from &lt;a title=&quot;http://windows.microsoft.com/en-US/Windows7/Personalize&quot; href=&quot;http://windows.microsoft.com/en-US/Windows7/Personalize&quot;&gt;&lt;a href=&quot;http://windows.microsoft.com/en-US/Windows7/Personalize&quot;&gt;http://windows.microsoft.com/en-US/Windows7/Personalize&lt;/a&gt;&lt;/a&gt; page – they are just awesome :)&lt;/p&gt;
&lt;p&gt;Now the right side of my 2nd monitor looks like that:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://sharovatov.files.wordpress.com/2009/05/gadgetsscreenshot21.jpg&quot;&gt;&lt;img title=&quot;gadgets-screenshot2[1]&quot; border=&quot;0&quot; alt=&quot;gadgets-screenshot2[1]&quot; src=&quot;http://sharovatov.files.wordpress.com/2009/05/gadgetsscreenshot21_thumb.jpg?w=444&amp;#038;h=1025&quot; width=&quot;444&quot; height=&quot;1025&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;pomodoro-windows-7-gadget&quot;&gt;Pomodoro Windows 7 gadget&lt;/h1&gt;
&lt;p&gt;I was really inspired by &lt;a href=&quot;http://tomatoi.st/&quot;&gt;&lt;a href=&quot;http://tomatoi.st/&quot;&gt;http://tomatoi.st/&lt;/a&gt;&lt;/a&gt; web service which provides an easy to use web interface for &lt;a href=&quot;http://www.pomodorotechnique.com/&quot;&gt;Pomodoro time management technique&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But unfortunately, tomatoi.st is down due to overload too often, so I spent 20 minutes and prepared a &lt;a href=&quot;http://sharovatov.ru/pomodoro.gadget&quot;&gt;simple Windows 7 pomodoro gadget&lt;/a&gt;. It does just what’s needed – showing timers:&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;http://sharovatov.files.wordpress.com/2009/12/image.png?w=188&amp;#038;h=158&quot; width=&quot;188&quot; height=&quot;158&quot;&gt;&lt;/p&gt;
&lt;p&gt;Click on “Work” button to start 25 minutes work interval, “short br” – to get 5 minutes short break timeout, “long br” for a 15 minutes long break.&lt;/p&gt;
&lt;p&gt;It’s dead easy to download and install – just click &lt;a href=&quot;http://sharovatov.ru/pomodoro.gadget&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Or you can inspect the code if you want to – gadget is just a zip file with html, css and js inside.&lt;/p&gt;
&lt;p&gt;Ah, and I have to warn you – when a period of time is over, it starts playing Alert.wav every second until you set a new period.&lt;/p&gt;
&lt;p&gt;For more information about Windows 7 gadgets you read the following posts on my blog:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://sharovatov.wordpress.com/2009/05/14/windows-7-desktop-gadgets/&quot;&gt;introduction to the gadgets platform&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://sharovatov.wordpress.com/2009/05/27/exploring-windows-desktop-gadgets/&quot;&gt;Exploring Windows Desktop Gadgets&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://sharovatov.wordpress.com/2009/05/28/exploring-windows-desktop-gadgets-2-security-and-limitations/&quot;&gt;Exploring Windows Desktop Gadgets #2 – security and limitations&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://sharovatov.wordpress.com/2009/05/29/exploring-windows-desktop-gadgets-3-settings-storage/&quot;&gt;Exploring Windows Desktop Gadgets #3 – settings storage&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://sharovatov.wordpress.com/2009/06/01/exploring-windows-desktop-gadgets-4-flyouts/&quot;&gt;Exploring Windows Desktop Gadgets #4 – flyouts&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Or read &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/dd370869%28VS.85%29.aspx&quot;&gt;MSDN&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;P.S. this gadget doesn’t have any settings or flyout or anything else – it’s very simple.&lt;/p&gt;
&lt;h1 id=&quot;gadgets-flyouts&quot;&gt;Gadgets Flyouts&lt;/h1&gt;
&lt;p&gt;As it’s practical to have small gadgets which don’t take much of screen space, it’s not possible to display much information on them. That’s why Gadget Platform provides a way to add a &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms723669%28VS.85%29.aspx&quot;&gt;flyout&lt;/a&gt; object to your gadget.&lt;/p&gt;
&lt;h2 id=&quot;flyout-theory&quot;&gt;Flyout theory&lt;/h2&gt;
&lt;p&gt;In theory, flyout is supposed to present additional or detailed information about anything you choose.&lt;/p&gt;
&lt;p&gt;The great example of flyout use case is standard Windows 7 Stocks gadget – it shows basic stocks rates information in the main window and the if you click on the stock rate you’re interested, MSN Money chart for this stock rate is shown in a flyout. Here’s how it looks:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://sharovatov.files.wordpress.com/2009/06/image.png&quot;&gt;&lt;img title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;http://sharovatov.files.wordpress.com/2009/06/image_thumb.png?w=415&amp;#038;h=170&quot; width=&quot;415&quot; height=&quot;170&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Flyout is a separate HTML page which you attach to your gadget similarly to &lt;a href=&quot;http://sharovatov.wordpress.com/2009/05/29/exploring-windows-desktop-gadgets-3-settings-storage/&quot;&gt;settings window&lt;/a&gt; – by specifying the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;System.Gadget.Flyout.file = &amp;#39;flyout.html&amp;#39;; 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Another difference from settings dialog is that settings dialog is only accessible by clicking on a options button:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://sharovatov.files.wordpress.com/2009/06/image1.png&quot;&gt;&lt;img title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;http://sharovatov.files.wordpress.com/2009/06/image_thumb1.png?w=162&amp;#038;h=151&quot; width=&quot;162&quot; height=&quot;151&quot;&gt;&lt;/a&gt; and flyout is shown/hidden programmatically by setting its &lt;strong&gt;show&lt;/strong&gt; property to &lt;strong&gt;true&lt;/strong&gt;/&lt;strong&gt;false&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//show flyout
System.Gadget.Flyout.show = true;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When you set &lt;strong&gt;show&lt;/strong&gt; to &lt;strong&gt;true&lt;/strong&gt;, flyout html will be rendered and its window will be automatically positioned depending on the content size and gadget’s position.&lt;/p&gt;
&lt;p&gt;Flyout provides two events - &lt;strong&gt;System.Gadget.Flyout.onShow&lt;/strong&gt; which is fired when the flyout is shown and &lt;strong&gt;System.Gadget.Flyout.onHide&lt;/strong&gt; which is fired when the flyout is closed.&lt;/p&gt;
&lt;p&gt;To set flyout content to something meaningful, you have to get access to flyout’s document from your gadget main window javascript. This is achieved by using &lt;strong&gt;System.Gadget.Flyout.document&lt;/strong&gt; property – but the call to it will throw an exception if flyout is hidden, so make sure you either check &lt;strong&gt;System.Gadget.Flyout.show&lt;/strong&gt; property for &lt;strong&gt;true&lt;/strong&gt; or wrap the code which uses &lt;strong&gt;System.Gadget.Flyout.document&lt;/strong&gt; in try-catch block.&lt;/p&gt;
&lt;p&gt;Note that you can also access main gadget page from the flyout by using &lt;strong&gt;System.Gadget.document&lt;/strong&gt; property which is always available.&lt;/p&gt;
&lt;p&gt;Enough theory, let’s modify our Gadget to show only comments titles on the main page and render a flyout with comment’s content when title is clicked.&lt;/p&gt;
&lt;h2 id=&quot;practice&quot;&gt;Practice&lt;/h2&gt;
&lt;p&gt;So here’s what I did:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;created &lt;a href=&quot;http://sharovatov.ru/gadgets/v0.4/flyout.html&quot;&gt;flyout.html&lt;/a&gt; file&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;referenced it as &lt;code&gt;System.Gadget.Flyout.file = &amp;#39;flyout.html&amp;#39;;&lt;/code&gt; in &lt;a href=&quot;http://sharovatov.ru/gadgets/v0.4/rss.js&quot;&gt;rss.js&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;modified &lt;strong&gt;displayRSS&lt;/strong&gt; function to store current comment object in paragraph’s expando property&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;added &lt;strong&gt;toggleFlyout&lt;/strong&gt; function to the &lt;a href=&quot;http://sharovatov.ru/gadgets/v0.4/rss.js&quot;&gt;rss.js&lt;/a&gt; file which passes the comment object from the &lt;strong&gt;&lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;&lt;/strong&gt;’s expando property to &lt;code&gt;System.Gadget.Flyout.document&lt;/code&gt; and displays the flyout&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The resulting files and the compressed gadget are &lt;a href=&quot;http://sharovatov.ru/gadgets/v0.4/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the next posts I’ll show what styling options we’ve got in Gadgets Platform, will proceed talking about gadgets security and talk about advanced javascript techniques that can be used in gadgets.&lt;/p&gt;
&lt;h1 id=&quot;pomodoro-windows-7-gadget&quot;&gt;Pomodoro Windows 7 gadget&lt;/h1&gt;
&lt;p&gt;I was really inspired by &lt;a href=&quot;http://tomatoi.st/&quot;&gt;&lt;a href=&quot;http://tomatoi.st/&quot;&gt;http://tomatoi.st/&lt;/a&gt;&lt;/a&gt; web service which provides an easy to use web interface for &lt;a href=&quot;http://www.pomodorotechnique.com/&quot;&gt;Pomodoro time management technique&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But unfortunately, tomatoi.st is down due to overload too often, so I spent 20 minutes and prepared a &lt;a href=&quot;http://sharovatov.ru/pomodoro.gadget&quot;&gt;simple Windows 7 pomodoro gadget&lt;/a&gt;. It does just what’s needed – showing timers:&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;http://sharovatov.files.wordpress.com/2009/12/image.png?w=188&amp;#038;h=158&quot; width=&quot;188&quot; height=&quot;158&quot;&gt;&lt;/p&gt;
&lt;p&gt;Click on “Work” button to start 25 minutes work interval, “short br” – to get 5 minutes short break timeout, “long br” for a 15 minutes long break.&lt;/p&gt;
&lt;p&gt;It’s dead easy to download and install – just click &lt;a href=&quot;http://sharovatov.ru/pomodoro.gadget&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Or you can inspect the code if you want to – gadget is just a zip file with html, css and js inside.&lt;/p&gt;
&lt;p&gt;Ah, and I have to warn you – when a period of time is over, it starts playing Alert.wav every second until you set a new period.&lt;/p&gt;
&lt;p&gt;For more information about Windows 7 gadgets you read the following posts on my blog:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://sharovatov.wordpress.com/2009/05/14/windows-7-desktop-gadgets/&quot;&gt;introduction to the gadgets platform&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://sharovatov.wordpress.com/2009/05/27/exploring-windows-desktop-gadgets/&quot;&gt;Exploring Windows Desktop Gadgets&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://sharovatov.wordpress.com/2009/05/28/exploring-windows-desktop-gadgets-2-security-and-limitations/&quot;&gt;Exploring Windows Desktop Gadgets #2 – security and limitations&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://sharovatov.wordpress.com/2009/05/29/exploring-windows-desktop-gadgets-3-settings-storage/&quot;&gt;Exploring Windows Desktop Gadgets #3 – settings storage&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://sharovatov.wordpress.com/2009/06/01/exploring-windows-desktop-gadgets-4-flyouts/&quot;&gt;Exploring Windows Desktop Gadgets #4 – flyouts&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Or read &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/dd370869%28VS.85%29.aspx&quot;&gt;MSDN&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;P.S. this gadget doesn’t have any settings or flyout or anything else – it’s very simple.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Windows 7 Accelerators Platform</title>
            <link href="/posts/2009-05-win7acclplatfm.html"/>
            <updated>2009-05-01T00:00:00.000Z</updated>
            <id>/posts/2009-05-win7acclplatfm.html</id>
            <content type="html">&lt;p&gt;Cool, I just found out that great &lt;a href=&quot;http://www.microsoft.com/windows/internet-explorer/features/accelerators.aspx?tabid=1&amp;amp;catid=1&quot;&gt;accelerators feature&lt;/a&gt; that’s been introduced in IE8 is a part of Windows 7 API as &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/dd565720(VS.85).aspx&quot;&gt;Accelerators Platform&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The whole concept is really useful – Accelerators Platform provides a unified way to enhance an text-operating application with cross-application plug-ins.&lt;/p&gt;
&lt;p&gt;Accelerators Platform provides an abstraction layer between applications and accelerators:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Accelerators operate with text selection with help of web services&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;application implementing Accelerators Platform API can use Accelerators&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;user running the application can select a text and choose an accelerator that will use this selection&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So it’s like a plug-in platform for text selection plug-ins where plug-ins are application independent and stored in one place, so if an accelerator is installed once, it will be available in any application that supports Accelerators Platform.&lt;/p&gt;
&lt;p&gt;The fact that Accelerators become application-independent gives the following benefits:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;usability is better as users have similar behaviour pattern across applications, and it’s easier for them to get used to your application&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;you as an application developer don’t have to reinvent the wheel and implement useful text selection enhanced functionality and work on a plug-in architecture&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;you as an application developer don’t have to maintain a list of supported text selection plug-ins – they can be found and installed easily from &lt;a href=&quot;http://www.ieaddons.com/en/accelerators/&quot;&gt;here&lt;/a&gt; – the list of accelerators is huge!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;if you want to create your own accelerator for your application, it’s well documented and dead easy - &lt;a href=&quot;http://sharovatov.wordpress.com/2009/04/24/various-ie8-accelerators-thepiratebay-phpnet-pagerank-alexa/&quot;&gt;I’ve created 6 accelerators just in 20 minutes!&lt;/a&gt; Or your users can do it!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So by supporting Accelerators Platform in your app you allow users to do with the text whatever they like and whatever they are used to!&lt;/p&gt;
&lt;p&gt;Just imagine – wouldn’t it be wonderful to be able to select address in any application, right click on it and see where it’s located on the map? Or select unknown word in any application and see its definition in Wikipedia? Or select a function name that you’d like to refresh you memory about and see what php.net or msdn have to say? Or select any text and translate it to other language in one click? Or check how much selected TV model costs on ebay?&lt;/p&gt;
&lt;p&gt;As Microsoft said, Office 2010 would have Accelerators platform support, and I bet other serious software will support Accelerators Platform as well. Here’s Word 2010 screenshot from &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/dd565720(VS.85).aspx&quot;&gt;msdn&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://sharovatov.files.wordpress.com/2009/05/dd565720_ie8_win7_word_accelenusvs_85.jpg&quot;&gt;&lt;img title=&quot;Dd565720_ie8_win7_word_accel(en-us,VS_85)&quot; border=&quot;0&quot; alt=&quot;Dd565720_ie8_win7_word_accel(en-us,VS_85)&quot; src=&quot;http://sharovatov.files.wordpress.com/2009/05/dd565720_ie8_win7_word_accelenusvs_85_thumb.jpg?w=340&amp;#038;h=447&quot; width=&quot;340&quot; height=&quot;447&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For more details and technical description of Accelerators Platform please visit &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/dd565720(VS.85).aspx&quot;&gt;this MDSN article&lt;/a&gt; and &lt;a href=&quot;http://blogs.msdn.com/ie/archive/2009/05/07/accelerator-platform-on-windows-7.aspx&quot;&gt;this IE Team Blog entry&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So go and support Accelerators Platform in your app!&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Windows 7 taskbar - new approach</title>
            <link href="/posts/2009-05-win7taskbar.html"/>
            <updated>2009-05-01T00:00:00.000Z</updated>
            <id>/posts/2009-05-win7taskbar.html</id>
            <content type="html">&lt;p&gt;I just love the way programs are organised on new Windows 7 taskbar.&lt;/p&gt;
&lt;h2 id=&quot;history&quot;&gt;History&lt;/h2&gt;
&lt;p&gt;In earlier Windows versions to get the program window shown you had to do two things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;check if the program is running by looking at the taskbar and maximise it window if it’s there&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;if it’s not running, you had to launch it from quick launch or other place&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This approach has some major flows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;when you just need a program window to be shown, you have to do a cognitive effort to find where to get it from – either launch the program from quicklaunch (or somewhere else) or maximise its window from the taskbar&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;if you have, say, ten commonly used programs and put them on a quicklaunch and then open all them up, you’ve suddenly got quicklaunch icons just taking space and doing nothing as the programs are already opened. And you’ve got your programs’ icons in the taskbar – so you effectively have two icons for every program – one for launching a program and one for controlling its window state.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;nowadays&quot;&gt;Nowadays&lt;/h2&gt;
&lt;p&gt;In windows 7 the new approach is taken.&lt;/p&gt;
&lt;p&gt;Basically, taskbar and quick launch are combined in one place and then enhanced a lot.&lt;/p&gt;
&lt;p&gt;The concept is just great - you don’t need to check if a program is running or not to get it shown – you just click on its icon and if its running, you’ll get its window, otherwise it will launch and you will still get its window. Less cognitive effort, better usability.&lt;/p&gt;
&lt;p&gt;One of the implications of this approach is that the space on the taskbar is saved by having “program-launching” and “window-managing” controls combined.&lt;/p&gt;
&lt;p&gt;Here’s a screenshot:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://sharovatov.files.wordpress.com/2009/05/sidebar_screenshot.jpg&quot;&gt;&lt;img title=&quot;sidebar_screenshot&quot; border=&quot;0&quot; alt=&quot;sidebar_screenshot&quot; src=&quot;http://sharovatov.files.wordpress.com/2009/05/sidebar_screenshot_thumb.jpg?w=640&amp;#038;h=306&quot; width=&quot;640&quot; height=&quot;306&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As you can see, Far, Explorer and Microsoft Word are not launched, Outlook, Messenger, Sticky Notes, Live Writer and IE8 are running.&lt;/p&gt;
&lt;p&gt;As you can also notice on the screenshot, multiple instances of IE8 are grouped and if you hover them, that’s what you’ll see:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://sharovatov.files.wordpress.com/2009/05/sidebar_screenshot2.jpg&quot;&gt;&lt;img title=&quot;sidebar_Screenshot2&quot; border=&quot;0&quot; alt=&quot;sidebar_Screenshot2&quot; src=&quot;http://sharovatov.files.wordpress.com/2009/05/sidebar_screenshot2_thumb.jpg?w=619&amp;#038;h=500&quot; width=&quot;619&quot; height=&quot;500&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So managing multiple program instances is really easy – when you hover on an item, its window appears on the screen so you can preview if this window is what you were looking for and click on it to open. You can also close any window from the group right from the taskbar.&lt;/p&gt;
&lt;p&gt;Here’s a screenshot when there’s many IE8 tabs opened:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://sharovatov.files.wordpress.com/2009/05/sidebar_screenshot3.jpg&quot;&gt;&lt;img title=&quot;sidebar_Screenshot3&quot; border=&quot;0&quot; alt=&quot;sidebar_Screenshot3&quot; src=&quot;http://sharovatov.files.wordpress.com/2009/05/sidebar_screenshot3_thumb.jpg?w=628&amp;#038;h=538&quot; width=&quot;628&quot; height=&quot;538&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Again, when you hover on an item, its window is shown, so you either click on it to make it active or close it down.&lt;/p&gt;
&lt;p&gt;Another great interface solution is displaying progress bars directly on the taskbar. For example, here’s how IE8 displays download progress bar:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://sharovatov.files.wordpress.com/2009/05/sidebar_screenshot4.jpg&quot;&gt;&lt;img title=&quot;sidebar_Screenshot4&quot; border=&quot;0&quot; alt=&quot;sidebar_Screenshot4&quot; src=&quot;http://sharovatov.files.wordpress.com/2009/05/sidebar_screenshot4_thumb.jpg?w=499&amp;#038;h=144&quot; width=&quot;499&quot; height=&quot;144&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And all the features I showed is just a part of all the goodness Windows 7 taskbar introduces.&lt;/p&gt;
&lt;p&gt;So yes, I agree with Gizmodo that &lt;a href=&quot;http://gizmodo.com/5131933/giz-explains-why-the-windows-7-taskbar-beats-mac-os-xs-dock&quot;&gt;Windows 7 Taskbar is much better than MAC OS X dock&lt;/a&gt;.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Firefox Build Your Own Browser – a poor copy of IEAK?</title>
            <link href="/posts/2009-06-fx-poor-ieak.html"/>
            <updated>2009-06-01T00:00:00.000Z</updated>
            <id>/posts/2009-06-fx-poor-ieak.html</id>
            <content type="html">&lt;p&gt;Mozilla team recently announced that version 3.5 of Firefox browser will come with a bunch of features that will provide companies and individuals to build their own versions of Firefox.&lt;/p&gt;
&lt;p&gt;According to &lt;a href=&quot;http://www.pcworld.com/businesscenter/article/166328/mozilla_to_let_enterprises_build_custom_firefox_browsers.html&quot;&gt;PCWORLD&lt;/a&gt;, Mike Beltzner, director of Firefox at Mozilla Corp. said:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Build Your Own Browser program is a good fit for enterprises that want to create a customized browser that can be easily installed across multiple corporate desktops&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I couldn’t find exact details what’s going to be available for customizers, but different sources say that it’s a &lt;a href=&quot;http://labs.mozilla.com/projects/firefox-personas/&quot;&gt;Personas&lt;/a&gt; project combined with &lt;a href=&quot;http://www.mozilla.org/projects/cck/firefox/&quot;&gt;CCK&lt;/a&gt;. So you can setup your company logo, bookmarks, home page, search engines and do other cosmetic changes to the browser. It’s obvious that Mozilla wants to gain some market share in corporations where IE is 100%. But if “Build Your Own Browser” campaignhas CCK as a core, than it’s just a usual marketing hype and nothing else. It can&amp;#39;t even be compared to IEAK&lt;/p&gt;
&lt;p&gt;There’re a few reasons, Mike, why IE is so wide-spread in corporations. First reason is that it supports &lt;strong&gt;proper&lt;/strong&gt; customisation through &lt;a href=&quot;http://technet.microsoft.com/en-us/ie/bb219517.aspx&quot;&gt;IEAK&lt;/a&gt;, second - if IEAK is not enough, IE can be fully configured through Group Policy, third – it supports ActiveX which is a must-have for building real intranet applications. Passport scanners, barcode readers, label printers, CCTV – all this hardware automation is done through ActiveX.&lt;/p&gt;
&lt;p&gt;So until Firefox becomes a real platform for building intranet web-applications and gains a proper customisation and integration with AD, it’s not going to be on the corporate market.&lt;/p&gt;
&lt;p&gt;For reference, read &lt;a href=&quot;http://blogs.msdn.com/ie/archive/2006/02/21/536353.aspx&quot;&gt;this blog post&lt;/a&gt;.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Useful JS tips - getBoundingClientRect()</title>
            <link href="/posts/2009-06-getboundingrect.html"/>
            <updated>2009-06-01T00:00:00.000Z</updated>
            <id>/posts/2009-06-getboundingrect.html</id>
            <content type="html">&lt;p&gt;What do you use to get element’s offset? Looping through its parents and summing offsetLeft/offsetTop numbers? I bet you had problems with it. Well, I did, especially when additional positioning context was generated by an element with position!=static.&lt;/p&gt;
&lt;p&gt;10 years ago in IE5.0 Microsoft invented a better way - &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms536433(VS.85).aspx&quot;&gt;getBoundingClientRect()&lt;/a&gt; method.&lt;/p&gt;
&lt;p&gt;It’s been &lt;a href=&quot;http://www.quirksmode.org/blog/archives/2008/02/the_cssom_view.html&quot;&gt;popularised by PPK&lt;/a&gt;, specified in &lt;a href=&quot;http://www.w3.org/TR/cssom-view/#the-getclientrects&quot;&gt;cssom-view spec&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/En/DOM/Element.getBoundingClientRect&quot;&gt;copied by Firefox 3&lt;/a&gt;, Opera 9, Chrome 2, Safari; &lt;a href=&quot;http://ejohn.org/blog/getboundingclientrect-is-awesome/&quot;&gt;used in jQuery&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;element.getBoundingClientRect()&lt;/code&gt; basically returns the object containing this element’s coordinates according to the window element. So you don’t have to do a loop, just call this method once and get the results. The only thing it doesn’t count for is scrolling offset, which can be calculated easily.&lt;/p&gt;
&lt;p&gt;Extremely useful, thanks Microsoft IETeam!&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>HTML5 video tag and Internet Explorer</title>
            <link href="/posts/2009-06-html5video.html"/>
            <updated>2009-06-01T00:00:00.000Z</updated>
            <id>/posts/2009-06-html5video.html</id>
            <content type="html">&lt;p&gt;It’s interesting to see how popular &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt; tags are getting now. Every browser tries to implement it as soon as it can and shout about it as loud as possible. And now people are even starting blaming IE for being old and not supporting inline video and audio.&lt;/p&gt;
&lt;p&gt;The whole situation reminds me of AJAX where original concept was invented by Microsoft (actual ActiveX was shipped with IE5 in 1999), then it was standardised by W3C (in a different way), then implemented by other browsers, and then people started accusing IE for not supporting this new W3C standard.&lt;/p&gt;
&lt;p&gt;The same thing is now happening with inline video/audio playback concept, which has been introduced in IE2 in 1995, almost 15 years ago. Yes, 15 years ago, when W3C has been just founded and was still asking &lt;a href=&quot;http://www.csail.mit.edu/&quot;&gt;MIT/CSAIL&lt;/a&gt; to join. And now this functionality is being spec’ed in HTML5 as &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt; tags. Opera, Firefox, Safari and Google Chrome start supporting &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt; and are making a loud marketing message of it.&lt;/p&gt;
&lt;p&gt;The original concept that was introduced in IE2 (and supported in following versions) was adding a &lt;code&gt;DYNSRC&lt;/code&gt; attribute to &lt;code&gt;IMG&lt;/code&gt; element:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;img src=&amp;quot;cover.gif&amp;quot; dynsrc=&amp;quot;clock.avi&amp;quot; controls&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When IE saw dynsrc attribute, it tried loading the movie and playing it. “Controls” attribute made IE show simple playback controls.&lt;/p&gt;
&lt;p&gt;This is how it looked like in IE3:&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;ie3&quot; border=&quot;0&quot; alt=&quot;ie3&quot; src=&quot;http://sharovatov.files.wordpress.com/2009/06/ie3.gif?w=387&amp;#038;h=602&quot; width=&quot;387&quot; height=&quot;602&quot;&gt;&lt;/p&gt;
&lt;p&gt;However, in future versions the support for DYNSRC was limited to make developers to switch to other ways (&lt;code&gt;&amp;lt;object&amp;gt;&lt;/code&gt;/&lt;code&gt;&amp;lt;embed&amp;gt;&lt;/code&gt;/SMIL video). In IE5 no controls were shown, in IE7 &lt;code&gt;DYNSRC&lt;/code&gt; disappeared.&lt;/p&gt;
&lt;p&gt;World changes, and now the functionality that nobody’s been using for a decade seems really new and interesting. It’s great that WHATWG is spending time on defining clear standard on how this should work and it’s really cool that Chrome, Firefox, Opera and Safari already support this draft. Of course, Silverlight supports greater level of RIA, but giving that IE Team is now really focused on following public standards, &lt;/p&gt;
&lt;p&gt;I hope that in IE9 we’ll have native support for &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt;/&lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt; as we had native support for XMLHttpRequest in IE7.&lt;/p&gt;
&lt;p&gt;But my point is – credit for inline video playback functionality invention should be definitely given to IE2.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Efficient IE version targeting</title>
            <link href="/posts/2009-06-ie-version-targeting.html"/>
            <updated>2009-06-01T00:00:00.000Z</updated>
            <id>/posts/2009-06-ie-version-targeting.html</id>
            <content type="html">&lt;p&gt;When you’re writing a web page, you have to keep in mind that IE6 and IE7 have higher market share than all other browsers combined and IE8 has only started gaining popularity. So in most projects you have to support IE6 and IE7, even though IE6 support for CSS2.1 has a significant amount of bugs and issues. IE7 was slightly better and IE8 provides full CSS2.1 support, which is nice.&lt;/p&gt;
&lt;p&gt;Some web-developers whose fanatic hatred to IE blows out common sense, &lt;a href=&quot;http://sharovatov.wordpress.com/2009/05/22/universal-internet-explorer-6-css/&quot;&gt;propose really weird “solutions”&lt;/a&gt;, while all sane people support all their target audience browsers with &lt;a href=&quot;http://marketshare.hitslink.com/browser-market-share.aspx?qprid=2&quot;&gt;significant market share&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So we have three IE versions with different level of CSS support. One of the most often mentioned issues is IE6’s lack of support for &lt;a href=&quot;http://www.w3.org/TR/CSS2/selector.html#dynamic-pseudo-classes&quot;&gt;&lt;code&gt;:hover&lt;/code&gt;pseudo class&lt;/a&gt; on elements other than links. IE7 and IE8 support &lt;code&gt;:hover&lt;/code&gt; fully. Another sample is that IE8 supports &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/cc304082(VS.85).aspx#gen_content&quot;&gt;&lt;code&gt;:after&lt;/code&gt; and &lt;code&gt;:before&lt;/code&gt; generated content elements&lt;/a&gt; while IE6 and IE7 don’t. These are just two samples that spring to my mind just to show that level of CSS2.1 support really differs.&lt;/p&gt;
&lt;p&gt;The first thing that most web-developers would use to specify a CSS rule for different browsers would be CSS hacks. But this leads to problems. For example, when IE7 wasn’t yet published, and people were using IE6, many developers used star selector bug to fix CSS2.1 issues in IE. When IE7 was shipped, it fixed support for star hack, but didn’t fix all the CSS2.1 issues. So using CSS hacks is &lt;strong&gt;perfectly backwards compatible&lt;/strong&gt; – you know in which already shipped browsers and their versions it works – but is &lt;strong&gt;not future-compatible&lt;/strong&gt;. This is because CSS hacks do not provide an obvious mechanism for a version targeting.&lt;/p&gt;
&lt;h2 id=&quot;conditional-comments-to-rescue&quot;&gt;Conditional comments to rescue&lt;/h2&gt;
&lt;p&gt;Microsoft was aware that this problem would occur and in IE5 (and all newer versions, of course) they included &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms537512(VS.85).aspx&quot;&gt;conditional comments&lt;/a&gt; feature. There’s a perfect PPK’s post about &lt;a href=&quot;http://www.quirksmode.org/css/condcom.html&quot;&gt;“conditional comments”&lt;/a&gt; with samples so I’m not going to dive into details of conditional comments in this post. The main thing is that you can specify a version vector (IE version) and serve different IE versions with separate content – usually, CSS files.&lt;/p&gt;
&lt;p&gt;Conditional comments allow to &lt;em&gt;configure&lt;/em&gt; compatibility.&lt;/p&gt;
&lt;p&gt;I consider a best practice to set one separate CSS and JS file for Internet Explorers that are older than IE8:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!--[if lte IE 7]&amp;gt;
    &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; href=&amp;quot;iefix.css&amp;quot;&amp;gt;
&amp;lt;![endif]--&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And inside this iefix.css I use star selector hack to fix issues in IE6 and lower:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;* html #someElement { /*rules for IE6 and lower */ }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Using star selector hack here is a perfect way to target IE6 and lower:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;we are aware that star selector CSS hack was fixed in IE7&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;we are inside a CSS file that is only served to IE7 and lower&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It’s perfectly future-compatible (IE8 and newer versions won’t fetch it as it’s inside a conditional comments) and also perfectly backwards-compatible (we know that star selector hack works in IE6 and lower versions).&lt;/p&gt;
&lt;p&gt;So there’s no real need for a separate CSS file for IE6 and lower because we can easily separate IE7 and lower versions’ rules inside our iefix.css file.&lt;/p&gt;
&lt;h2 id=&quot;version-targeting-in-javascript&quot;&gt;Version targeting in javascript&lt;/h2&gt;
&lt;p&gt;There are cases when adding some javascript for IE6 and lower versions is required, for example, if you want to emulate &lt;code&gt;:hover&lt;/code&gt; support on some elements.&lt;/p&gt;
&lt;p&gt;Microsoft thought about this and along with conditional comments provided a &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ahx1z4fs(VS.71).aspx&quot;&gt;conditional compilation&lt;/a&gt; technique. The approach is very similar – you put some javascript code inside &lt;strong&gt;/&lt;em&gt;@cc_on @&lt;/em&gt;/&lt;/strong&gt;
comment block and IE parses it.&lt;/p&gt;
&lt;p&gt;To control which version to target, special &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/7142yyxw(VS.71).aspx&quot;&gt;conditional compilation variable&lt;/a&gt; &lt;code&gt;@_jscript_version&lt;/code&gt; is provided. This variable shows the build number of JScript compiler. Different versions of IE had different JScript compiler versions: IE5.01 had &lt;code&gt;@_jscript_version&lt;/code&gt; of 5.1, IE5.5 – 5.5, IE6 – 5.6, IE7 – 5.7 and IE8 – 5.8. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;And this approach worked fine until Windows XP Service Pack 3 was shipped which replaced IE6’s JScript compiler of version 5.6 with a newer one of version 5.7&lt;/strong&gt;. Before SP3 you could use the following code to separate IE6 from IE7 and upper
versions:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/*@cc_on
    if (@_jscript_version &amp;lt; 5.7) {
        //code for IE6 and lower
    } else {
        //code for IE7 and upper
    }
@*/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But when SP3 was installed, IE6 JScript compiler was updated and wouldn&amp;#39;t enter the first if clause. This was a serious compatibility issue and many libraries had to update their code to find a workaround. The problem was that we were solving an issue of one technology (CSS) with another (javascript), and these technologies are supposed to be loosely coupled. So JScript was upgraded, new features were added, but CSS wasn’t. This leads me to a conclusion that&lt;/p&gt;
&lt;h2 id=&quot;using-conditional-compilation-version-targeting-to-solve-css-problems-is-wrong&quot;&gt;Using conditional compilation version targeting to solve CSS problems is wrong&lt;/h2&gt;
&lt;p&gt;Again, these technologies are loosely coupled and you cannot assume that if &lt;code&gt;@_jscript_version&lt;/code&gt; is &lt;strong&gt;X&lt;/strong&gt;, CSS parser version is &lt;strong&gt;Y&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;So ideally, if you want to support &lt;code&gt;:hover&lt;/code&gt; for IE6 and lower in javascript, serve a separate javascript file for them using conditional comments.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;But if want to support something that’s not provided in a specific version of JScript compiler – using conditional compilation is perfectly valid&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;P.S. Well, if you still want to separate all IE6 from IE7, here’s a snippet that would work:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/*@cc_on
    if (@_jscript_version==5.6 ||
        (@_jscript_version==5.7 &amp;amp;amp;&amp;amp;amp;
         navigator.userAgent.toLowerCase().indexOf(&amp;quot;msie 6.&amp;quot;) != -1)) {
            //ie6 code
        }
@*/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So even if Windows XP user installed Service Pack 3 which updated JScript compiler to version 5.7, IE6 own version will still be 6. And it’s perfectly safe to use userAgent sniffing inside a conditional comments block which will be run in IE only.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Universal Internet Explorer 6 CSS</title>
            <link href="/posts/2009-06-ie6-universal.html"/>
            <updated>2009-06-01T00:00:00.000Z</updated>
            <id>/posts/2009-06-ie6-universal.html</id>
            <content type="html">&lt;p&gt;Today I’ve read an interesting article by Andy Clarke &lt;a href=&quot;http://forabeautifulweb.com/blog/about/universal_internet_explorer_6_css&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here’s the author’s key points:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;IE6 is hard to support&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;it’s so cool to write CSS for modern browsers only&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;sites shouldn’t look the same in different browsers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;people come to websites for content&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So by throwing these thoughts in he’s making a conclusion that IE6 should be supported in a limited way – i.e. by giving it &lt;a href=&quot;http://forabeautifulweb.com/demo/2009/05/21/ie6.0.3.css&quot;&gt;a special “stripped” CSS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So let’s see.&lt;/p&gt;
&lt;h2 id=&quot;ie6-is-hard-to-support&quot;&gt;IE6 is hard to support&lt;/h2&gt;
&lt;p&gt;From technical side it’s not hard, period. The amount of effort depends on the project peculiarities (to a degree).&lt;/p&gt;
&lt;h2 id=&quot;it-s-cool-to-write-css-for-modern-browsers-only&quot;&gt;It’s cool to write CSS for modern browsers only&lt;/h2&gt;
&lt;p&gt;Doing your work is not always doing cool stuff.&lt;/p&gt;
&lt;h2 id=&quot;sites-shouldn-t-look-the-same-in-different-browsers&quot;&gt;Sites shouldn’t look the same in different browsers&lt;/h2&gt;
&lt;p&gt;It fully depends on the project peculiarities.&lt;/p&gt;
&lt;h2 id=&quot;people-come-to-websites-for-content&quot;&gt;People come to websites for content&lt;/h2&gt;
&lt;p&gt;It fully depends on the project peculiarities.&lt;/p&gt;
&lt;h2 id=&quot;i-do-keep-saying-that-all-this-depends-on-the-project-peculiarities-&quot;&gt;I do keep saying that all this depends on the project peculiarities.&lt;/h2&gt;
&lt;p&gt;And I can’t understand why it’s not obvious to Andy Clarke. When a project is planned, all the issues are taken into consideration. As websites are displayed in different browsers, three key factors matter:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;nature of the website&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;market share of the browser&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;cost of supporting a browser&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Do I need to explain in more detail?&lt;/p&gt;
&lt;p&gt;P.S. Yes I think people should upgrade from IE6. But not because it has an outdated support for standards, but just because newer browsers provide much better user experience.&lt;/p&gt;
&lt;p&gt;P.P.S. You know, Andy, I really appreciate what you’re doing. I urge you not to stop. I’ll be priced higher for the same skills that I have now just because you (and those whom you manage to convince) deliberately choose not to deliver what clients need :)&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Intel mini ITX D945GCLF2D motherboard</title>
            <link href="/posts/2009-06-intelmb.html"/>
            <updated>2009-06-01T00:00:00.000Z</updated>
            <id>/posts/2009-06-intelmb.html</id>
            <content type="html">&lt;p&gt;I always wanted to have a second computer where I could install Windows Web Server 2008 (or Win7) with IIS, SQL Express 2008 and run, develop and test my hobby projects locally. Well, you know what it’s like to have a second computer – you can do whatever you want on it and never be afraid that you do anything wrong with your work PC :)&lt;/p&gt;
&lt;p&gt;My work PC is quite noisy and I just can’t find time to determine which one of 4 coolers is causing the trouble and replace it. So I wanted to  build a computer that would be really quiet (or silent at all) so it wouldn’t add any noise and that I could leave it working at night if required. Then I thought that I didn’t need this computer to be really powerful – I wasn’t going to encode video on it :) And I could save a fortune on buying something that wasn’t a cutting-edge most powerful Core 2 Duo Quad Extreme Mega Turbo Something with 64 gigs of RAM.&lt;/p&gt;
&lt;p&gt;I’ve been reading a lot about &lt;a href=&quot;http://en.wikipedia.org/wiki/NVIDIA_ION&quot;&gt;nvidia ION platform&lt;/a&gt; recently and thought it would be the best solution for the task – extremely small and nearly silent platform with great specs: dual-core Atom 330 CPU, up to 4 gigs of RAM, good Nvidia graphics card. But then first motherboard with NVIDIA ION and Atom 330 was announced - &lt;a href=&quot;http://www.zotacusa.com/zotac-ionitx-a-u-atom-n330-1-6ghz-dual-core-mini-itx-intel-motherboard.html&quot;&gt;ZOTAC IONITX-A-U&lt;/a&gt;, which is great but according to different sources would cost $300, which is way too much for such a device.&lt;/p&gt;
&lt;p&gt;So I had a look at Intel’s motherboard – &lt;a href=&quot;http://www.intel.com/products/desktop/motherboards/D945GCLF2-D945GCLF2D/D945GCLF2-D945GCLF2D-overview.htm&quot;&gt;D945GCLF2D&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Yes it has Intel GMA950 video chipset, but as this machine was considered to be used without a monitor, I didn’t care which video card it would have. It also doesn’t have a WI-FI, but at the moment I’ll just plug it in the network switch and if required will add a wi-fi card later. And the price was great – I was able to get the motherboard and a 2Gb memory card at $125 total. I already had a HDD but had to buy a power supply – and here it is, a computer for 160 dollars. 2 Gb RAM, integrated dual-core Atom 330 CPU, 80 Gb HDD
and 2 Gb USB flash card for &lt;a href=&quot;http://www.microsoft.com/windows/windows-vista/features/readyboost.aspx&quot;&gt;Ready Boost&lt;/a&gt; – a great local web and database server, NAS and download box.&lt;/p&gt;
&lt;p&gt;The only noise I can hear from it is a small noise of power supply cooler – so I plan to measure what power consumption this system has and get a fanless power supply fitting this motherboard needs. And also I’m planning to build my own case for it – something that could be screwed to the wall near the network switch.&lt;/p&gt;
&lt;p&gt;And I’m also sure that such a computer would be ideal for most office needs – it’s capable of doing any office work, it’s really cheap ($300 with any of the great mini ITX cases on the market) and it’s small so it won’t take precious office space.&lt;/p&gt;
&lt;p&gt;Awesome, just awesome.&lt;/p&gt;
&lt;p&gt;Thanks, Intel!&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Opera to reinvent the web?</title>
            <link href="/posts/2009-06-opera-reinvent.html"/>
            <updated>2009-06-01T00:00:00.000Z</updated>
            <id>/posts/2009-06-opera-reinvent.html</id>
            <content type="html">&lt;p&gt;Opera promises to reinvent the web tomorrow. I mean, really, reinvent the web? Invent TCP/IP, HTTP, DNS, HTML/CSS/JS, CGI, all other stuff that web consists of? I doubt.&lt;/p&gt;
&lt;p&gt;Different sources &lt;a href=&quot;http://www.geeksaresexy.net/2009/06/15/opera-to-reinvent-the-web-web-waits-for-fat-lady-to-sing/&quot;&gt;speculate&lt;/a&gt; that it’s going to be something cloud-related. Maybe it will be a p2p-based traffic sharing with some clever algorithm to determine where to download the data from? But then I wouldn’t like anybody to be able to sniff my data. Maybe they will install a CDN to make useless Opera Turbo giving at least some performance benefit to users. Don’t know, we’ll see very soon.&lt;/p&gt;
&lt;p&gt;But because of the last &lt;a href=&quot;http://sharovatov.wordpress.com/2009/06/11/windows-7-will-be-shipped-without-ie8-in-europe/&quot;&gt;unfair actions&lt;/a&gt; that were taken by Opera against IE, I (from moral prospective) really hope that all the expenses they took for Opera 10 PR won’t significantly increase their market share. Competition should be fair, Firefox was able to get the same market share as IE in Germany without making users life harder. I really hope that lobbying expenses were higher than the income.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Opera revolution fail</title>
            <link href="/posts/2009-06-opera-rev-fail.html"/>
            <updated>2009-06-01T00:00:00.000Z</updated>
            <id>/posts/2009-06-opera-rev-fail.html</id>
            <content type="html">&lt;p&gt;Opera announced “&lt;a href=&quot;http://unite.opera.com&quot;&gt;Opera Unite&lt;/a&gt;” concept – they integrated a web-server right into Opera and made Opera Desktop Gadgets run on it.&lt;/p&gt;
&lt;p&gt;All the &lt;a href=&quot;http://unite.opera.com/services/&quot;&gt;services&lt;/a&gt; Opera Unite offers are web gadgets, so they are built in html+javascript with some &lt;a href=&quot;http://dev.opera.com/libraries/unite/&quot;&gt;additional API&lt;/a&gt; provided by the browser.&lt;/p&gt;
&lt;p&gt;To get any of the services, you must register at Opera. When you register, you give your computer a name, e.g. “home” and then you are provided with a URL home.yourlogin.operaunite.com where &lt;strong&gt;yourlogin &lt;/strong&gt;is what you chose as a login when you were registering.&lt;/p&gt;
&lt;p&gt;File sharing service is basically a web server directory listing exposed to the internet. This is my understanding how it works:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;You point Opera Unite to a directory&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Opera internal web server starts listening 8840 port locally&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Opera opens a persistent connection to operaunite.com (213.236.208.30 IP address in my case)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;So when anyone opens up home.yourlogin.operaunite.com, operaunite.com server requests the list of files from your machine using a persistent connection that you opened and sends the response back to user.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;when you close Opera, web server is shut down, connection is dropped and nobody can download anything.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So sharing can work ONLY when your computer is working and Opera is running.&lt;/p&gt;
&lt;h2 id=&quot;so-none-of-the-services-can-work-when-computer-is-turned-off-or-opera-is-not-running-&quot;&gt;So none of the services can work when computer is turned off or Opera is not running.&lt;/h2&gt;
&lt;p&gt;When you want your sharing/chat/fridge services to be working, you will need to keep your Opera running. And if several users start using it, your computer will slow down significantly. And if you by any chance put a link to an image hosted in your Opera Unite on a popular site… Your computer will either stop responding or eat 100% resources.&lt;/p&gt;
&lt;p&gt;That’s what John Resig, the author of beautiful jQuery says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I just tried to visit six Opera Unite pages and only one resolved. The future of the web is two 9s: 0.99% uptime!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Useful service? I doubt.&lt;/p&gt;
&lt;p&gt;Photo sharing service is just crap at the moment. My Opera Unite serving 1 client with a Photo Sharing page with thumbnails eats 60-70% of CPU and up to 200 Megabytes of memory. Full-blown web servers like IIS7 or Apache2 would serve this page and static files in a milliseconds without any noticeable resources eating. Thumbnails are created in really poor quality.&lt;/p&gt;
&lt;p&gt;In Web Server service CGI is not supported, in-memory modules are not supported. PHP is not supported. The only language you can use is javascript. HTTPS is not supported.&lt;/p&gt;
&lt;p&gt;Opera &lt;a href=&quot;http://unite.opera.com/support/userguide/#diff_data_share&quot;&gt;says&lt;/a&gt; that the communication between users is done directly. Truth is that it’s done through operaunite.com. Let me repeat it, &lt;strong&gt;all the traffic goes through operaunite.com&lt;/strong&gt;. Are you ready to give all your information to Opera?&lt;/p&gt;
&lt;p&gt;Do you trust them so much? Do you care about your privacy? Do you think they will care about users after what they did to Windows 7 users in Europe?&lt;/p&gt;
&lt;p&gt;Opera says this is a revolution – I can only see a bad (or alpha, not even beta) implementation of a rather poor technology. When I go out, I don’t leave my laptop working and Opera running, so the sharing won’t work. And I don’t want my &lt;em&gt;browser&lt;/em&gt; to take 100% CPU and 400 Mb RAM when two users are watching static pages with static thumbnails. And it’s not p2p as all the traffic goes through Opera servers.&lt;/p&gt;
&lt;p&gt;There’re plenty of good services that do their work and don’t pretend to do a revolution where there’sclearly nothing revolutionary.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://labs.opera.com/news/2009/06/16/&quot;&gt;This&lt;/a&gt; makes me laugh:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Our computers are only dumb terminals connected to other computers (meaning servers) owned by other people — such as large corporations — who we depend upon to host our words, thoughts, and images. We depend on them to do it well and with our best interests at heart. We place our trust in these third parties, and we hope for the best, but as long as our own computers are not first class citizens on the Web, we are merely tenants, and hosting companies are the landlords of the Internet.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;P.S. Opera engineers said that in the final version p2p file sharing will be implemented – well, let’s see.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Skype blocking 80 and 443 ports</title>
            <link href="/posts/2009-06-skype-blocking.html"/>
            <updated>2009-06-01T00:00:00.000Z</updated>
            <id>/posts/2009-06-skype-blocking.html</id>
            <content type="html">&lt;p&gt;When trying to start an IIS7 website, you can get the following message: “The process cannot access the file because it is being used by another process. (Exception from HRESULT: 0&amp;#215;80070020)”:&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;http://sharovatov.files.wordpress.com/2009/06/image2.png?w=491&amp;#038;h=173&quot; width=&quot;491&quot; height=&quot;173&quot;&gt;&lt;/p&gt;
&lt;p&gt;It’s saying it can’t access the file, but actually IIS can’t bind the ports you’ve configured in Bindings configuration. But which port?&lt;/p&gt;
&lt;p&gt;Usually I use the following procedure to find out which application occupies the port:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;run &lt;code&gt;netstat –ano –p tcp&lt;/code&gt; to get the list of opened ports, find the port that’s been taken and see which PID the port is bound to&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;run &lt;code&gt;tasklist /FI &amp;quot;PID eq XXX&amp;quot;&lt;/code&gt; where XXX is the found PID&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So in my case the 80 and 443 ports were taken by Skype. Whenever you start Skype, it tries to bind 80 and 443 ports, and so if you start your web server later, it won’t be able to work as ports are occupied. This Skype behaviour can be turned off by deselecting “Use port 80 and 443 as alternatives for incoming connections” here:&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;http://sharovatov.files.wordpress.com/2009/06/image3.png?w=661&amp;#038;h=579&quot; width=&quot;661&quot; height=&quot;579&quot;&gt;&lt;/p&gt;
&lt;p&gt;Hope this saves somebody some time :)&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Windows 7 will be shipped without IE8 in Europe?</title>
            <link href="/posts/2009-06-win7woie8.html"/>
            <updated>2009-06-01T00:00:00.000Z</updated>
            <id>/posts/2009-06-win7woie8.html</id>
            <content type="html">&lt;p&gt;As &lt;a href=&quot;http://news.cnet.com/8301-13860_3-10262630-56.html&quot;&gt;CNET states&lt;/a&gt;, Windows 7 will be shipped to Europe without IE8 because European antitrust regulators told them so. This clearly shows how rotten EU antitrust committee is and how easy it is for a well settled lobby to force the whole EU to accept absolutely stupid and nonsense act.&lt;/p&gt;
&lt;p&gt;Who will gain any profit from this?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Users&lt;/strong&gt;? No, they will have to find a way to get &lt;em&gt;any&lt;/em&gt; browser on their new computer. And what if it’s their first computer? How are they supposed to download anything from the internet? Yes it’s a five minutes job for an IT specialist, but go teach your grandmother how to use ftp.exe to download anything ;)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hardware vendors&lt;/strong&gt;? No, they were always able to install any browser on the computers they sell and make it the default one.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Other browser vendors&lt;/strong&gt;? To a degree. Anyway Microsoft will provide hardware resellers with an IE8 pack – so they can install IE8 on all the computers they build.&lt;/p&gt;
&lt;p&gt;Is there any sense at all in this decision? I can’t see it.&lt;/p&gt;
&lt;p&gt;I just don’t get it, really. If I’m buying a car, I won’t argue that the tyres on this new car are from Pirelli (or any other vendor). I will just change them if I don’t really like Pirelli, or choose another car which doesn’t have Pirelly. I’m not prohibited to change them. I’m just given the default one.&lt;/p&gt;
&lt;p&gt;And now compare this situation with Apple who clearly prohibits installing Opera on its iPhone. Because it would compete (and, obviously, win the competition) with their Safari browser. Why doesn’t EU antitrust committee look at this? Why don’t Opera take any action here?&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Beanstalkapp, FogBugz and now Case Tracker</title>
            <link href="/posts/2009-11-beanstalk.html"/>
            <updated>2009-11-01T00:00:00.000Z</updated>
            <id>/posts/2009-11-beanstalk.html</id>
            <content type="html">&lt;p&gt;As a follow-up to &lt;a href=&quot;http://sharovatov.wordpress.com/2009/05/23/beanstalkapp-and-fogbugz-free-online-bugtracking-and-version-control/&quot;&gt;my post about free hosted integrated solution for bugtracking and version-control&lt;/a&gt;, I’d like to introduce a great tool I accidentally found and then installed – &lt;a href=&quot;http://code.google.com/p/visionmap/wiki/CaseTracker&quot;&gt;Case Tracker&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It’s a free desktop application which allows you to easily view a list of current bugs, gives you a way to “start working” on the bug – so the time you actually spend on fixing the bug or implementing the feature is carefully calculated. So it’s basically a time-tracking application for a fogbugz – it takes the list of bugs&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;http://sharovatov.files.wordpress.com/2009/11/image.png?w=717&amp;#038;h=165&quot; width=&quot;717&quot; height=&quot;165&quot;&gt;&lt;/p&gt;
&lt;p&gt;To start working, you need to enter your fogbugz username, password and the URL where you have it installed:&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;http://sharovatov.files.wordpress.com/2009/11/image1.png?w=505&amp;#038;h=184&quot; width=&quot;505&quot; height=&quot;184&quot;&gt;&lt;/p&gt;
&lt;p&gt;Case Tracker supports both FogBugz On-demand and hosted versions – it simulates all required POST requests as if you’re working with Fogbugz through your browser. As soon as you entered correct username and password, it will show you the list of active bugs:&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;http://sharovatov.files.wordpress.com/2009/11/image2.png?w=639&amp;#038;h=339&quot; width=&quot;639&quot; height=&quot;339&quot;&gt;&lt;/p&gt;
&lt;p&gt;However, by default it shows bugs assigned to anybody, which may be not always desirable. To address this issue, Case Tracker provides a search filter (funnel on the right-hand side of the pause button). For example, I need only those bugs that are assigned to me, so I add &lt;code&gt;assignedto:&amp;quot;Vitaly Sharovatov&amp;quot;&lt;/code&gt; as a search filter:&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;http://sharovatov.files.wordpress.com/2009/11/image3.png?w=687&amp;#038;h=131&quot; width=&quot;687&quot; height=&quot;131&quot;&gt;&lt;/p&gt;
&lt;p&gt;Then I press “Go” and get my list populated with only those bugs that I need! Awesome!&lt;/p&gt;
&lt;p&gt;For more detailed instructions on the allowed syntax read &lt;a href=&quot;http://www.fogcreek.com/fogbugz/docs/60/topics/basics/Searchingforcases.html&quot;&gt;this&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What’s really great in Case Tracker – it can automatically stop measuring time when you’re away from keyboard for a certain period of time:&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;http://sharovatov.files.wordpress.com/2009/11/image4.png?w=452&amp;#038;h=278&quot; width=&quot;452&quot; height=&quot;278&quot;&gt;&lt;/p&gt;
&lt;p&gt;However, Case Tracker doesn’t allow creating new cases – it opens your fogbugz URL in your default browser so you can enter new case there. But Case Tracker is not a replacement for Fogbugz UI – it’s goal is to simplify time tracking.&lt;/p&gt;
&lt;p&gt;So the general flow is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;you choose a bug from a drop-down list&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;if the estimate hasn’t been set for this bug, Case Tracker prompts you to enter the estimate (using the same syntax rules as in Fogbugz in the browser)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the work is started and time is measured – if you’re afk or just press pause button, it stops measuring the time&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;when you’re finished – you commit the bug and mark it resolved either by specifying status:resolved in svn comments or using Case Tracker – I prefer to specify it in a submit comment – just got used to it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So if you use fogbugz – this tool is definitely worth trying!&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Browsers' developer tools evolution</title>
            <link href="/posts/2009-11-devtools.html"/>
            <updated>2009-11-01T00:00:00.000Z</updated>
            <id>/posts/2009-11-devtools.html</id>
            <content type="html">&lt;p&gt;It’s great to see that better tools for developer start to appear.&lt;/p&gt;
&lt;p&gt;As in many other cases, the race started IE5.01 with support for script debugging in an external Script Debugger app. And now the race takes us to the new level with awesome tools built into browsers (like Firebug in Fx or Devtools in IE8) or even better external – let’s welcome &lt;a href=&quot;http://ajax.dynatrace.com/pages/&quot;&gt;dynaTrace Ajax&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://ajax.dynatrace.com/pages/&quot;&gt;dynaTrace Ajax&lt;/a&gt; supports IE6, IE7 and IE8, and will soon support Firefox. It’s basically the best tool out there for profiling and debugging javascript and CSS.&lt;/p&gt;
&lt;p&gt;Here’s what John Resig, creator of JQuery library says about the tool:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I’m very impressed with dynaTrace AJAX Edition’s ability to get at the underlying “magic” that happens inside a browser: page rendering, DOM method execution, browser events, and page layout calculation.&lt;/p&gt;
&lt;p&gt;Much of this information is completely hidden from developers and I’ve never seen it so easily collected into a single tool. Huge kudos to dynaTrace for revealing this information and especially so for making it happen in Internet Explorer.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And here’s Steve Souders, web perfomance guru, says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When it comes to analyzing your JavaScript code to find what&amp;#39;s causing performance issues, dynaTrace Ajax Edition has the information to pinpoint the high-level area all the way down to the actual line of code that needs to be improved. I recommend you give it a test run and add it to your performance tool kit.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Must-have for any web-developer, seriously.&lt;/p&gt;
&lt;p&gt;It’s interesting to see that Google and Apple play a good catch-up – both Chromium 4 and Apple Safari teams invest significant resources in building devtools, Chromium 4 finally
&lt;a href=&quot;http://www.youtube.com/watch?v=OxW1dCjOstE&quot;&gt;has its own CPU &amp;amp; heap profilers now&lt;/a&gt; on top of V8. So bearing in mind that Firefox profiling will be supported by dynaTrace Ajax, it’s only Opera that’s left behind the game at the moment.&lt;/p&gt;
&lt;p&gt;Come on, Opera team!&lt;/p&gt;
&lt;p&gt;P.S. and by the way, Opera, can we get inPrivate browsing mode please?&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>HTTP persistent connections, pipelining and chunked encoding</title>
            <link href="/posts/2009-11-http-pipeline.html"/>
            <updated>2009-11-01T00:00:00.000Z</updated>
            <id>/posts/2009-11-http-pipeline.html</id>
            <content type="html">&lt;p&gt;When I have free time, I like to reorganise the knowledge I’ve got and prepare mindmaps/cheatsheets/manuals of interesting stuff. And the formal approach I usually use forces me to organise data in a way so that it won’t take me long to grasp the idea if I forget something.&lt;/p&gt;
&lt;p&gt;And I also like posting resulting resources to blog — that’s a good English techwriting skills practice plus some publicity for the knowledge ;)&lt;/p&gt;
&lt;p&gt;So this post is another one from the HTTP series and describes HTTP/1.1 persistent connections and chunked
encoding.&lt;/p&gt;
&lt;p&gt;HTTP/1.0 said that for every request to a server you have to open a TCP/IP connection, write a request to the socket and get the data back.&lt;/p&gt;
&lt;p&gt;But pages on the internet became more complex and authors started including more and more resources on their pages (images, scripts, stylesheets, objects — everything that browsers had to download from the server).&lt;/p&gt;
&lt;p&gt;And for every resource request clients were opening separate connections, and it was taking time and CPU/memory resources to open a new connection, so from users prospective, resulting latency was becoming worse. Something could be done to improve the situation.&lt;/p&gt;
&lt;p&gt;So HTTP IETF decided to implement a nice technique called “persistent connections”.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Persistent connections reduce network latency and CPU/memory usage of all the peers by allowing reuse of the already established TCP/IP connection for multiple requests.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As I mentioned, HTTP/1.0 client was closing the connection after each request. HTTP/1.1 introduced using one TCP/IP connection for multiple sequential requests, and both server and client can indicate that the connection has to be closed upon the completion of current request-response by specifying &lt;code&gt;Connection: Close&lt;/code&gt; header.&lt;/p&gt;
&lt;p&gt;Usually HTTP/1.1 client sends &lt;code&gt;Connection: Close&lt;/code&gt; header with the last request in the queue to indicate that it won’t need anything else from the server, so that the TCP/IP connection can be safely closed after the request has been served with response. (Say, it wanted to download 10 images for the HTML page, it sends &lt;code&gt;Connection: Close&lt;/code&gt; with the 10&lt;sup&gt;th&lt;/sup&gt; image request and the server sends the last image and closes the connection after it’s done).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Persistent connections are the default for HTTP/1.1 clients and servers. &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;And even more interestingly, HTTP/1.1 introduced &lt;strong&gt;pipelining&lt;/strong&gt; support – a concept where client can send multiple requests without waiting for each response to be sent back, and then server will have to send responses in the same order the requests came in.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; pipelining is not supported in IE/Safari/Chrome, disabled by default in Firefox, leaving Opera the only browser to support and have it enabled. &lt;/p&gt;
&lt;p&gt;In any case, if the connection was dropped, client will initiate new TCP/IP connection and those requests that didn&amp;#39;t get a response back will be resubmitted through the new connection.&lt;/p&gt;
&lt;p&gt;But as one connection is used to send multiple requests and receive responses, how does the client know when it has to finish reading the first request?&lt;/p&gt;
&lt;p&gt;Obviously, &lt;code&gt;Content-Length&lt;/code&gt; header must be set for each response.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;But what happens when the data is dynamic or the whole response’s content length can’t be determined by the time transmission starts?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In HTTP/1.0 everything’s easy — &lt;code&gt;Content-Length&lt;/code&gt; header can just be left out, so the transmission starts, client starts reading the data it’s getting from the connection, then when the server finishes sending the data, it just closes the TCP/IP connection, so client can’t read from the socket any more and considers the transmission completed.&lt;/p&gt;
&lt;p&gt;However, as I’ve said, in HTTP/1.1 each transaction has to have correct &lt;code&gt;Content-Length&lt;/code&gt; header because client needs to know when each transmission is completed, so that the client can either start waiting for the next response (if requests were pipelined), or stop reading current response from the socket and send new request through this TCP/IP connection (if requests are sent in a normal sequential mode), or close the connection it if it was the last response he was to receive.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So as the connection is reused for multiple resources’ content transmission, the client needs to know exactly when each resource download is completed, i.e. it needs the exact number of bytes it has to read from the connection socket.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;And it&amp;#39;s obvious that if &lt;code&gt;Content-Length&lt;/code&gt; can not be determined before the transmission starts, the whole persistent connections concept is useless.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;That is why HTTP/1.1 introduced chunked encoding concept.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The concept is quite simple — if exact &lt;code&gt;Content-Length&lt;/code&gt; for the resource is unknown at the time when transmission starts, server may send resource content piece by piece (so-called chunks) and provide &lt;code&gt;Content-Length&lt;/code&gt; for each chunk, plus sends an empty chunk with zero &lt;code&gt;Content-Length&lt;/code&gt; at the end of the whole response to notify client that this response transmission is complete.&lt;/p&gt;
&lt;p&gt;To let HTTP/1.1 conforming clients know that chunked response is coming, server sends special header — &lt;code&gt;Transfer-Encoding: chunked&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Chunked encoding approach allows client to safely read the data — it knows the exact number of bytes that are to be read for each chunk and knows that if an empty chunk arrived, this resource transmission is completed.&lt;/p&gt;
&lt;p&gt;It’s a little bit more complex than HTTP/1.0 scenario where server just closes the connection as soon as it’s finished, but truly worth it — persistent connections save server resources and reduce whole network latency, therefore improving overall user experience.&lt;/p&gt;
&lt;p&gt;Links and resources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec8.html&quot;&gt;HTTP/1.1 Persistent connections&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/HTTP_pipelining&quot;&gt;Wikipedia about HTTP Pipelining&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html&quot;&gt;HTTP/1.1 Chunked encoding&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        </entry>
    
        <entry>
            <title>PHP loadHTMLFile and a html file without DOCTYPE</title>
            <link href="/posts/2009-11-php-xml.html"/>
            <updated>2009-11-01T00:00:00.000Z</updated>
            <id>/posts/2009-11-php-xml.html</id>
            <content type="html">&lt;p&gt;Just noticed that when you parse an html file with &lt;code&gt;DOMDocument&lt;/code&gt;’s method &lt;code&gt;loadHTMLFile&lt;/code&gt; and &lt;strong&gt;there&amp;#39;s no DOCTYPE defined in your html, PHP will silently load an empty DOM document&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Just try saving the following in a test.html file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&amp;lt;div id=&amp;quot;toc&amp;quot;&amp;gt;wtf&amp;lt;/div&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And then run the following php code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$doc = new DOMDocument();
if ($doc-&amp;gt;loadHTMLFile(&amp;#39;test.html&amp;#39;)) {
    echo &amp;#39;loadHTMLFile was successfully executed&amp;lt;br&amp;gt;&amp;#39;;
    $toc = $doc-&amp;gt;getElementById(&amp;#39;toc&amp;#39;);
    echo &amp;#39;now trying to var_dump the $toc:&amp;lt;br&amp;gt;&amp;#39;;
    var_dump($toc);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You’ll get NULL as a result of the &lt;code&gt;var_dump&lt;/code&gt; call. As if &lt;code&gt;getElementById&lt;/code&gt; couldn’t
find the node.&lt;/p&gt;
&lt;p&gt;Interesting?&lt;/p&gt;
&lt;p&gt;Citing &lt;a href=&quot;http://ru.php.net/manual/en/domdocument.loadhtmlfile.php&quot;&gt;php.net&lt;/a&gt;,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The function parses the HTML document in the file named filename. &lt;strong&gt;Unlike loading XML, HTML does not have to be well-formed to load&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Does this imply that DOCTYPE may be omitted? I think so. But then the abovementioned code wouldn’t show NULL as a dump of $toc. Unfortunately, experiment shows that DOCTYPE is required, even a HTML5-ish &lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/code&gt; will do the job.&lt;/p&gt;
&lt;p&gt;But why on earth doesn’t &lt;code&gt;loadHTMLFile&lt;/code&gt; throw a warning or at least return false as it should according to the documentation? Nobody knows.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So if you notice that your DOM-based php script acts in a weird way, check if you have a DOCTYPE defined on the HTML document you’re trying to parse.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Hope this saves someone some time.&lt;/p&gt;
&lt;p&gt;P.S. More bugs to come — if you have a HTML file saved in utf-8 codepage with &lt;a href=&quot;http://en.wikipedia.org/wiki/Byte_order_mark&quot;&gt;BOM&lt;/a&gt;, &lt;code&gt;loadHTMLFile&lt;/code&gt; will throw the
following E_WARNING:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;**Warning**: DOMDocument::loadHTMLFile() [function.DOMDocument-loadHTMLFile]:
Misplaced DOCTYPE declaration in test-BOM.html, line: 1 in /home/test/www/test-DOMDocument.php on line 3
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Remove the BOM and everything works fine. Apparently, &lt;code&gt;loadHTMLFile&lt;/code&gt; doesn’t know that BOM usually indicates that the document is saved in UTF8/16/32. Weird.&lt;/p&gt;
&lt;p&gt;P.P.S. Another issue. Try pointing &lt;code&gt;loadHTMLFile&lt;/code&gt; to an HTML-document saved in UTF-8 with some international characters (Russian words, in my case). Then get a node with international characters and do &lt;code&gt;echo $node-&amp;gt;nodeValue&lt;/code&gt;. Are you getting corrupted symbols? I was. The whole project is in UTF-8, every single file is saved in UTF-8.&lt;/p&gt;
&lt;p&gt;I added&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;meta http-equiv=&amp;quot;Content-type&amp;quot; content=&amp;quot;text/html;charset=utf-8&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;to the head section — characters started showing in a correct encoding, but the following
WARNING appeared:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;**Warning**: DOMDocument::loadHTMLFile() [function.DOMDocument-loadHTMLFile]: Input is
not proper UTF-8, indicate encoding ! in /home/test/www/test-russian.html, line: 65 in
/home/test/www/test-DOMDocument.php on line 29
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And the only way to properly get rid of this warning is to add&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;to the first line of your html document and it finally worked without any warnings or issues. Awesome. XML header must be used for &lt;code&gt;load**HTML**File&lt;/code&gt; to run properly. Way too buggy to use.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>HTTPBis group is awesome!</title>
            <link href="/posts/2009-12-httpbis.html"/>
            <updated>2009-12-01T00:00:00.000Z</updated>
            <id>/posts/2009-12-httpbis.html</id>
            <content type="html">&lt;p&gt;As you know, HTTP/1.1 spec said that conforming clients SHOULD NOT open more than 2 concurrent connections to one host. This was defined back in 1997 and at that time it seemed reasonable to have 2 simultaneous connections for a client, and noting that HTTP/1.1 introduced persistent connections concept, people thought that 2 simultaneously opened reusable TCP/IP connections would be enough for general use.&lt;/p&gt;
&lt;p&gt;However, everything changes. Broadband internet came to mass market and people started thinking that better parallel download could benefit the whole website or a webapp performance. The history started with IE5.01, which was opening two connections by default, but &lt;a href=&quot;http://blogs.msdn.com/nickmac/archive/2004/08/25/how-to-speed-up-http-requests-on-internet-explorer.aspx&quot;&gt;there was a way to configure the number&lt;/a&gt;. So if you had a really good internet connection, you could make websites load significantly faster.&lt;/p&gt;
&lt;p&gt;By the time IE8 development started, broadband connections became a standard for home internet, so &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/cc304129(VS.85).aspx&quot;&gt;IE8 started opening 6 connections&lt;/a&gt; (if the bandwidth allowed – on the dialup or behind a proxy it will still open 2). So IE8 engineers did a smart move and introduced the world with a browser that seemed to load sites faster.&lt;/p&gt;
&lt;p&gt;Needless to say, Firefox 3 decided to change the value as well, so &lt;a href=&quot;http://kb.mozillazine.org/Network.http.max-persistent-connections-per-server&quot;&gt;now Firefox 3 has 6 as a default value for network.http.max-persistent-connections-per-server&lt;/a&gt; configuration setting. Good for Mozilla for copying stuff from IE again!&lt;/p&gt;
&lt;p&gt;And now HTTPBis team (Julian Reschke) &lt;a href=&quot;http://trac.tools.ietf.org/wg/httpbis/trac/changeset/715&quot;&gt;commits the change&lt;/a&gt; which states that in the forthcoming HTTP standard the maximum amount of concurrent requests is not limited even with “SHOULD NOT” clause :)&lt;/p&gt;
&lt;p&gt;Thanks HTTPBis team!&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>critical IIS vulnerability</title>
            <link href="/posts/2009-12-iisvuln.html"/>
            <updated>2009-12-01T00:00:00.000Z</updated>
            <id>/posts/2009-12-iisvuln.html</id>
            <content type="html">&lt;p&gt;Just got a link from our &lt;a href=&quot;http://trukhanov.wordpress.com&quot;&gt;system administrator&lt;/a&gt; &amp;#8211; &lt;a title=&quot;http://securityvulns.ru/Wdocument993.html&quot; href=&quot;http://securityvulns.ru/Wdocument993.html&quot;&gt;&lt;a href=&quot;http://securityvulns.ru/Wdocument993.html&quot;&gt;http://securityvulns.ru/Wdocument993.html&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Go read the vulnerability description now!&lt;/p&gt;
&lt;p&gt;Basically – if your users upload files to your site and THEY specify file names, you’re vulnerable:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Vulnerability/Risk Description&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;IIS can execute any extension as an Active Server Page or any other executable extension.&lt;/p&gt;
&lt;p&gt;For instance “malicious.asp;.jpg” is executed as an ASP file on the server. Many file uploaders protect the system by checking only the last section of the filename as its extension. And by using this vulnerability, an attacker can bypass this protection and upload a dangerous executable file on the server.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There’s an unchecked &lt;a href=&quot;http://securityvulns.ru/files/iissemi1.cpp&quot;&gt;patch&lt;/a&gt; for this vulnerability, but again this shows that you just can’t allow any user input saved to your system without filtering.&lt;/p&gt;
&lt;p&gt;So, if you allow file uploads – your script has to specify filenames, not users.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>IE9 - sucks much less than other browsers</title>
            <link href="/posts/2010-03-ie9-sucksmuchless.html"/>
            <updated>2010-03-01T00:00:00.000Z</updated>
            <id>/posts/2010-03-ie9-sucksmuchless.html</id>
            <content type="html">&lt;p&gt;I won’t repeat everything that’s been said on &lt;a href=&quot;http://live.visitmix.com/&quot;&gt;Mix&lt;/a&gt; now, you should read &lt;a href=&quot;http://msdn.microsoft.com/en-us/ie/ff468705.aspx&quot;&gt;this article&lt;/a&gt; and &lt;a href=&quot;http://blogs.msdn.com/ie/archive/2010/03/16/html5-hardware-accelerated-first-ie9-platform-preview-available-for-developers.aspx&quot;&gt;this IEBlog entry&lt;/a&gt; and get the &lt;a href=&quot;http://ie.microsoft.com/testdrive/&quot;&gt;IE platform preview&lt;/a&gt;. Don’t be afraid that IE9 will spoil your IE8 – IE9 preview doesn’t replace IE8 or anything, it’s got new jscript engine (called “Chakra”), new Trident layout engine version and wininet bundled in one package (31 megabytes installed size!) – first time when Microsoft does it this way – very impressive!&lt;/p&gt;
&lt;p&gt;This preview will be updated each few weeks – the work isn’t finished, UI is still in a very “beta” mode:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://sharovatov.files.wordpress.com/2010/03/ie91.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img title=&quot;ie9&quot; border=&quot;0&quot; alt=&quot;ie9&quot; src=&quot;http://sharovatov.files.wordpress.com/2010/03/ie9_thumb1.jpg?w=256&amp;#038;h=208&quot; width=&quot;256&quot; height=&quot;208&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Most important changes IE9 has from IE8:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;JIT-powered js optimisation in jscript engine (Sunspider reports speed faster than Firefox 3.7 alpha2) – looks similar to Apple’s Nitro JIT.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;new Trident with more CSS3 support – &lt;a href=&quot;http://dev.w3.org/csswg/css3-background/&quot;&gt;CSS3 Selectors&lt;/a&gt; module, &lt;a href=&quot;http://dev.w3.org/csswg/css3-background/&quot;&gt;CSS3 Borders and Backgrounds&lt;/a&gt; module (passes &lt;a href=&quot;http://tools.css3.info/selectors-test/test.html&quot;&gt;CSS Selectors tests&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/&quot;&gt;DOM2 Styles&lt;/a&gt; support&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://dev.w3.org/SVG/profiles/1.1F2/publish/&quot;&gt;SVG 1.1 2nd ed&lt;/a&gt; support (plus hardware acceleration)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;XHTML support (with proper namespaces support)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;complete hardware acceleration support for graphics and text rendering, which makes any animation in IE9 WAY much faster than in other browsers – you should look at videos&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;HTML5 video support with h264 codec with proper hardware acceleration support (kicks Chrome’s ass, allows 2 simultaneous HD 720p video playbacks via HTML5 video on a cheap netbook). Another nail in the OGG coffin :)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.w3.org/TR/DOM-Level-3-Events/&quot;&gt;DOM Events&lt;/a&gt; support&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And IE9 is ridiculously fast. That’s partly due to the fact that “Chakra” jscript compiles javascript in a separate CPU core in parallel to IE (natural improvement to &lt;a href=&quot;http://blogs.msdn.com/ie/archive/2010/03/04/tab-isolation.aspx&quot;&gt;LCIE&lt;/a&gt;), and partly because of hardware optimisation for all rendering and animations.&lt;/p&gt;
&lt;p&gt;Unfortunately, IE9 is not available for Windows XP (and it won’t be), the main reason is the security model – basically, XP security model just doesn’t suit for IE9. Quite right, XP is nearly 10 years old! Another reason is that graphical core on Windows XP works in a different way, so IE9 hardware acceleration just cannot work there.&lt;/p&gt;
&lt;p&gt;Of course, IE9 follows the same logics IE8 has in terms of backwards compatibility – rules that &lt;a href=&quot;http://sharovatov.wordpress.com/2009/05/18/ie8-rendering-modes-theory-and-practice/&quot;&gt;I described here&lt;/a&gt; apply to IE9 – if X-UA-Compatible header/meta is set to &lt;strong&gt;Edge&lt;/strong&gt;, IE9 new engine will run. Of course, it will render sites with correct doctype (but withouth X-UA-Compatible) in IE9 standards mode, and it will continue support for &lt;a href=&quot;http://go2.wordpress.com/?id=725X1342&amp;amp;site=sharovatov.wordpress.com&amp;amp;url=http%3A%2F%2Fsupport.microsoft.com%2Fkb%2F960321&quot;&gt;compatibility view lists&lt;/a&gt; feature. So old crappy sites designed for IE6 will still work in compatibility mode, and new sites will work in awesome IE9 in the standards mode without any problems. Read the abovementioned post for more details.&lt;/p&gt;
&lt;p&gt;Improvements that will be done later:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;better Ecma262 conformance and as a result, better ACID3 scores (current score is 55, IE team promises to improve this significantly, I think it will pass the test by the time RC ships&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;support for other CSS3 standard modules&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;canvas support – wasn’t announced, but I think this is a natural move when SVG is already done and done properly!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But anyway, the whole feeling after watching IE9 keynote session is IT’S AWESOME!&lt;/p&gt;
&lt;p&gt;We’re entering the new era when Microsoft browser is faster than others, more secure (it’s been more secure than others since IE8b1) and provides better level of standards support.&lt;/p&gt;
&lt;p&gt;P.S. To see the real speed just run &lt;a href=&quot;http://ie.microsoft.com/testdrive/&quot;&gt;these test&lt;/a&gt; on IE9 platform preview and on any other browser and feel the difference :)&lt;/p&gt;
&lt;p&gt;Some links:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://channel9.msdn.com/posts/Charles/Introducing-the-IE9-Developer-Platform-Preview/&quot;&gt;In your hands: Introducing the IE9 Developer Platform Preview&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://channel9.msdn.com/posts/Charles/In-your-hands-IE-9-Surfing-on-Metal-GPU-Powered-HTML5/&quot;&gt;In your hands: IE 9 – Surfing on Metal with GPU Powered HTML5&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://channel9.msdn.com/posts/Charles/In-your-hands-IE-9-Performance-From-JS-to-COM-to-DOM-to-HTML5-on-GPU/&quot;&gt;In your hands: IE 9 Performance – From JS to COM to DOM to HTML5 on GPU&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://channel9.msdn.com/posts/Charles/In-your-hands-IE9-and-SVG-Past-Present-and-Future-of-Vector-Graphics-for-the-Web/&quot;&gt;In your hands: IE9 and SVG – Past, Present and Future of Vector Graphics for the Web&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://blogs.msdn.com/ie/archive/2010/03/16/html5-hardware-accelerated-first-ie9-platform-preview-available-for-developers.aspx&quot;&gt;HTML5, Hardware Accelerated: First IE9 Platform Preview Available for Developers&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://ie.microsoft.com/testdrive/&quot;&gt;http://ie.microsoft.com/testdrive/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        </entry>
    
        <entry>
            <title>link-to-QRCode IE8 accelerator</title>
            <link href="/posts/2010-03-link-toqrcode.html"/>
            <updated>2010-03-01T00:00:00.000Z</updated>
            <id>/posts/2010-03-link-toqrcode.html</id>
            <content type="html">&lt;p&gt;I have Nokia N78 phone and use it a lot for surfing web (with beautiful &lt;a href=&quot;http://www.opera.com/mobile/&quot;&gt;Opera Mobile 10&lt;/a&gt;), reading RSS (with internal webkit-based browser), tweeting (with &lt;a href=&quot;http://mobileways.de/products/gravity/gravity/&quot;&gt;awesome Gravity client&lt;/a&gt;), reading CHMs (with &lt;a href=&quot;http://www.hugematrix.com/modules/news/article.php?storyid=8&quot;&gt;great mobiCHM tool&lt;/a&gt;) or using &lt;a href=&quot;http://www.skype.com/intl/en/download/skype/symbian/&quot;&gt;Skype&lt;/a&gt;, or doing many other tasks.&lt;/p&gt;
&lt;p&gt;But mostly I use the phone to read something on the internet when I’m on the way to some place (as it takes at least an hour to get somewhere in Moscow using public transport). And usually when I’m browsing web on a PC and find something worthy to save to mobile, I type its URL  on the phone and save it to bookmarks. &lt;/p&gt;
&lt;p&gt;Which, even with &lt;a href=&quot;http://bit.ly/&quot;&gt;bit.ly&lt;/a&gt; or any other url-shortening service, is a kerfuffle, and T9 doesn’t really help here.&lt;/p&gt;
&lt;p&gt;So I was trying to find an easier way to get URLs transferred from my PC onto the mobile. Opera 10 Mobile comes with &lt;a href=&quot;http://link.opera.com/&quot;&gt;Opera Link&lt;/a&gt; bookmarks synchronisation service, but I don’t surf internet in Opera on a PC. There’re some social bookmarking sites, but I’m not adding every link that I want to read on mobile to my bookmarks, be it a web-service or browser bookmarks.&lt;/p&gt;
&lt;p&gt;And here comes &lt;a href=&quot;http://en.wikipedia.org/wiki/QR_Code&quot;&gt;QRCode&lt;/a&gt; scanning to the rescue. I knew that Nokia &lt;a href=&quot;http://mobilecodes.nokia.com/scan.htm&quot;&gt;provided a nice free easy-to-use QRCode scanner&lt;/a&gt; for their smartphones, and I gave it a go. Downloaded, installed, tried with some QRCodes I had, everything was fine, scanning and recognition speed was really high – I just pointed the phone camera onto my computer’s screen and the encoded text was momentarily recognised. I decided to try encoding links in QRCodes using Nokia service, and it worked fine as well – the scanner made them active so I could either copy them to use in Opera Mobile or open with default web-browser (handy if it’s a link to RSS feed).&lt;/p&gt;
&lt;p&gt;Of course, encoding each link manually and then scanning resulting QRCode is taking much more time than just typing the link in the phone, so the idea of making the browser show QRCode for any link made more sense to me.&lt;/p&gt;
&lt;p&gt;The easiest way to integrate some web-service to IE8 is its beautiful &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/cc289775(VS.85).aspx&quot;&gt;Accelerators platform&lt;/a&gt;. I did 10 lines of PHP code which shortens any URL with bit.ly service, and then echoes the IMG tag pointing to &lt;a href=&quot;http://mobilecodes.nokia.com/create.jsp&quot;&gt;Nokia QR Code creation service&lt;/a&gt; URL. Here’s the code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php
require_once(&amp;#39;bitly.php&amp;#39;);
$sUrl = make_bitly_url($_GET[&amp;#39;url&amp;#39;]); //shorten the original URL first
echo &amp;#39;&amp;lt;img src=&amp;quot;http://mobilecodes.nokia.com/qr?DATA=&amp;#39;.$sUrl.&amp;#39;&amp;amp;amp;MODULE_SIZE=4&amp;amp;amp;name=&amp;amp;amp;MARGIN=2&amp;amp;amp;ENCODING=BYTE&amp;amp;amp;type=link&amp;amp;amp;MODE=TEXT&amp;amp;amp;a=view&amp;quot;&amp;gt;&amp;#39;;
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Bit.ly is used to make QRCode creation faster and easier as only small chunk of data is encoded.&lt;/p&gt;
&lt;p&gt;Then I created a very simple XML file which instructs IE8 what to do with the link:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;!-- author: Vitaly Sharovatov (http://sharovatov.ru) --&amp;gt;
&amp;lt;openServiceDescription xmlns=&amp;quot;http://www.microsoft.com/schemas/openservicedescription/1.0&amp;quot;&amp;gt;
    &amp;lt;homepageUrl&amp;gt;http://sharovatov.ru&amp;lt;/homepageUrl&amp;gt;
    &amp;lt;display&amp;gt;
        &amp;lt;name&amp;gt;link QRCode&amp;lt;/name&amp;gt;
        &amp;lt;icon&amp;gt;http://sharovatov.ru/qrcode/favicon.ico&amp;lt;/icon&amp;gt;
    &amp;lt;/display&amp;gt;
    &amp;lt;description&amp;gt;Get the QRCode for selected link&amp;lt;/description&amp;gt;
    &amp;lt;activity category=&amp;quot;mobile&amp;quot;&amp;gt;
        &amp;lt;activityAction context=&amp;quot;link&amp;quot;&amp;gt;
            &amp;lt;preview action=&amp;quot;http://sharovatov.ru/qrcode/createCode.php?url={link}&amp;quot; /&amp;gt;
            &amp;lt;execute method=&amp;quot;get&amp;quot; action=&amp;quot;http://sharovatov.ru/qrcode/createCode.php?url={link}&amp;quot; /&amp;gt;
        &amp;lt;/activityAction&amp;gt;
    &amp;lt;/activity&amp;gt;
&amp;lt;/openServiceDescription&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And then just uploaded the php script and my accelerator to my site. Dead easy, 10 minutes job.&lt;/p&gt;
&lt;p&gt;As wordpress.com doesn’t allow javascript onclick handlers on the links (and accelerator gets added to IE by &lt;code&gt;window.external.addService&lt;/code&gt; call), I had to put the install page on my site. Please visit &lt;a href=&quot;http://sharovatov.ru/current.html&quot;&gt;&lt;a href=&quot;http://sharovatov.ru/current.html&quot;&gt;http://sharovatov.ru/current.html&lt;/a&gt;&lt;/a&gt; for this and few other IE8 accelerators. To get this accelerator installed, just press on “Install now” link in its description.&lt;/p&gt;
&lt;p&gt;Now if you right-click on any link, go to Accelerators, and just hover “link to QRCode” accelerator you’ll get the window with QRCode for the current link:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://sharovatov.files.wordpress.com/2010/03/qrcodeaccelerator1.gif&quot; target=&quot;_blank&quot;&gt;&lt;img title=&quot;qrcode-accelerator&quot; border=&quot;0&quot; alt=&quot;qrcode-accelerator&quot;
src=&quot;http://sharovatov.files.wordpress.com/2010/03/qrcodeaccelerator_thumb1.gif?w=256&amp;#038;h=239&quot; width=&quot;256&quot; height=&quot;239&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Then you just run Barcode app on the mobile, get the QRCode scanned and then can do anything with the link – copy it to the clipboard, open right now in the default browser. Seems to be quite handy.&lt;/p&gt;
&lt;p&gt;In order to get this accelerator in the main right-click menu, you need to go to Page &amp;rarr; All Accelerators &amp;rarr; Manage accelerators and in the window that appears select “link QRCode” accelerator and press on “Set as default” button.&lt;/p&gt;
&lt;p&gt;Here’s some guiding screenshots:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://sharovatov.files.wordpress.com/2010/03/manageaccels1.gif&quot; target=&quot;_blank&quot;&gt;&lt;img title=&quot;manageaccels&quot; border=&quot;0&quot; alt=&quot;manageaccels&quot; src=&quot;http://sharovatov.files.wordpress.com/2010/03/manageaccels_thumb1.gif?w=209&amp;#038;h=256&quot; width=&quot;209&quot; height=&quot;256&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://sharovatov.files.wordpress.com/2010/03/manageaddones1.gif&quot; target=&quot;_blank&quot;&gt;&lt;img title=&quot;manageaddones&quot; border=&quot;0&quot; alt=&quot;manageaddones&quot; src=&quot;http://sharovatov.files.wordpress.com/2010/03/manageaddones_thumb1.gif?w=256&amp;#038;h=170&quot; width=&quot;256&quot; height=&quot;170&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Then your link QRCode accelerator will be in the default context menu:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://sharovatov.files.wordpress.com/2010/03/defaultmenu1.gif&quot; target=&quot;_blank&quot;&gt;&lt;img title=&quot;defaultmenu&quot; border=&quot;0&quot; alt=&quot;defaultmenu&quot; src=&quot;http://sharovatov.files.wordpress.com/2010/03/defaultmenu_thumb1.gif?w=232&amp;#038;h=256&quot; width=&quot;232&quot; height=&quot;256&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So now you can get a QRCode for any link, scan it and use it on your mobile.&lt;/p&gt;
&lt;p&gt;P.S. There’re QRCode scanners for all mobile platforms, so if you want similar functionality on your phone, google for “QRCode scanner %yourphone%”.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Windows Phone 7 Internet Explorer IEMobile 7.0</title>
            <link href="/posts/2010-03-wp7.html"/>
            <updated>2010-03-01T00:00:00.000Z</updated>
            <id>/posts/2010-03-wp7.html</id>
            <content type="html">&lt;p&gt;I’ve just watched &lt;a href=&quot;http://www.microsoft.com/presspass/events/mix/videogallery.aspx&quot;&gt;MIX keynotes&lt;/a&gt; and as soon as MSFT announced there was free VS2010 Express for Windows Phone 7 with proper emulator, I downloaded, installed it, created sample app and ran the debugger.&lt;/p&gt;
&lt;p&gt;Here’s some screenshots:&lt;/p&gt;
&lt;p&gt;VS2010 Express for Windows Phone IDE:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://sharovatov.files.wordpress.com/2010/03/untitled2.jpg&quot;&gt;&lt;img title=&quot;Untitled-2&quot; border=&quot;0&quot; alt=&quot;Untitled-2&quot; src=&quot;http://sharovatov.files.wordpress.com/2010/03/untitled2_thumb.jpg?w=252&amp;#038;h=196&quot; width=&quot;252&quot; height=&quot;196&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Windows Phone 7 Emulator running in the debug mode:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://sharovatov.files.wordpress.com/2010/03/untitled12.jpg&quot;&gt;&lt;img title=&quot;Untitled-1&quot; border=&quot;0&quot; alt=&quot;Untitled-1&quot; src=&quot;http://sharovatov.files.wordpress.com/2010/03/untitled1_thumb2.jpg?w=252&amp;#038;h=206&quot; width=&quot;252&quot; height=&quot;206&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The most interesting thing for me was to find out which IE version Microsoft decided to ship with Windows Phone 7. They said it wouldn’t be IE9, but would be something between IE7 and IE8. They also assured that the Windows Phone emulator (which comes bundled into the VS2010 Express for Windows Phone 7) is a proper virtual machine, a real copy of Windows Phone OS sandboxed in the VM engine.&lt;/p&gt;
&lt;p&gt;So bearing this in mind I thought that I’d test the WP7 IE in emulator.&lt;/p&gt;
&lt;p&gt;And here’s interesting stuff:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;navigator.appVersion&lt;/code&gt; on Windows Phone 7 IE returns &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  4.0 (compatible; MSIE 7.0; Windows Phone OS 7.0; Trident/3.1; IEMobile/7.0
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;User-Agent string is&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  Mozilla/4.0 (compatible; MSIE 7.0; Windows Phone Os 7.0; Trident/3.1; IEMobile/7.0
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;@_jscript_version&lt;/code&gt; reports 5.8 (as IE8 does)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;[if IE 7]&lt;/code&gt; conditional comments section gets applied&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;*+html selector { rules }&lt;/code&gt; hack works&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So at this moment IEMobile/7.0 seems to be a slightly adjusted Trident (layout engine) of IE7 and jscript of version 5.8. (as it turns out below, some features are either disabled or not accessible now, or will not be supported at all)&lt;/p&gt;
&lt;p&gt;To dive deeper into the details, I’ve tested several things and prepared the following table:&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;5&quot; width=&quot;462&quot;&gt;
    &lt;tbody&gt;
    &lt;tr&gt;
        &lt;td valign=&quot;top&quot; width=&quot;276&quot;&gt;Feature&lt;/td&gt;
        &lt;td valign=&quot;top&quot; width=&quot;184&quot;&gt;&lt;strong&gt;Supports&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td valign=&quot;top&quot; width=&quot;276&quot;&gt;native
            &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms535874(VS.85).aspx&quot;&gt;XMLHttpRequest&lt;/a&gt;&lt;/td&gt;
        &lt;td valign=&quot;top&quot; width=&quot;184&quot;&gt;Yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td valign=&quot;top&quot; width=&quot;276&quot;&gt;
            &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/cc288060(VS.85).aspx&quot;&gt;XDomainRequest&lt;/a&gt;
        &lt;/td&gt;
        &lt;td valign=&quot;top&quot; width=&quot;184&quot;&gt;No&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td valign=&quot;top&quot; width=&quot;276&quot;&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/cc304115(VS.85).aspx&quot;&gt;Selectors
            API&lt;/a&gt;&lt;/td&gt;
        &lt;td valign=&quot;top&quot; width=&quot;184&quot;&gt;Yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td valign=&quot;top&quot; width=&quot;276&quot;&gt;
            &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms535220(VS.85).aspx&quot;&gt;clipboardData&lt;/a&gt;
        &lt;/td&gt;
        &lt;td valign=&quot;top&quot; width=&quot;184&quot;&gt;No&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td valign=&quot;top&quot; width=&quot;276&quot;&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/cc848897(VS.85).aspx&quot;&gt;data
            URI&lt;/a&gt;&lt;/td&gt;
        &lt;td valign=&quot;top&quot; width=&quot;184&quot;&gt;No&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td valign=&quot;top&quot; width=&quot;276&quot;&gt;
            &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/cc197013(VS.85).aspx&quot;&gt;maxConnectionsPerServer&lt;/a&gt;
        &lt;/td&gt;
        &lt;td valign=&quot;top&quot; width=&quot;184&quot;&gt;No&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td valign=&quot;top&quot; width=&quot;276&quot;&gt;
            &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/cc197020(VS.85).aspx&quot;&gt;sessionStorage/localStorage&lt;/a&gt;
        &lt;/td&gt;
        &lt;td valign=&quot;top&quot; width=&quot;184&quot;&gt;No&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td valign=&quot;top&quot; width=&quot;276&quot;&gt;
            &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms534198(VS.85).aspx&quot;&gt;offscreenBuffering&lt;/a&gt;
        &lt;/td&gt;
        &lt;td valign=&quot;top&quot; width=&quot;184&quot;&gt;No&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td valign=&quot;top&quot; width=&quot;276&quot;&gt;native &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/cc836458(VS.85).aspx&quot;&gt;JSON&lt;/a&gt;
        &lt;/td&gt;
        &lt;td valign=&quot;top&quot; width=&quot;184&quot;&gt;No&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td valign=&quot;top&quot; width=&quot;276&quot;&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/dd282900(VS.85).aspx&quot;&gt;DOM
            Objects prototypes&lt;/a&gt;&lt;/td&gt;
        &lt;td valign=&quot;top&quot; width=&quot;184&quot;&gt;No&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td valign=&quot;top&quot; width=&quot;276&quot;&gt;
            &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/dd229916(VS.85).aspx&quot;&gt;getters/setters&lt;/a&gt;
        &lt;/td&gt;
        &lt;td valign=&quot;top&quot; width=&quot;184&quot;&gt;No&lt;/td&gt;
    &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;


&lt;p&gt;So from the CSS prospective Windows Phone IEMobile 7.0 is &lt;strong&gt;indistinguishable&lt;/strong&gt; from desktop IE7, it applies the same conditional comments rules, supports the same subset of CSS selectors, same hacks work and same bugs are there. If you know how to support desktop IE7 Trident, you won’t have a problem with IEMobile 7.0.&lt;/p&gt;
&lt;p&gt;Completely different situation is with javascript – jscript version is 5.8 (same that IE8 has), but many features that IE8 supports via COM wrappers do not exist on IEMobile 7.0 (does it have COM at all?). Also it lacks support for some native features of jscript 5.8 (e.g. native JSON, DOM objs prototypes, getters/settters). The only feature I can see from IE8 is Selectors API support, which is great, but really – is that what we really expected?&lt;/p&gt;
&lt;p&gt;So from what I see now, Microsoft took IE7 Trident (3.1), took jscript 5.8 and cut off as much as possible (all COM wrappers and some native features), put IE8 icon on top and shipped it to Windows Phone 7.&lt;/p&gt;
&lt;p&gt;I really hoped it would have IE9 or at least IE8.&lt;/p&gt;
&lt;p&gt;The only hope is that it’s still beta and all the IE8 stuff will be shipped with the final version. Hope it’s not just a wishful thinking.&lt;/p&gt;
&lt;p&gt;It’s such a frustration to see a beautiful and free VS2010 Express for Windows Phone 7, awesome SL4 which runs everywhere, and then look at this crippled “IE7.234”. If this is a marketing choice to make web-developers write in Silverlight, then it’s silly because it breaks the most important feature Microsoft provided – backwards compatibility. Old sites and current sites which Windows Phone users will want to visit will break in this browser. Gmail works in html-only mode. Surely, some will adapt. But not all.&lt;/p&gt;
&lt;p&gt;And by the way, Apple got it right on iPhone.&lt;/p&gt;
&lt;p&gt;P.S. &lt;a href=&quot;http://www.istartedsomething.com/20100316/windows-update-like-service-coming-to-windows-phone-7-series/&quot;&gt;Todd Brix said&lt;/a&gt; there would be a Windows Update-like service in Windows Phone 7, so let’s hope that IEMobile will get updated.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Windows Phone 7 emulator, updates and app blacklist</title>
            <link href="/posts/2010-03-wp7emul.html"/>
            <updated>2010-03-01T00:00:00.000Z</updated>
            <id>/posts/2010-03-wp7emul.html</id>
            <content type="html">&lt;p&gt;Today twitter brought me a link to a very interesting &lt;a href=&quot;http://sviluppomobile.blogspot.com&quot;&gt;blog of Dan Ardelean&lt;/a&gt; who’s exploring Windows Phone 7.&lt;/p&gt;
&lt;p&gt;As you know, Microsoft offers a free version of &lt;a href=&quot;http://www.microsoft.com/express/Phone/&quot;&gt;Visual Studio Express for Windows Phone 7&lt;/a&gt; which comes with an emulator. But in that emulator you can only run IEMobile (obviously, to test your websites in it) and apps you are developing in Visual Studio Express.&lt;/p&gt;
&lt;p&gt;So I was really amazed by what Dan did – he unlocked the full version of emulator and made all the default apps available! Visit &lt;a href=&quot;http://sviluppomobile.blogspot.com/2010/03/wmp7-emulator-unlock.html&quot;&gt;his blogpost&lt;/a&gt; for more details &lt;strike&gt;and the link to the modified emulator image&lt;/strike&gt; (unfortunately, the link is now down as Dan says he doesn’t know what Microsoft will think about this).&lt;/p&gt;
&lt;p&gt;Luckily, I managed to download the image, but I won’t upload it until Dan decides what to do with it. If you have his image, you need to run it with XDA (part of Visual Studio Express for Windows Phone):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;D:\Program Files\Microsoft XDE\1.0\XDE.exe&amp;quot; &amp;quot;C:\dist\WM70Full.bin&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And you’ll get the emulator running the unlocked image!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://sharovatov.files.wordpress.com/2010/03/wphone1.jpg&quot;&gt;&lt;img title=&quot;wphone1&quot; border=&quot;0&quot; alt=&quot;wphone1&quot;
src=&quot;http://sharovatov.files.wordpress.com/2010/03/wphone1_thumb.jpg?w=158&amp;#038;h=254&quot; width=&quot;158&quot; height=&quot;254&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://sharovatov.files.wordpress.com/2010/03/wphone2.jpg&quot;&gt;&lt;img title=&quot;wphone2&quot; border=&quot;0&quot; alt=&quot;wphone2&quot; src=&quot;http://sharovatov.files.wordpress.com/2010/03/wphone2_thumb.jpg?w=154&amp;#038;h=254&quot; width=&quot;154&quot; height=&quot;254&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As far as I understand, Dan was looking at the registry file from the emulator’s image binary and found that some applications were blacklisted, then he enabled all of them and repackaged the image. Sounds simple, but believe me, it’s not!&lt;/p&gt;
&lt;p&gt;But what’s more interesting is that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;apps are going to be distributed only through WP Marketplace&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;there will be a Windows Update-like service on the Phone 7&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;there’s a blacklist registry hive for apps on the phone which Dan discovered&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So it will be dead easy for Microsoft to block certain applications with new updates, especially if updates are going to be mandatory and automatically installed.&lt;/p&gt;
&lt;p&gt;At this moment the system has this configuration screen for updates:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://sharovatov.files.wordpress.com/2010/03/wphone3.jpg&quot;&gt;&lt;img title=&quot;wphone3&quot; border=&quot;0&quot; alt=&quot;wphone3&quot; src=&quot;http://sharovatov.files.wordpress.com/2010/03/wphone3_thumb.jpg?w=155&amp;#038;h=258&quot; width=&quot;155&quot; height=&quot;258&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Does this “notify me when new updates are found” mean that updates will not be installed automatically and we’ll be able to choose what to install? We’ll see.&lt;/p&gt;
&lt;p&gt;Useful links:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://sviluppomobile.blogspot.com&quot;&gt;Dan Ardelean’s blog&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.microsoft.com/express/Phone/&quot;&gt;Visual Studio Express for Windows Phone 7 beta&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.microsoft.com/downloads/details.aspx?FamilyID=6f014e07-0053-4aca-84a7-cd82f9aa989f&amp;amp;displaylang=en&quot;&gt;Microsoft Expression Blend 4 beta&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.microsoft.com/downloads/details.aspx?displaylang=en&amp;amp;FamilyID=86370108-4c14-42ee-8855-226e5dd9b85b&amp;amp;utm_source=feedburner&amp;amp;utm_medium=feed&amp;amp;utm_campaign=Feed:+MicrosoftDownloadCenter+(Microsoft+Download+Center)&quot;&gt;Microsoft Expression Blend SDK preview for Windows Phone&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.microsoft.com/downloads/details.aspx?FamilyID=47f5c718-9dec-4557-9687-619c0fdd3d4f&amp;amp;displaylang=en&quot;&gt;Microsoft Expression Blend Add-in preview for Windows Phone&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        </entry>
    
        <entry>
            <title>small piece of js code explained</title>
            <link href="/posts/2011-01-jsexplained.html"/>
            <updated>2011-01-01T00:00:00.000Z</updated>
            <id>/posts/2011-01-jsexplained.html</id>
            <content type="html">&lt;p&gt;Today a colleague showed me a piece of js code and asked to explain how it works.&lt;/p&gt;
&lt;p&gt;Here’s the code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(function(x) {return x(x);})(function(z){ return function(y){ return z; } })(1)(2)(3) 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For many from non-js background it would be easier if I rewrite first two function expressions as function declarations, turn third function expression into named function expression and break the execution into parts:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function f1(x) {
    return x(x);
}
function f2(z) {
    return function f3 (y) {
        return z;
    }
}
var result1 = f1(f2);
var result2 = result1(1);
var result3 = result2(2);
var result4 = result3(3);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So let&amp;#39;s see what each function does first:&lt;/p&gt;
&lt;p&gt;Function &lt;strong&gt;f1&lt;/strong&gt; accepts one argument and calls this argument as a function and passes it with itself as a parameter.&lt;/p&gt;
&lt;p&gt;Function &lt;strong&gt;f2 &lt;/strong&gt;accepts parameter &lt;strong&gt;z &lt;/strong&gt;and creates another function. As &lt;strong&gt;f2 &lt;/strong&gt;scope gets copied to &lt;strong&gt;f3&lt;/strong&gt;, argument &lt;strong&gt;z &lt;/strong&gt;is always accessible from within &lt;strong&gt;f3&lt;/strong&gt;; and what &lt;strong&gt;f3&lt;/strong&gt; does is it returns this argument &lt;strong&gt;z&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;After we grasp the idea of what these functions do, let’s see how everything is executed.&lt;/p&gt;
&lt;p&gt;When &lt;code&gt;var result1 = f1(f2)&lt;/code&gt; is executed, &lt;strong&gt;f1&lt;/strong&gt; is called with &lt;strong&gt;f2&lt;/strong&gt; passed as a parameter. &lt;code&gt;return x(x)&lt;/code&gt; means that we need to call &lt;code&gt;f2(f2)&lt;/code&gt; and return the result.&lt;/p&gt;
&lt;p&gt;When &lt;strong&gt;f2&lt;/strong&gt; is called with &lt;strong&gt;f2&lt;/strong&gt; as a parameter, function &lt;strong&gt;f3&lt;/strong&gt; will be created and it’s &lt;strong&gt;z&lt;/strong&gt; will hold a reference to &lt;strong&gt;f2&lt;/strong&gt;. And this &lt;strong&gt;f3&lt;/strong&gt; is returned to &lt;strong&gt;result1&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Now we know that &lt;strong&gt;result1 &lt;/strong&gt;actually holds a reference to &lt;strong&gt;f3&lt;/strong&gt; which regardless of the parameters always returns a reference to &lt;strong&gt;f2&lt;/strong&gt; which it “remembered” earlier. Hence, when we come to execute &lt;code&gt;var result2 = result1(1)&lt;/code&gt;, we actually call &lt;strong&gt;f3(1)&lt;/strong&gt; and our &lt;strong&gt;f3&lt;/strong&gt; just returns a reference to &lt;strong&gt;f2&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;So, this part of the code &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(function(x) { return x(x) })(function(z){ return function(y) { return z; } })(1)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;could be replaced with &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(function(z){ return function(y) { return z; } })
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let&amp;#39;s move on and execute &lt;code&gt;var result3 = result2(2);&lt;/code&gt;. We’ve just found out that &lt;strong&gt;result2&lt;/strong&gt; holds a reference to &lt;strong&gt;f2&lt;/strong&gt;, so it’s rather &lt;strong&gt;f2(2)&lt;/strong&gt; that we’re seeing here, which – as we remember – creates &lt;strong&gt;f3&lt;/strong&gt; function and stores &lt;strong&gt;z&lt;/strong&gt; in it’s context. This &lt;strong&gt;f3&lt;/strong&gt; will always return 2, &lt;strong&gt;result3&lt;/strong&gt; is a function will always return 2.&lt;/p&gt;
&lt;p&gt;And when we execute &lt;code&gt;var result4 = result3(3)&lt;/code&gt;,&lt;strong&gt; f3(3)&lt;/strong&gt; is actually called and returns 2 as expected.&lt;/p&gt;
&lt;p&gt;I think, this again proves that javascript is syntactically very powerful language.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>iframe height auto-resize</title>
            <link href="/posts/2012-01-iframe-autosize.html"/>
            <updated>2012-01-01T00:00:00.000Z</updated>
            <id>/posts/2012-01-iframe-autosize.html</id>
            <content type="html">&lt;p&gt;If you have a page and an iframe in it,  and the iframe viewport height changes, browser adds scrollbars to the iframe.&lt;/p&gt;
&lt;p&gt;Sometimes it’s ok, but when you need your iframe to “expand” automatically on the host page, you have to change the iframe object height style property. And it’s dead easy when both iframe and the host page are from same origin – you just talk to parent window from the iframe and make it set the object height.&lt;/p&gt;
&lt;p&gt;However, when cross-origin security model applies, everything gets more interesting, and you’re pretty much limited to &lt;a href=&quot;http://dev.w3.org/html5/postmsg/&quot;&gt;CDM&lt;/a&gt;/&lt;a href=&quot;http://www.sitepen.com/blog/2008/07/22/windowname-transport/&quot;&gt;window.name&lt;/a&gt;/location.hash transports.&lt;/p&gt;
&lt;p&gt;So the proper approach would be to use CDM with a fallback to location.hash – newer browsers (IE8+ and current Firefox, Opera, Safari and Chrome) support postMessage, older versions will fall back to setting parent page location.hash property and on the parent page – interval polling for changes.&lt;/p&gt;
&lt;p&gt;Here’s &lt;a href=&quot;http://sharovatov.ru/iframe-autoheight/iframeHost.php&quot;&gt;a basic working sample&lt;/a&gt; implementing this approach and here’s the code for it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://bitbucket.org/sharovatov/test/src/2bca47aa8b71/iframe-autoheight/iframeChild.html&quot;&gt;child page&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://bitbucket.org/sharovatov/test/src/2bca47aa8b71/iframe-autoheight/iframeHost.php&quot;&gt;parent page&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please note that in this sample no origin check is done for the message on the parent page and the message is sent from the client page to &lt;em&gt; origin. This might be a serious security breach since the parent page will process a message send from &lt;em&gt;*any&lt;/em&gt;&lt;/em&gt; page, but in my case it’s OK because the worst thing that can happen – the iframe height will change. Please don’t use this as a universal solution for cross-iframe communication – there’re plenty of plugins and libraries that do it properly.&lt;/p&gt;
&lt;p&gt;I built it this way just to fit my exact needs – i.e. change height of the iframe object on a parent page.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>X-FRAME-OPTIONS</title>
            <link href="/posts/2012-01-x-frame-options.html"/>
            <updated>2012-01-01T00:00:00.000Z</updated>
            <id>/posts/2012-01-x-frame-options.html</id>
            <content type="html">&lt;p&gt;This X-FRAME-OPTIONS HTTP header invented by Microsoft for IE8 provides an easy way to work around &lt;a href=&quot;http://en.wikipedia.org/wiki/Clickjacking&quot;&gt;Clickjacking&lt;/a&gt; security issue (see &lt;a href=&quot;http://w2spconf.com/2010/papers/p27.pdf&quot;&gt;this great paper&lt;/a&gt; for even more details). The main article explaining how X-FRAME-OPTION works is this: &lt;a href=&quot;http://blogs.msdn.com/b/ie/archive/2009/01/27/ie8-security-part-vii-clickjacking-defenses.aspx&quot;&gt;http://blogs.msdn.com/b/ie/archive/2009/01/27/ie8-security-part-vii-clickjacking-defenses.aspx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Basically, here’s what behaviour you get with different X-FRAME-OPTIONS values:&lt;/p&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;5&quot; width=&quot;703&quot;&gt;
    &lt;tbody&gt;
    &lt;tr&gt;
        &lt;td valign=&quot;top&quot; width=&quot;201&quot;&gt;&lt;code&gt;DENY&lt;/code&gt;&lt;/td&gt;
        &lt;td valign=&quot;top&quot; width=&quot;500&quot;&gt;browser will not render the iframe contents in any case&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td valign=&quot;top&quot; width=&quot;201&quot;&gt;&lt;code&gt;SAMEORIGIN&lt;/code&gt;&lt;/td&gt;
        &lt;td valign=&quot;top&quot; width=&quot;500&quot;&gt;browser will only render the iframe contents if host page origin is the same as the iframe page origin
    &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td valign=&quot;top&quot; width=&quot;201&quot;&gt;&lt;code&gt;ALLOW FROM http://host&lt;/code&gt;&lt;/td&gt;
        &lt;td valign=&quot;top&quot; width=&quot;500&quot;&gt;browser will only render the iframe contents if the iframe host is httр://host &lt;/td&gt;
    &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;Please note that specifying the header in META tag won’t work&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Good news – all browsers vendors copied this from Microsoft and now we’ve got all modern browsers supporting this header (Firefox 3.6.9, IE8, Opera 10.50, Safari 4.0, Chrome 4.1).&lt;/p&gt;
&lt;p&gt;Unfortunately, for some reason only Opera and IE show a meaningful message why the frame was blocked, all others just display the empty iframe (it’s especially weird for Firefox, which should show the warning as per their bugzilla):&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://sharovatov.files.wordpress.com/2012/01/image.png&quot;&gt;&lt;img title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;http://sharovatov.files.wordpress.com/2012/01/image_thumb.png?w=700&amp;#038;h=238&quot; width=&quot;700&quot; height=&quot;238&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In any case, study the security papers I linked to above to understand how the attack works and what it can do to your visitors or your business.&lt;/p&gt;
&lt;p&gt;However, if you strongly believe no one should embed your page in an iframe – then your silver bullet is to add &lt;code&gt;X-FRAME-OPTIONS: DENY&lt;/code&gt; to all the pages you serve.&lt;/p&gt;
&lt;p&gt;P.S. X-FRAME-OPTIONS is now proposed to IETF: &lt;a href=&quot;http://tools.ietf.org/html/draft-gondrom-frame-options-01&quot;&gt;http://tools.ietf.org/html/draft-gondrom-frame-options-01&lt;/a&gt;&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Opera Unite is dead</title>
            <link href="/posts/2012-10-opera-unite-dead.html"/>
            <updated>2012-10-01T00:00:00.000Z</updated>
            <id>/posts/2012-10-opera-unite-dead.html</id>
            <content type="html">&lt;p&gt;So it turns out I was right in &lt;a href=&quot;http://sharovatov.wordpress.com/2009/06/16/opera-revolution-fail/&quot;&gt;my earlier blogpost&lt;/a&gt; about Opera’s so-called “web revolution” and “reinventing the web” marketing bluff – it was a dead end right from the start.&lt;/p&gt;
&lt;p&gt;As &lt;a href=&quot;http://my.opera.com/addons/blog/2012/04/24/sunsetting-unite-and-widgets&quot;&gt;officially noted on the Opera blog&lt;/a&gt;, Opera Unite has been discontinued from the 24&lt;sup&gt;th&lt;/sup&gt; April 2012 with Opera 12 release.&lt;/p&gt;
&lt;p&gt;Not a big surprise at all.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Installing Opera Mini emulator locally</title>
            <link href="/posts/2012-10-operaminiemul.html"/>
            <updated>2012-10-01T00:00:00.000Z</updated>
            <id>/posts/2012-10-operaminiemul.html</id>
            <content type="html">&lt;p&gt;If I remember correctly, Opera website earlier had instructions on how to use Opera Mini on the desktop, but now they are either gone or unreachable. So here’s a simple set of instructions to get Opera Mini running in a JVM emulator.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;make sure that JRE is installed&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://code.google.com/p/microemu/downloads/list&quot;&gt;download latest microemulator&lt;/a&gt; and unzip it somewhere&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;download Opera Mini jars:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://demo.opera-mini.net/public/skin.jar&quot;&gt;http://demo.opera-mini.net/public/skin.jar&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://demo.opera-mini.net/public/mini.jar&quot;&gt;http://demo.opera-mini.net/public/mini.jar&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://demo.opera-mini.net/public/applet.jar&quot;&gt;http://demo.opera-mini.net/public/applet.jar&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;run microemu: java -jar microemulator.jar&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make sure Options&amp;rarr;MIDlet network access is checked so that your emulator will have access to the network&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select Options&amp;rarr;Select device and choose “Resizable device” and set it as a default – this will allow you to resize your emulator to any width you like&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select File&amp;rarr;Open midlet, locate mini.jar and select it&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;However, this setup is only useful to see how your website looks in Opera Mini, and is certainly not a proper development environment. For instance, I couldn’t find a way to inspect what’s being transferred over the network – and even if I did, I’d obviously only see Opera’s OBML traffic between the jar and Opera’s servers and nothing more.&lt;/p&gt;
&lt;p&gt;The only useful thing hiding in Opera Mini is &lt;strong&gt;server:source&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Basically, if you want to view the source of the page, you can type in &lt;strong&gt;server:source&lt;/strong&gt; in the address bar while viewing a website and you’ll get awfully-rendered page source (note that this will not be OBML, but rather the original page source that Opera’s servers got from the URL you specified). And if want to inspect the source on your desktop rather than small emulator screen, you can ask Opera’s servers to post the source to a URL by specifying &lt;strong&gt;server:source?post=&lt;a href=&quot;http://youraddress/script&quot;&gt;http://youraddress/script&lt;/a&gt;&lt;/strong&gt; and three values will be POSTed to the URL provided:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;html – the original page source&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;host – the HTTP host field value&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;URL – the URL that was fetched&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        </entry>
    
        <entry>
            <title>shaky lines drawing tool for browser and nodejs</title>
            <link href="/posts/2013-01-07-shakylines-js.html"/>
            <updated>2013-01-01T00:00:00.000Z</updated>
            <id>/posts/2013-01-07-shakylines-js.html</id>
            <content type="html">&lt;p&gt;&lt;a href=&quot;http://mrale.ph/&quot;&gt;Vyacheslav Egorov&lt;/a&gt; recently &lt;a href=&quot;http://mrale.ph/blog/2012/11/25/shaky-diagramming.html&quot;&gt;showed his useful helper tool that converts handwritten ASCII-based diagrams into images&lt;/a&gt; - he wrote it in Dart, adding around 450 kbytes overhead to the code that could perfectly fit in 18 kbytes of heavily commented non-minimized javascript code (or ~8 kbytes of minified code). &lt;/p&gt;
&lt;p&gt;I thought this was a huge waste of resources and &lt;a href=&quot;https://github.com/sharovatov/my/tree/master/js_experiments/shaky&quot;&gt;rewrote the tool to pure js&lt;/a&gt;, I just didn&amp;#39;t see any reason for Dart here.&lt;/p&gt;
&lt;p&gt;To use this in console, run &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;node shaky-node.js textfile imagefile.png
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Please note that while &lt;a href=&quot;https://github.com/LearnBoost/node-canvas/pull/231&quot;&gt;this pull request&lt;/a&gt; is not merged, there&amp;#39;s no way to make node-canvas use custom font, so please install the ttf font locally. &lt;/p&gt;
&lt;p&gt;And please use the &lt;code&gt;shaky.html&lt;/code&gt; file as a sample of in-browser use.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>proper iOS pull-to-refresh</title>
            <link href="/posts/2013-01-09-iOS-pull-to-refresh.html"/>
            <updated>2013-01-01T00:00:00.000Z</updated>
            <id>/posts/2013-01-09-iOS-pull-to-refresh.html</id>
            <content type="html">&lt;p&gt;Most of the pull-to-refresh plugins or concepts I saw had drawbacks - some emulated native scroll with JS (seems slower and non-native to me), others (mobile gmail) hid scrollbar altogether, &lt;a href=&quot;http://cubiq.org/dropbox/iscroll4/examples/pull-to-refresh/&quot;&gt;others&lt;/a&gt; made scrollbar appear as if some content is already scrolled. &lt;/p&gt;
&lt;p&gt;As no available app seemed good enough for me and project requirements required iOS only, I drafted &lt;a href=&quot;https://github.com/sharovatov/my/tree/master/js_experiments/ios_pull-to-refresh&quot;&gt;this&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Basically, everything what needs to be hardware accelerated, is actually accelerated.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://sharovatov.ru/ptr/ptr.html&quot;&gt;The testcase&lt;/a&gt; seems to perform quite well on all my target platforms - iPhone4, 4s and 5.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Opera Mini review</title>
            <link href="/posts/2013-10-operamini-review.html"/>
            <updated>2013-10-01T00:00:00.000Z</updated>
            <id>/posts/2013-10-operamini-review.html</id>
            <content type="html">&lt;p&gt;This is the exerpt of my Opera Mini review for Mail Ru where we had to decide  what browsers we had to support for one of our mobile projects and what functionality had to be provided for the target platforms. &lt;/p&gt;
&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;
&lt;p&gt;Every request to a website is done not directly from the client installed on the phone, but through Opera servers farm in Norway, Poland, Korea, China and the United States as per &lt;a href=&quot;http://www.operasoftware.com/press/releases/mobile/opera-slashes-power-usage-with-new-server-parks&quot;&gt;this press release&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Opera Mini is just a viewer (with a few features) for the website rendered image that is composed on the server by Presto rendering engine (and now with Presto’s death all the servers may eventually be upgraded to Webkit). This image is rendered in a proprietary format called OBML (Opera Binary Markup Language). It has “language” word because though being compressed, it presents some dynamic features.&lt;/p&gt;
&lt;p&gt;So Opera Mini is basically a very thin client that doesn’t have its own HTML/JS/CSS engines and hence the following consequences apply:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Opera Mini cannot do any recalculations on its own – no animation, no background processing, no timers, no generated events.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;as the actual page is rendered somewhere on the server possibly in another country, you won’t be able to access your localhost or your protected network from neither Opera Mini emulator nor from a real device. The address you are trying to fetch must be publicly accessible from the outside world.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There is nothing to debug on the actual device and there’s no way Opera will provide remote debuggers access to their servers. Hence ther are no development toolbars and no script debugging. You’re back to alerting debugging information, and even with alerts Opera Mini doesn’t make it easy for you – usually only one alert at a page load is displayed, even if you put few alerts calls one after another in the code.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;rendering-modes&quot;&gt;Rendering modes&lt;/h2&gt;
&lt;p&gt;Opera mini has two rendering modes: &lt;strong&gt;desktop view&lt;/strong&gt; and &lt;strong&gt;mobile view&lt;/strong&gt;. &lt;strong&gt;Desktop view&lt;/strong&gt; is enabled by default and &lt;strong&gt;mobile view&lt;/strong&gt; can be enabled in the settings.&lt;/p&gt;
&lt;h2 id=&quot;desktop-view&quot;&gt;Desktop view&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Desktop view&lt;/strong&gt; makes Opera Mini report its media type to CSS as &lt;strong&gt;screen&lt;/strong&gt; and the corresponding media queries fire.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Desktop mode&lt;/strong&gt; has two viewing modes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;as it is, 1:1, automatically enabled if the page viewport width is &lt;em&gt;not more&lt;/em&gt; than the device doubled screen width.&lt;/li&gt;
&lt;li&gt;“zoomed out” mode, automatically enabled if the page viewport width is &lt;em&gt;more&lt;/em&gt; than the device doubled screen width. The whole page is zoomed out to fit in the screen without a horizontal scroll. So the user sees the page zoomed out and selects an area of interest to zoom in. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To prevent “zoomed out” mode and to make Opera Mini show the pages in 1:1 mode, the following javascript code can be of help: &lt;code&gt;window.operamini.page.samePage=true;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;However, if the first page the user visits is very wide, “zoomed out” mode will be enabled for this page regardless of the &lt;strong&gt;samePage&lt;/strong&gt; property value, and only the next page will respect the corresponding value.&lt;/p&gt;
&lt;p&gt;In the &lt;strong&gt;desktop view&lt;/strong&gt; mode page content is not reflowed.&lt;/p&gt;
&lt;h2 id=&quot;mobile-view&quot;&gt;Mobile view&lt;/h2&gt;
&lt;p&gt;In the &lt;strong&gt;mobile view&lt;/strong&gt; mode page content is reflowed into one column to fit in the screen width.&lt;/p&gt;
&lt;p&gt;Opera Mini starts reporting its Media as &lt;strong&gt;handheld&lt;/strong&gt; and corresponding media queries are applied in the CSS.&lt;/p&gt;
&lt;p&gt;There’s no way to prevent user from changing rendering modes and the reflow rules Opera Mini uses are not published or documented, so targeting &lt;strong&gt;mobile view&lt;/strong&gt; is very problematic and can only be experimentally driven.&lt;/p&gt;
&lt;h2 id=&quot;rendering&quot;&gt;Rendering&lt;/h2&gt;
&lt;p&gt;Currently Opera servers use Presto (though the desktop version of Opera abandoned Presto in favour of Webkit). &lt;/p&gt;
&lt;p&gt;The following features are supported:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;media queries&lt;/li&gt;
&lt;li&gt;CSS3 colours&lt;/li&gt;
&lt;li&gt;CSS3 selectors &lt;/li&gt;
&lt;li&gt;CSS3 multiple backgrounds&lt;/li&gt;
&lt;li&gt;all popular image types (though the server will convert them to internal OBML imaging with quality loss anyway)&lt;/li&gt;
&lt;li&gt;SVG (rasterized by the server!)&lt;/li&gt;
&lt;li&gt;favicon&lt;/li&gt;
&lt;li&gt;document title&lt;/li&gt;
&lt;li&gt;reads RSS&lt;/li&gt;
&lt;li&gt;canvas (but rasterized and shows only the first frame)&lt;/li&gt;
&lt;li&gt;text styling: bold, underline, overline, strike&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And the following features are not supported:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;web fonts&lt;/li&gt;
&lt;li&gt;italic font style (seems to depend on the fonts installed on the phone)&lt;/li&gt;
&lt;li&gt;transitions&lt;/li&gt;
&lt;li&gt;flash&lt;/li&gt;
&lt;li&gt;dotted/dashed borders are drawn as solid &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;line-height&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;there’s only one scrollable area, everything that might have scrollbars is flattened and the hidden content is cropped&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;animated images only have the first frame displayed&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;only few fonts available on the device are shown + 1 UTF font is included (most often sans-serif)&lt;/li&gt;
&lt;li&gt;only one font-family for the whole page + monospace&lt;/li&gt;
&lt;li&gt;different devices can have different font sizes (though I didn’t observe that)&lt;/li&gt;
&lt;li&gt;tables can not be properly reflowed in the mobile view mode and the horizontal scroll will be shown&lt;/li&gt;
&lt;li&gt;no CSS features requiring Vega (Opera’s graphical library) are supported: drop-shadow, border-radiua, gradients)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;javascript&quot;&gt;Javascript&lt;/h2&gt;
&lt;p&gt;Opera Mini doesn’t have its own JS engine and it just shows a “snapshot” of the page state as it was rendered and executed on the server. Elements with event handlers are transformed to so called “active areas”, when user clicks one of these areas, a request is sent to Opera Mini server where the page is ressurected and corresponding javascript event fires. As soon as the Presto engine completes javascript execution (within the timeout), new page state is dumped to OBML and sent back to Opera Mini.&lt;/p&gt;
&lt;p&gt;Active area state is considered to be changed when one of the elements contained within this active area is clicked or form values are changed, neither scrolling nor other actions cause Opera Mini to request fresh page state from the server.&lt;/p&gt;
&lt;p&gt;The following events are fired on the server:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;window.onload – as soon as the server loads the page&lt;/li&gt;
&lt;li&gt;when a form element active area state is changed on the Opera Mini and Opera Mini sends the change to the server, corresponding form elements fire focus-&amp;gt;click-&amp;gt;change-&amp;gt;blur events sequence (without any delay between them), waits for javascript handlers to complete execution and compile resulting DOM state back to OBML and sends to the Opera Mini client.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Javascript execution time on the server is limited by 2.5 seconds for Opera Mini 4 servers and 5 seconds for Opera Mini 5 and newer. As soon as the limit is hit, execution is paused and resulting DOM is compiled to OBML and sent to the Opera Mini client. So for each fresh page state request from Opera Mini to Opera Mini servers javascript code on the page has up to 5 seconds to perform (this limitation applies to all javascript APIs: XHR, setTimeout/setInterval etc.).&lt;/p&gt;
&lt;p&gt;Opera Mini 5 and later support progressive rendering so that OBML can be delivered to Opera Mini client and rendered by chunks, when this process is occuring, download progress bar is animated and javascript is still being executed on the server. With this progressive rendering the 5 seconds javascript execution time limit still apply.&lt;/p&gt;
&lt;h2 id=&quot;important&quot;&gt;Important&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;window.open replaces current page with the new one. The old one is either discarded or hidden, there will be no communication between the opener and the new window.&lt;/li&gt;
&lt;li&gt;no client-side storage exist: localStorage, sessionStorage etc.&lt;/li&gt;
&lt;li&gt;no html5 client-side validation, new form elements (input type=email|range etc are not validated on the client)&lt;/li&gt;
&lt;li&gt;no webworkers support (otherwise Opera servers would be a perfect free bitcoin mining servers)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;additional-functionality&quot;&gt;Additional functionality&lt;/h2&gt;
&lt;p&gt;Opera Mini provides additional information about the phone it runs on. Opera Mini somehow sends this information to its servers and then the server sends some information to the requested URL via HTTP headers. Note that OBML is binary and not documented, so we don’t know what exactly is sent to its servers in Norway or elsewhere, we can only observe what these servers request from our servers. Also note that true privacy can not be ensured because all the communication is done through their servers and noone knows what statistics or data they collect.&lt;/p&gt;
&lt;h2 id=&quot;headers&quot;&gt;Headers&lt;/h2&gt;
&lt;p&gt;Opera Mini servers have the following headers when requesting data from target servers:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;User-Agent&lt;/strong&gt;: Opera/9.80 ($PLATFORM_NAME$; $PRODUCT_NAME$/$CLIENT_VERSION$/
$SERVER_VERSION$;U; $LOCALE$) $PRESTO_VERSION$ $EQUIV_DESKTOP_VERSION$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;X-OperaMini-Features&lt;/strong&gt;: Basic comma-separated list of features supported on the device. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;advanced&lt;/strong&gt; - MIDP2-version (has more RAM)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;basic&lt;/strong&gt; - MIDP1-version (usually installed on the cheapest phones)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;camera&lt;/strong&gt; - shows support for photos file upload using HTML input type=file. Unfortunately there’s no available statistical data (or a list of models) on what phones support this and what don’t.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;file_system&lt;/strong&gt; - file system support (i.e. user is able to download and/or upload files)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;folding&lt;/strong&gt; - content folding feature status &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;secure&lt;/strong&gt; - connection between Opera Mini and Opera Mini servers is encrypted.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;touch&lt;/strong&gt; - Opera Mini is running on a touch-operated device&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;X-OperaMini-Phone&lt;/strong&gt;: phone model and vendor, useful for the project audience statistics. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;X-Forwarded-For&lt;/strong&gt;: the list of proxy agents between the Opera Mini servers and your server, the first entry in the list shows the actual phone connection IP address. This is the only place where the actual phone’s IP address is shown.&lt;/p&gt;
&lt;p&gt;The same information is exposed to javascript via &lt;strong&gt;window.operamini.features&lt;/strong&gt; object (e.g. &lt;code&gt;window.operamini.features.folding == 1&lt;/code&gt; check will tell if content folding is enabled). So this list of features can both be checked in the server-side code and on the client-side in javascript.&lt;/p&gt;
&lt;p&gt;However, javascript &lt;strong&gt;window.operamini&lt;/strong&gt; object has some additional properties:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;window.operamini.page.maxAge&lt;/strong&gt; - time that the client will keep the page cached (minutes)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;window.operamini.page.samePage&lt;/strong&gt; - indicates if the pages is forced be left in &lt;em&gt;zoomed in&lt;/em&gt; mode or it can be allowed to be switched to &lt;em&gt;zoomed out&lt;/em&gt; mode&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;window.operamini.sms&lt;/strong&gt; - shows sms send dialogue as soon as &lt;strong&gt;window.operamini.sms.number&lt;/strong&gt; and &lt;strong&gt;window.operamini.sms.body&lt;/strong&gt; values are filled in. This method could be used to ask user to send some sms somewhere (even paid ones). The availability of sms sending feature can be checked by &lt;strong&gt;window.operamini.features.sms&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;window.operamini.remote&lt;/strong&gt; - &lt;em&gt;X-Forwarded-For&lt;/em&gt; analogue, first value in the list is the client IP address, other values are just a list of proxies between Opera Mini server and your server. Most of the times, the list only contains one value - phone IP address.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;hidden-settings&quot;&gt;Hidden settings&lt;/h2&gt;
&lt;p&gt;There are some hidden settings available in Opera Mini client. To toggle any of them, type the corresponding name into the address bar and press “Go”.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;config:&lt;/strong&gt; - most of the additiional settings&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;server:source&lt;/strong&gt; - shows the html page source (in the exact form as it was sent to Opera Mini servers by your server for the requested URL). Unfortunately, the source is rendered in the ugly monospace font (so ugly that it’s obvious it’s included in Opera Mini package). As OBML format is binary and not documented, inspecting this source is the only view-source option a client-side developer has.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;opera:cache&lt;/strong&gt; - shows the elements cached by the client&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;about:&lt;/strong&gt; - shows all versions and patent information.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;issues-and-quirks&quot;&gt;Issues and quirks&lt;/h2&gt;
&lt;p&gt;Never use &lt;code&gt;:after&lt;/code&gt; or &lt;code&gt;:before&lt;/code&gt; selectors with &lt;code&gt;content&lt;/code&gt; property on form elements such as inputs – input value can be erraneously overwritten by the &lt;code&gt;content&lt;/code&gt; property value. I witnessed this on a live project - input value was overwritten right before form submit.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Code comprehension performance and code style</title>
            <link href="/posts/2013-12-code-comprehension.html"/>
            <updated>2013-11-01T00:00:00.000Z</updated>
            <id>/posts/2013-12-code-comprehension.html</id>
            <content type="html">&lt;p&gt;I’ve recently come across an old but interesting &lt;a href=&quot;http://www.researchgate.net/publication/220071417_Empirical_Studies_of_Programming_Knowledge/file/d912f512cb2e91a8c1.pdf&quot;&gt;paper by Elliot Soloway and Kate Ehrlich on the code comprehension&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The main thing the paper concludes is that experienced programmers with time develop schematic comprehension, i.e. they tend to quickly “parse” and understand code by blocks, where each block seems to have certain meaning. Novice programmers don’t possess enough experience to be able to grasp the code meaning by blocks and therefore tend to parse code statement by statement, and perform much worse.&lt;/p&gt;
&lt;p&gt;However, this fast code scanning of the experienced programmers is of no value if the code block does something different from what it seems it should do — i.e. if the code doesn’t follow the implied conventions for the language and the problem area. This fast scanning might even have dangerous impact if the code block was misunderstood and the misunderstanding went unnoticed, in which case the experienced developer will imply incorrect behavior of the program. &lt;/p&gt;
&lt;p&gt;The paper states that there is nearly no difference in performance between an experienced and novice programmer when the code does not follow the usual conventions, code style and plan.&lt;/p&gt;
&lt;p&gt;This reiterates the point that enforcing code conventions and code style rules can make your team perform better since experienced developers will easier comprehend the code and perform at their maximum level and novice developers will learn the basic structures, schemes and conventions earlier.&lt;/p&gt;
&lt;p&gt;I do believe that what can be automated to save human effort, should be automated, and that is why tools like &lt;a href=&quot;https://github.com/mdevils/node-jscs&quot;&gt;jscs&lt;/a&gt; and &lt;a href=&quot;http://www.jslint.com&quot;&gt;jslint&lt;/a&gt;/&lt;a href=&quot;http://www.jshint.com&quot;&gt;jshint&lt;/a&gt; should be employed by almost any team, and issues that cannot be caught by the tools are to be identified and fixed at the code review stage.&lt;/p&gt;
</content>
        </entry>
    
</feed>